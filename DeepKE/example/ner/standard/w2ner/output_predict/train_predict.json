[
  {
    "sentence": "叶子节点没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "插入和删除操作效率较低，",
    "head": "插入",
    "tail": "删除",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归排序，再将排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "图的边是连接图中两个顶点的元素，它具有明确的两个端点即顶点，且在有向图中边有方向而无向图中边无方向",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "递归基础是递归算法中存在的一种终止条件，当满足该条件时递归不再继续进行，直接返回一个确定的简单结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "存储结构是指数据元素及其关系在计算机存储器中的表示，它具有数据元素的表示和关系的表示这两个核心性质",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "递归基础是递归算法中确定的最简单情况或初始条件，在该条件下递归函数无需再次调用自身即可直接给出结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "树的查找特点是基于树的结构特性通过特定规则从根节点开始按路径逐步查找目标元素以确定其是否存在于树中",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "22"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "数组是由相同类型的数据元素组成的有限序列，这些元素在内存中按顺序存储，可通过下标来唯一标识每个元素",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "双向链表是一种线性数据结构，其中每个节点包含一个数据元素以及分别指向其前驱节点和后继节点的两个指针",
    "head": "双向链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "回路是在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点的路径且除起始顶点外所经过的顶点不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "回路是数据结构中从一个顶点出发，沿着边经过一系列顶点后又回到该起始顶点的路径且路径中至少包含一条边",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1且左右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "广度优先搜索是一种按照层次依次访问节点，先访问距离起始节点较近的节点，再访问距离更远节点的搜索算法",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若存在从顶点v到顶点w的一条路径，则称从v到w是可达的",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "双向链表是一种线性数据结构，其中每个节点包含一个数据元素以及分别指向其前驱节点和后继节点的两个指针",
    "head": "双向链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "无向图是一种图结构其中任意两个顶点之间的边没有方向即顶点对(u,v)和顶点对(v,u)表示同一条边",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆是一种优先队列数据结构，其特点是父节点的值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值",
    "head": "队列",
    "tail": "父节点",
    "head_offset": "6",
    "tail_offset": "17"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "广度优先搜索是一种按照层次依次访问节点，先访问距离起始节点较近的节点，再访问距离更远节点的搜索算法",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点且有且仅有一个父节点（根节点除外，根节点没有父节点）",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "顺序查找的核心特征是从数据序列的第一个元素开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接与根节点相连",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "无向图的核心特征是由顶点集合以及顶点之间的边集合组成，其中边是没有方向的，即顶点之间的连接是双向的",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "线性结构的核心性质是数据元素之间存在着一对一的线性关系，即除第一个元素外，每个元素有且仅有一个前驱",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "存储结构是指数据元素及其关系在计算机存储器中的表示，它具有数据元素的表示和关系的表示这两个核心性质",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别进行排序，再把排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数据类型定义的核心性质包括具有特定的值集合、定义了一组对这些值的操作以及规定了这些操作所遵循的规则",
    "head": "数据类型",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归排序后再将排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "比较排序是基于元素之间的比较来确定元素顺序的排序算法其核心性质为通过比较元素大小来逐步构建有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的元素在物理位置上也相邻",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的一端进行插入操作，而在另一端进行删除操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "树的高度",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "双向链表每个节点包含数据、指向前一个节点的指针和指向后一个节点的指针，既可以向前遍历也可以向后遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "二叉树每个节点最多有两棵子树，并且二叉树的度最大为2，同时二叉树的左右子树是有顺序的，次序不能颠倒",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "递归基础是递归算法中递归调用结束的条件即当满足特定条件时递归函数不再进行自身调用而是返回一个确定值",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "树的高度",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉树是一种树形结构，其每个节点最多有两个子节点，分别称为左子节点和右子节点，并且二叉树可以为空树",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "在图论中回路是指在一个图中从某一顶点出发，沿着边连续移动，经过若干个不同顶点后又回到起始顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "4",
    "tail_offset": "47"
  },
  {
    "sentence": "子节点是树结构中直接位于某一节点下方的节点，具有与父节点存在直接层级关系且处于其下一层级的核心性质",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1且左右子树均为一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的一端进行插入操作，而在另一端进行删除操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "线性查找是按顺序依次对数据集合中的每个元素进行比较判断，直至找到目标元素或遍历完整个集合的查找方法",
    "head": "查找",
    "tail": "集合",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "简单排序是对数据元素按照特定规则进行比较和交换等操作以实现从小到大或从大到小有序排列的一种排序方式",
    "head": "简单排序",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序表具有随机访问效率高、存储密度大、逻辑上相邻元素物理存储位置也相邻但插入和删除操作效率低等特点",
    "head": "访问",
    "tail": "插入",
    "head_offset": "7",
    "tail_offset": "36"
  },
  {
    "sentence": "单链表是一种链式存储的线性表，每个节点包含数据元素以及指向后继节点的指针，且最后一个节点的指针为空",
    "head": "单链表",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "双向链表是一种线性数据结构，其中每个节点包含一个数据元素以及分别指向其前驱节点和后继节点的两个指针",
    "head": "双向链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "归并排序的核心性质是将一个数组分成两个子数组分别进行排序，然后将排序好的子数组合并成一个有序的数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "归并排序的核心特征是将一个序列分成两个子序列分别进行排序，然后将排序好的子序列合并成一个有序的序列",
    "head": "归并排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "完全二叉树是一种除最后一层外，每一层上的节点数都达到最大值，且最后一层上只缺少右边若干节点的二叉树",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "46"
  },
  {
    "sentence": "数组是一种具有固定大小的数据结构，其中元素具有相同的数据类型，并且可以通过下标来访问和修改这些元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "回路是在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点且路径中顶点不重复（除起始顶点）的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其元素的插入和删除操作都在同一端进行，这一端被称为栈顶，另一端则为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "18",
    "tail_offset": "21"
  },
  {
    "sentence": "顺序表具有随机访问效率高、存储密度大、逻辑上相邻的数据元素物理上也相邻但插入和删除操作效率低的特点",
    "head": "访问",
    "tail": "数据元素",
    "head_offset": "7",
    "tail_offset": "25"
  },
  {
    "sentence": "顺序查找的核心特征是从数据序列的第一个元素开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条边都有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断将区间缩小一半来查找目标值，具有查找效率高、时间复杂度为对数级的特点",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "图是一种由顶点集合及顶点间的边的集合组成的数据结构，其中顶点表示数据元素，边表示数据元素之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "7",
    "tail_offset": "16"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "归并排序的核心性质是将一个数组分成两个子数组分别进行排序，然后将排序好的子数组合并成一个有序的数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数或节点数所体现出的关于树的垂直延伸程度的特征",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "简单排序是对数据序列进行比较和交换等操作以实现排序，具有操作相对简单、适用于较小规模数据序列等特点",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "操作效率是指在数据结构中进行各种操作（如插入、删除、查找等）时所花费的时间和空间资源的综合表现情况",
    "head": "操作效率",
    "tail": "插入",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "稳定性是指在数据结构中，对于相同的输入，排序算法产生的输出序列中，相等元素的相对顺序保持不变的性质",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "在图论中回路是指在一个图中从某一顶点出发，沿着边连续移动，经过若干个不同顶点后又回到起始顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "4",
    "tail_offset": "47"
  },
  {
    "sentence": "双向链表是一种链表数据结构，其中每个节点包含一个数据元素以及分别指向其前驱节点和后继节点的两个指针",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "归并排序的核心性质是将一个数组分成两个子数组分别进行排序，然后将排序好的子数组合并成一个有序的数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "比较排序是基于元素间比较来确定元素相对顺序的排序算法其核心特征是通过比较元素大小来逐步构建有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "简单排序是对数据序列通过比较和交换元素位置等基本操作，将其按特定顺序（如升序或降序）排列的排序方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "45"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "简单排序是对数据序列通过比较和交换元素位置等基本操作，将其按特定顺序（如升序或降序）排列的排序方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "45"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归排序，再把排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "树的高度",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "指针是一种变量，其值为内存中另一个变量或对象的地址，通过它可以间接访问和操作所指向的内存位置的数据",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "插入排序的核心性质是将未排序数据插入到已排序序列的合适位置，通过不断重复此操作，最终使整个数组有序",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "在树形数据结构中父节点是直接有一个或多个子节点连接在其下方的节点且处于比子节点更高层次的结构位置上",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "8",
    "tail_offset": "20"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "稳定性的定义的核心性质是对于已排好序的输入序列，排序算法在排序过程中不会改变相同元素之间的相对顺序",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线，它可以表示顶点之间的关系，并且在有向图中边具有方向而无向图中边无方向",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的方向",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归排序后，再将排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "完全二叉树是一种除最后一层外，每一层上的节点数均达到最大值，且最后一层上只缺少右边的若干节点的二叉树",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "47"
  },
  {
    "sentence": "指针是一种变量，其值为内存中另一个变量或对象的地址，通过该指针可以访问和操作其所指向的内存位置的数据",
    "head": "指针",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "41"
  },
  {
    "sentence": "二叉搜索树中任意节点的左子树中的所有节点的值均小于该节点的值且右子树中的所有节点的值均大于该节点的值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "递归基础是递归算法中最简单的情况，通常是问题的最小规模或最基本形式，直接给出答案而无需进一步递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得从链表中的任意节点出发都可以遍历整个链表形成一个环",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "队列是一种先进先出的数据结构，其核心性质为元素按照进入的先后顺序依次存储，先进入队列的元素先离开队列",
    "head": "队列",
    "tail": "队列",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "图是一种由顶点集合以及顶点之间的边集合所构成的数据结构，其中顶点是图的基本元素，边表示顶点之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "7",
    "tail_offset": "17"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "双向链表的核心性质是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而可以双向遍历链表",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "交换排序是一种通过比较元素并交换不满足顺序要求的元素位置来逐步将无序序列转变为有序序列的数据排序方法",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "46"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的每一个元素，在集合B中都有唯一的一个元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "无向图是一种图结构，由顶点集合和边集合组成，其中边是顶点的无序对，顶点之间通过边相连且不区分边的方向",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的初始情况，在此情况下递归函数直接返回一个已知结果而不再进行递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "算法效率是指算法执行所需要的计算机资源量，包括时间资源和空间资源，通常用时间复杂度和空间复杂度来衡量",
    "head": "时间复杂度",
    "tail": "空间复杂度",
    "head_offset": "36",
    "tail_offset": "42"
  },
  {
    "sentence": "数组是具有相同数据类型的一组数据元素的集合，这些元素在内存中按顺序存储，可通过下标唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是整个树的起始点，其他所有节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "图的核心特征是由顶点集合以及顶点之间的边集合所构成的数据结构，其中顶点表示事物，边表示事物之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "20"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "稳定性是指在数据结构中，若存在两个相等的元素，在排序前后它们的相对位置保持不变则该数据结构具有稳定性",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "二分查找是在有序数组中，通过不断将区间缩小一半的方式，查找目标元素是否存在并确定其位置的一种查找算法",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "41"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "二叉树是一种树形结构，它的每个节点最多有两个子节点，分别称为左子节点和右子节点，并且二叉树可以为空树",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "二叉搜索树中每个节点的左子树中的所有节点的值均小于该节点的值且右子树中的所有节点的值均大于该节点的值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的每一个元素，在集合B中都有唯一的一个元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "父节点是树结构中一个节点，有一个或多个子节点，且在从根节点到该节点的路径上，它是子节点的直接前驱节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "双向链表的核心性质是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而可以双向遍历链表",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "图的核心特征是由顶点集合以及顶点之间的边集合所构成的数据结构，其中顶点表示事物，边表示事物之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "20"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数据的逻辑结构的核心性质包括数据元素之间的逻辑关系，以及这些关系所决定的数据组织形式和操作方式等方面",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "14"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "无向图是一种由顶点集合以及顶点之间的边集合组成的图结构其中边是没有方向的顶点对表示顶点之间的连接关系",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二分查找是在有序数组中，通过不断将区间分成两半并比较中间元素与目标值，以确定目标值所在位置的查找算法",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "对于给定数据结构的排序算法，在原数据序列中相同元素的相对位置在排序前后保持不变则该排序算法具有稳定性",
    "head": "排序",
    "tail": "排序",
    "head_offset": "9",
    "tail_offset": "31"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点，具有与父节点的特定连接关系且可能有自己的子节点等相关特性",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉树是一种树型结构，它的每个节点最多有两个子节点，分别称为左子节点和右子节点，并且二叉树可以为空树",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "循环链表的核心特征是其尾节点的指针不是指向空，而是指向链表的头节点，从而使得整个链表形成一个环形结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的方向",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "操作效率的特点是指数据结构在执行各种操作（如插入、删除、查找等）时所表现出的时间和空间方面的性能特性",
    "head": "操作效率",
    "tail": "插入",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "操作效率是指在数据结构中进行各种操作（如插入、删除、查找等）时所花费的时间、空间等资源的综合表现情况",
    "head": "操作效率",
    "tail": "插入",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "简单排序是对数据序列进行排序的一种方式其核心性质是通过比较和交换元素位置将无序数据序列转换为有序序列",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在一端进行插入操作，而在另一端进行删除操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "数组的核心性质是其元素在内存中按顺序存储且具有相同的数据类型，通过下标可以方便地访问和修改其中的元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数据的物理结构的核心特征是数据元素在计算机中的存储方式以及数据元素之间的逻辑关系在计算机中的表示方式",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "13"
  },
  {
    "sentence": "无向图是由顶点集和边集组成的一种图结构，其中边集是顶点集的无序对集合，顶点之间通过边相连且边没有方向",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "根节点是树结构中的起始节点，没有父节点，是整个树结构的入口和基础，通过它可以遍历和访问树中的其他节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "在无向图中，若从顶点vi到顶点vj有路径（当然从vj到vi也一定有路径），则称vi和vj是连通的，若",
    "head": "无向图",
    "tail": "路径",
    "head_offset": "1",
    "tail_offset": "18"
  },
  {
    "sentence": "顺序表具有逻辑上相邻的元素在物理存储位置上也相邻、可随机访问、存储密度高、插入和删除操作效率低等特点",
    "head": "访问",
    "tail": "插入",
    "head_offset": "28",
    "tail_offset": "37"
  },
  {
    "sentence": "顺序表具有逻辑上相邻的元素在物理存储位置上也相邻、可随机访问、存储密度高但插入和删除操作效率低等特点",
    "head": "访问",
    "tail": "插入",
    "head_offset": "28",
    "tail_offset": "37"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树的高度的核心特征是从树的根节点到最远叶子节点之间最长简单路径上的边数或节点数所代表的垂直距离度量值",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "有向图是一种由顶点集合以及顶点间的有向边集合组成的图，其中有向边是有方向的，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "根节点是树结构中处于顶层没有父节点的唯一节点，它是树的起始点，从它开始向下延伸出树的各个分支和子节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "无向图是一种由顶点集合以及顶点之间的边集合组成的图结构，其中边是没有方向的，即顶点之间的连接是双向的",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "邻接矩阵是用于表示图的一种矩阵，其特点的核心特征包括：若图中有n个顶点，则邻接矩阵是一个n×n的方阵",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的方向",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "父节点具有在树形结构中处于上一级位置且拥有子节点的特点其核心性质为可通过它访问到其下一级的子节点集合",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树的遍历是按照某种特定规则依次访问二叉树中的每一个节点使得每个节点被访问且仅被访问一次的操作过程",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "数组是一种有序数据元素的集合，每个元素具有相同的数据类型，可通过数组名和下标来唯一标识和访问这些元素",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，顺序依次检查线性表中的每个元素，直到找到目标元素或遍历完整个线性表为止",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "顺序查找的核心特征是从数据序列的起始位置开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "41"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的方向",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉树的核心性质为在二叉树的第i层上至多有2的i-1次方个节点（i≥1），深度为k的二叉树至多有2的",
    "head": "二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "在图论中，回路是指在一个图中从某一顶点出发，沿着边连续移动，经过若干个不同顶点后又回到起始顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "5",
    "tail_offset": "48"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的每一个元素，在集合B中都有唯一的一个元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中各节点度的最大值即为树的度树中每个节点的度都小于或等于树的度且树中至少存在一个节点其度等于树的度",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "12",
    "tail_offset": "29"
  },
  {
    "sentence": "数据的物理结构是数据元素在计算机存储空间中的存储方式包括数据元素的存储位置以及数据元素之间关系的表示",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "父节点是树状结构中位于某一节点之上，拥有子节点，且对于其所有子节点而言具有层级上的直接管辖关系的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "图的边是连接图中两个顶点的元素，具有方向或无方向、有权重或无权重等特点，边的集合决定了图的结构和性质",
    "head": "图的边",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "38"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "图的核心特征是由顶点集合以及顶点之间的边集合所构成的数据结构，其中顶点表示事物，边表示事物之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "20"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "平衡二叉树的核心性质是树上任一节点的左子树和右子树的高度差不超过1且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "在无向图中，若从顶点vi到顶点vj有路径（当然从vj到vi也一定有路径），则称vi和vj是连通的，若",
    "head": "无向图",
    "tail": "路径",
    "head_offset": "1",
    "tail_offset": "18"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "双向链表的核心特征是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而可以双向遍历链表",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "算法效率是指算法执行所需要的计算机资源量，包括时间资源和空间资源，通常用时间复杂度和空间复杂度来衡量",
    "head": "时间复杂度",
    "tail": "空间复杂度",
    "head_offset": "36",
    "tail_offset": "42"
  },
  {
    "sentence": "双向链表每个节点包含数据、指向前驱节点的指针和指向后继节点的指针，通过这些指针可在两个方向上遍历链表",
    "head": "双向链表",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "树是一种非线性的数据结构，它有一个根节点，且每个节点有零个或多个子节点，节点之间存在一对多的层次关系",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "17",
    "tail_offset": "32"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "树是一种递归定义的数据结构它由一个根节点和零个或多个子树构成每个子树又由根节点和其各自的子树递归组成",
    "head": "递归",
    "tail": "根节点",
    "head_offset": "4",
    "tail_offset": "17"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "简单排序是对数据序列进行排序的一种基本方法，它通过比较和交换元素的位置，将无序序列逐步转换为有序序列",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "简单排序是对数据元素序列通过比较相邻元素大小并进行交换等操作，逐步将无序序列转变为有序序列的排序方法",
    "head": "简单排序",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图的顶点是图结构中的基本数据元素，它可以表示各种实体，并且与其他顶点通过边相互连接以构成图的整体结构",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "存储结构是指数据元素及其关系在计算机存储器中的表示，包括顺序存储、链式存储、索引存储和散列存储等方式",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "插入排序是将未排序数据插入到已排序序列的合适位置，通过不断重复此操作来实现整个数组有序的一种排序算法",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，其方向由一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "线性查找是在一个数据序列中从起始位置开始依次逐个检查元素，直至找到目标元素或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "38"
  },
  {
    "sentence": "简单排序是对数据序列进行比较和交换等操作以使其按特定顺序排列，具有操作相对简单、时间复杂度较高等特点",
    "head": "简单排序",
    "tail": "时间复杂度",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "递归基础是递归算法中存在的某些初始情况或条件，在这些情况下递归直接返回一个已知结果而不再进行递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，其特点是序列中顶点依次相邻且路径长度为路径上顶点数减 1",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "子节点是树结构中相对于父节点而言的节点，其核心特征包括：它直接隶属于某个父节点，是父节点分支出来的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "非线性结构是一种数据元素之间存在一对多或多对多关系的数据结构，其数据元素的逻辑关系不再是简单的线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历的核心性质包括先序遍历是根节点、左子树、右子树的顺序，中序遍历是左子树、根节点、右子树的顺序",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它是一个完全二叉树，并且满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆）",
    "head": "完全二叉树",
    "tail": "父节点",
    "head_offset": "16",
    "tail_offset": "26"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树结构中直接位于某一节点下方的节点，与父节点存在直接的层级关系且是父节点所连接的下一层级的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "回路是在图中从一个顶点出发，沿边经过一些顶点后又回到该起始顶点的路径且路径中除起始顶点外其他顶点不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径相连，在有向图中任意一对顶点间都存在有向路径相互可达的图",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础是递归定义中满足特定条件的初始情况其核心性质是具有明确的、无需进一步递归即可确定的定义值或状态",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "子节点是树结构或图结构中，直接连接在某一节点之下的节点，具有与父节点存在特定连接关系且处于其下层的特点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "线性查找是从数据序列的第一个元素开始依次逐个与目标值进行比较，直到找到目标值或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "39"
  },
  {
    "sentence": "线性查找的核心性质是从数据序列的起始位置开始，依次对每个元素进行比较，直到找到目标元素或遍历完整个序列",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "44"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图的顶点是图结构中的基本数据元素，它可以用来表示各种实体或对象，并且通过边与其他顶点相连以构成图的结构",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉树的核心性质是在二叉树的第i层上至多有2的i-1次方个节点，深度为k的二叉树至多有2的k次方减1个",
    "head": "二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一结点的左子树和右子树的高度差不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边组成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向连接",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "数据类型的完整定义是对数据的取值范围、数据元素之间的逻辑关系以及在这些数据上所允许进行的操作的明确规定",
    "head": "数据类型",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向连接",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1，并且左右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树其每一层上的节点数都达到最大值即第i层有2^(i-1",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "对于给定的某个排序算法，若存在两个相等的元素，在排序前后它们的相对位置保持不变，则该排序算法具有稳定性",
    "head": "排序",
    "tail": "排序",
    "head_offset": "7",
    "tail_offset": "24"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "迭代法是一种通过从一个初始估计值出发，按照一定的迭代公式不断重复计算，逐步逼近问题精确解的数值计算方法",
    "head": "迭代法",
    "tail": "迭代",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，若按层次序对其编号后，编号为i（1≤i≤n）的结点与满二叉",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "指针是一种变量，其值为内存中另一个变量或对象的地址，通过指针可以间接访问和操作其所指向的内存位置的数据",
    "head": "指针",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树的查找的核心特征是从根节点开始，根据节点间的父子关系，按照特定规则在树的节点中进行搜索以找到目标节点",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "算法效率是指算法执行所需要的计算资源量，通常用时间复杂度和空间复杂度来衡量算法在时间和空间上的效率表现",
    "head": "时间复杂度",
    "tail": "空间复杂度",
    "head_offset": "23",
    "tail_offset": "29"
  },
  {
    "sentence": "图的边是连接图中顶点的线，具有两个端点且方向可分为有向边和无向边，边可有权重，边的集合决定了图的连通性",
    "head": "图的边",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "41"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序好的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "满二叉树是深度为k且有2的k次方减1个节点的二叉树其中每一层上的节点数都达到最大值即第i层上有2的i减",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "线性查找是在一个数据序列中从第一个元素开始依次逐个检查，直到找到目标元素或遍历完整个序列为止的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "37"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点包括：对于有向图，邻接矩阵中第i行第j列的元素值若为1表示从顶点i到",
    "head": "邻接矩阵",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "子节点是树结构中直接位于某一节点下方的节点，具有与父节点存在直接层次关系且处于父节点下一层级的核心性质",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "二叉树的核心性质是在二叉树的第i层上至多有2的i-1次方个节点，深度为k的二叉树至多有2的k次方减1个",
    "head": "二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数组的核心性质是具有相同数据类型的一组数据元素，在内存中按顺序存储，通过下标来唯一标识和访问其中的元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边经过若干个顶点后又回到该顶点的路径且路径中除起点和终点外顶点不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "队列的特点是先进先出，即先进入队列的元素先出队列，新元素总是添加在队列末尾，删除操作总是在队列头部进行",
    "head": "队列",
    "tail": "队列",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归进行排序后再将排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "堆是一种优先队列数据结构，它通常用数组实现，满足堆特性：对于最大堆，每个节点的值大于或等于其子节点的值",
    "head": "队列",
    "tail": "数组",
    "head_offset": "6",
    "tail_offset": "17"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径，即从图中任意一个顶点出发，都能够通过一系列边到达图中的其他任意顶点",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "插入排序的核心特征是将未排序数据插入到已排序序列的合适位置，通过不断重复此操作，逐步将整个数组变为有序",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数组是一种有序数据集合，其中每个元素具有相同的数据类型，通过下标来访问和修改元素，且内存中存储是连续的",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "二叉树的核心性质是在二叉树的第i层上至多有2的i-1次方个节点，深度为k的二叉树至多有2的k次方减1个",
    "head": "二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机，仅考虑数据元素间的抽象关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "双向链表是一种链表结构，每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针，从而支持双向遍历",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "双向链表每个节点包含数据、指向前驱节点的指针和指向后继节点的指针，通过前驱指针和后继指针可双向遍历链表",
    "head": "双向链表",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度之差不超过1并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1，并且左右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "数组是一种由相同类型的数据元素组成的线性数据结构，这些元素在内存中按顺序存储且通过下标来唯一标识和访问",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其特点为：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1)",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "迭代法是一种通过从一个初始估计值开始，按照一定的迭代公式不断重复计算，逐步逼近问题精确解的数值计算方法",
    "head": "迭代法",
    "tail": "迭代",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，除第k层外，其余各层的结点数都达到最大个数，且第k层的结点都",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "迭代法是一种通过从一个初始估计值出发，按照一定的迭代公式不断重复计算，逐步逼近问题精确解的数值计算方法",
    "head": "迭代法",
    "tail": "迭代",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "数据的物理结构是指数据在计算机存储空间中的存储方式包括数据元素的存储方式以及数据元素之间关系的存储方式",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "27"
  },
  {
    "sentence": "二叉树的核心性质是在二叉树的第i层上至多有2的i-1次方个节点，深度为k的二叉树至多有2的k次方减1个",
    "head": "二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条边都有一个特定的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向连接",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点且路径中除起始顶点外其他顶点不重复的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "树的度的核心特征是树中所有结点的度的最大值，它反映了树中各结点拥有子树数量的最大情况决定了树的复杂程度",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "图的边是连接图中两个顶点的元素，具有方向（有向图的边有方向，无向图的边无方向）、权重（可有权重表示边的",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边连续移动，最终回到该顶点且路径中除起点和终点外其他顶点不重复的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "比较排序是一种排序算法，其核心特征是通过比较元素之间的大小关系来确定元素在排序序列中的位置从而实现排序",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一结点的左子树和右子树的深度之差不超过1并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "堆是一种优先队列数据结构，它满足父节点的值大于或等于（最大堆）或小于或等于（最小堆）其子节点的值的特性",
    "head": "队列",
    "tail": "父节点",
    "head_offset": "6",
    "tail_offset": "16"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度差不超过1并且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一的一个元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机，反映数据元素之间的结构关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "稳定性的特点的核心特征是在对数据结构进行某种操作（如排序等）时，相等的元素在操作前后的相对位置保持不变",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "无向图是由顶点集和边集组成的一种图结构其中边集是顶点集的无序对集合且任意一条边连接两个顶点没有方向之分",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线或弧，它表示顶点之间的某种关系，在有向图中边具有方向性而无向图中边无方向性",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度之差不超过1并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的最基本情况，在此情况下递归函数不再调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "比较排序是一种排序算法，它通过比较元素之间的大小关系来确定元素的相对位置，从而将无序序列转换为有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序好的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "双向链表的核心特征是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针，从而可以双向遍历链表",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "图的顶点是图结构中用于表示数据元素的基本单元，它具有特定的标识且可能与其他顶点通过边相连以构成图的结构",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆）且具有完全二叉树的特性",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "43"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点且路径中除起始顶点外其他顶点不重复的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "根节点是树结构中的起始节点，没有父节点，具有唯一标识整棵树的作用，树中其他节点都直接或间接连接到根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "简单排序是对数据序列进行排序的一种方式，其核心性质是通过比较和交换元素位置逐步将无序序列转化为有序序列",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数据类型是一组值的集合以及定义在这组值上的一组操作的总称，具有特定的取值范围、存储方式和操作规则等特点",
    "head": "数据类型",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归进行排序后再将排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一节点的左子树和右子树的高度差不超过1并且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值用于表示与边相关的某种代价、距离、容量等属性",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组的核心性质是其元素在内存中按顺序存储且具有相同的数据类型，通过下标可以唯一地访问和修改数组中的元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "简单排序是对数据序列通过比较元素大小并进行交换等操作，将其按特定顺序（如升序或降序）排列的一种排序方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "47"
  },
  {
    "sentence": "迭代法是一种通过从一个初始估计值出发，按照一定的迭代公式不断重复计算，逐步逼近问题精确解的数值计算方法",
    "head": "迭代法",
    "tail": "迭代",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础具有明确的终止条件，是递归算法中最简单、最基本的情况，不依赖于进一步的递归调用即可直接得出结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "指针是一种变量，其值为内存中另一个变量或对象的存储地址，通过它可以间接访问和操作所指向的内存位置的数据",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "树的节点是树结构中的基本数据单元包含数据元素及指向其子节点的若干分支且根节点没有父节点叶节点没有子节点",
    "head": "树的节点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的二叉树，除第k层外，其余各层的节点数都达到最大个数，且第k层的节点都集中在该层最",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "非线性结构是一种数据元素之间存在着一对多或多对多的联系，无法用一条连续的直线来表示其逻辑关系的数据结构",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一结点的左子树和右子树的高度之差不超过1并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数组的核心性质是其元素在内存中按顺序存储且具有相同的数据类型，通过下标可以直接访问和修改特定位置的元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "邻接矩阵的核心性质是若图中有一条从顶点i到顶点j的边，则邻接矩阵中第i行第j列元素值为1，否则为0，且",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一的一个元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一结点的左子树和右子树的高度之差不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "非线性结构是一种数据元素之间存在着一对多或多对多关系的数据结构，其数据元素的逻辑关系不再是简单的线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "插入排序的特点的核心性质是将未排序数据插入到已排序序列的合适位置，通过不断重复此操作，最终使整个数组有序",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "迭代法是一种不断用变量的旧值递推新值，通过重复执行某一运算过程，从初始值出发逐步逼近问题解的数值计算方法",
    "head": "迭代法",
    "tail": "递推",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "栈是一种限定仅在表尾进行插入和删除操作的线性表，表尾称为栈顶，表头称为栈底，不含任何数据元素的栈称为空栈",
    "head": "表尾",
    "tail": "插入",
    "head_offset": "8",
    "tail_offset": "12"
  },
  {
    "sentence": "在树形数据结构中若存在节点A和节点B，当节点B直接连接于节点A且节点A为父节点时节点B就是节点A的子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "36",
    "tail_offset": "49"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "队列是一种特殊的线性表，其核心性质是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "顺序查找的核心特征是从数据序列的起始位置开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "43"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层有2^(",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "堆的核心特征是父节点的值大于或等于（大顶堆）其子节点的值，或者父节点的值小于或等于（小顶堆）其子节点的值",
    "head": "父节点",
    "tail": "父节点",
    "head_offset": "7",
    "tail_offset": "31"
  },
  {
    "sentence": "图的顶点是图结构中用于表示数据元素的基本单元，是构成图的重要组成部分且在图的各种操作和关系中具有关键作用",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "算法效率是指算法执行所需要的计算机资源量，包括时间资源和空间资源，通常分别用时间复杂度和空间复杂度来衡量",
    "head": "时间复杂度",
    "tail": "空间复杂度",
    "head_offset": "38",
    "tail_offset": "44"
  },
  {
    "sentence": "递归基础是递归算法中存在的一种情况，即当问题规模减小到某一特定值时，可直接得出问题的解而无需再次递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "非线性结构中至少存在一个数据元素有两个或两个以上直接前驱或直接后继即各数据元素之间的逻辑关系不再是线性的",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树的查找特点是基于树的结构特性通过特定的遍历或比较方式在树中定位特定元素以确定其是否存在或获取其相关信息",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "20"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点所经过的最长路径上的节点数，它反映了树的层次结构特性及节点分布的纵向跨度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图的顶点是图结构中的基本数据元素，它可以代表各种实体或对象，并且与其他顶点通过边相互连接从而构成图的结构",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左右子树高度差的绝对值不超过1，并且左右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，若按层次序编号后其所有结点均与深度为k的满二叉树中编号从1至n",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在表的一端进行插入操作，而在另一端进行删除操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "邻接矩阵是用于表示图的一种矩阵，其中若图中存在从顶点i到顶点j的边，则邻接矩阵中第i行第j列的元素值为1",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中存储与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "平衡二叉树或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树",
    "head": "平衡二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "完全二叉树是这样一种二叉树，除最后一层外，每一层上的节点数均达到最大值，且最后一层上只缺少右边的若干节点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机，仅考虑数据元素之间的逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "映射是一种具有特定对应关系的数据结构特点，它使得集合A中的每一个元素在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "队列是一种特殊的线性表，其核心性质是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点且处于树的顶层位置并在整个树结构中具有关键地位",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "双向链表每个节点包含数据、指向前一个节点的指针和指向后一个节点的指针，节点间通过指针双向连接，可双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "图的核心特征是由顶点集合以及顶点之间的边集合所构成的数据结构，顶点用于表示事物，边用于表示事物之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "20"
  },
  {
    "sentence": "树的节点是包含数据以及指向子节点的指针（对于有子节点的情况）或为空指针（对于叶子节点）的基本数据结构单元",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对于树中的任一结点，若其编号为i（1≤i≤n），则其左孩子结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "顺序表具有逻辑上相邻的元素在物理存储位置上也相邻、可随机访问元素、存储密度高但插入和删除操作效率低等特点",
    "head": "访问",
    "tail": "插入",
    "head_offset": "28",
    "tail_offset": "39"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "递归基础的核心性质是存在某些初始情况或边界条件，在这些情况下递归函数可以直接给出结果而无需进一步递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "48"
  },
  {
    "sentence": "完全二叉树是深度为k的二叉树，除第k层外，其余各层的节点数都达到最大值，且第k层的节点都集中在该层最左边",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得从链表中的任何一个节点开始都可以遍历整个链表形成一个环",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "完全二叉树是若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左右子树高度差的绝对值不超过1，并且左右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若图为有向图则路径有方向，且在无向图中路径上边无方向而在有向",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一结点的左子树和右子树的高度之差不超过1并且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "根节点是树结构中的起始节点，它没有父节点且是树中其他节点的祖先节点，树中所有节点都直接或间接与根节点相连",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "平衡二叉树的核心特征是每个节点的左子树和右子树的高度差的绝对值不超过1并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得从链表中的任何一个节点出发都可以遍历整个链表形成一个环",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点间的关系通过边来表示，图分为有向图和无向图，有向图的边有方向，无",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆），且具有完全二叉树的特性",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "44"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若图为有向图则路径有方向，该序列中相邻顶点之间存在图的边或弧",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "树的节点是包含数据元素及若干指向子树的分支的基本结构且具有唯一的父节点（根节点除外）以及零个或多个子节点",
    "head": "树的节点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "满二叉树的核心特征是除最后一层无任何子节点外，每一层上的所有节点都有两个子节点，并且叶子节点都在最后一层",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "43"
  },
  {
    "sentence": "在树形数据结构中，若存在节点A，对于节点B，若有从B到A的有向路径且B直接连接到A，那么A就是B的父节点",
    "head": "路径",
    "tail": "父节点",
    "head_offset": "31",
    "tail_offset": "49"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其核心特征为：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "图的核心特征是由顶点集合以及顶点之间的边集合所构成的数据结构，顶点用于表示事物，边用于表示事物之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "20"
  },
  {
    "sentence": "二叉树遍历分为前序遍历、中序遍历和后序遍历，前序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "有向图是一种图结构，由顶点集合和有向边集合组成，其中每条有向边是从一个顶点指向另一个顶点，具有明确的方向",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将关键字与线性表中的元素进行比较，直到找到匹配的元素或到达线性表的末尾",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "完全二叉树是若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径相通，则该无向图为连通图，对于有向图，若其基图为连通图",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间逻辑关系的整体，它描述数据元素之间的关联方式而不考虑其在计算机中的存储表示",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层的节点数都达到最大值，即第i层有2^(i-",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "平衡二叉树的核心特征是树上任一节点的左子树和右子树的高度差不超过1，并且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，描述了数据元素之间的关联方式和组织形式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "在树形数据结构中父节点是其下有子节点分支的节点且与子节点存在直接的层次关系即子节点是从该父节点衍生出来的",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "8",
    "tail_offset": "15"
  },
  {
    "sentence": "平衡二叉树或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树",
    "head": "平衡二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "二叉树的每个节点最多有两棵子树，并且二叉树具有递归性，即它可以由根节点、左子树和右子树构成，左子树和右子",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对于树中的每个结点，如果其结点编号i满足1≤i≤n，若i≤⌊n",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "穷举法通过对问题所有可能的情况逐一进行检验，从而找出符合条件的解，其核心性质是遍历所有可能情况以获取结果",
    "head": "穷举法",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值的特性，且根节点的值是堆中的最大值或最小值",
    "head": "父节点",
    "tail": "根节点",
    "head_offset": "15",
    "tail_offset": "36"
  },
  {
    "sentence": "非线性结构中至少存在一个数据元素有两个或两个以上的前驱或后继，其数据元素之间的关系不再是一对一的线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层的节点数都达到了该层所能容纳的最大值，即第i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆），且具有完全二叉树的形态",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "44"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "有向图是一种由顶点集合以及顶点间的有向边集合组成的图结构，其中有向边是有方向的，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "无向图是一种由顶点集合以及顶点之间的边集合所组成的数据结构，其中边是没有方向的，即顶点之间的连接是双向的",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "非线性结构是一种在数据元素之间存在一对多或多对多关系的数据结构，其元素的逻辑关系不再是简单的线性顺序关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "简单排序是对数据序列通过比较元素大小并逐步交换位置等方式将其按特定顺序（如升序或降序）排列的一种排序方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "48"
  },
  {
    "sentence": "顺序表是一种线性表，其核心性质为逻辑上相邻的元素在物理存储位置上也相邻，并且可以通过数组下标直接访问元素",
    "head": "线性表",
    "tail": "数组",
    "head_offset": "6",
    "tail_offset": "42"
  },
  {
    "sentence": "完全二叉树是深度为k的二叉树，除第k层外，其余各层的节点数都达到最大值，且第k层的节点都集中在该层最左边",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "队列是一种特殊的线性表，其核心特征是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "平衡二叉树或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树",
    "head": "平衡二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "二叉树的核心特征是每个节点最多有两个子节点，即度最大为2，并且二叉树具有递归结构，其左右子树也均为二叉树",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "循环链表是一种特殊的链表，其尾节点的指针指向头节点，使得链表形成一个环，从而可以循环遍历链表中的所有节点",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值即2^(i-1)（",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "指针具有指向变量存储地址、可通过解引用访问所指对象、能灵活进行地址运算以在内存中高效定位和操作数据等特点",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "二叉树的遍历分为前序遍历中序遍历和后序遍历，前序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "数据的逻辑结构的特点的核心性质包括数据元素之间存在特定的逻辑关系且这些关系决定了数据的组织形式和操作方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "17"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的初始情况其特点在于该初始情况能够直接给出问题的解而无需再次调用递归函数",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边组成的图，其中每条有向边都具有特定的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "指针是一种变量，其值为内存中另一个变量或对象的地址，通过该指针可以间接访问和操作其所指向的内存位置的数据",
    "head": "指针",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "二分查找是一种在有序数组中通过不断将区间缩小一半来查找特定元素，具有时间复杂度为对数级从而高效查找的特点",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树的特点的核心性质为：一棵深度为k且有2^k-1个结点的二叉树为满二叉树，其每一层上的结点数都达到",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "路径是图中顶点之间的边的序列，具有从起始顶点开始经一系列边可到达终止顶点的特点且路径长度为路径上边的数目",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径，则该无向图为连通图，在有向图中，若对于每一对顶点u和",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是深度为k的二叉树，除第k层外，其余各层的节点数都达到最大值，且第k层的节点都集中在该层最左边",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可表示诸如距离、成本、容量等某种度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "堆的核心性质是父节点的值大于或等于（大顶堆）其子节点的值，或者父节点的值小于或等于（小顶堆）其子节点的值",
    "head": "父节点",
    "tail": "父节点",
    "head_offset": "7",
    "tail_offset": "31"
  },
  {
    "sentence": "数据的物理结构是指数据在计算机存储空间中的存储形式，包括数据元素的存储方式以及数据元素之间关系的存储方式",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "28"
  },
  {
    "sentence": "数据的物理结构是数据元素在计算机存储空间中的存储方式，包括数据元素的存储位置以及数据元素之间的关系的表示",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "8"
  },
  {
    "sentence": "双向链表每个节点除了有指向下一节点的指针外还有指向前一节点的指针从而形成双向链接结构具有可双向遍历等特点",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，且顶点集不能为空，有向边集可以为空",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，有且仅有一个根节点，除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "归并排序是将一个无序数组不断地分成两个子数组分别递归排序，再把排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序查找是从数据序列的起始位置开始，依次逐个检查数据元素，直至找到目标元素或遍历完整个序列为止的查找方法",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，每条有向边从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "43"
  },
  {
    "sentence": "邻接矩阵的核心性质是若图中有从顶点i到顶点j的边则邻接矩阵中第i行第j列元素值为1否则为0且主对角线元素",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "完全二叉树是深度为k的二叉树，除第k层外，其余各层的节点数都达到最大个数，第k层的节点都集中在该层最左边",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都具有特定的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "满二叉树的核心性质是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层有",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "树的度是指一棵树中，最大的节点度，即节点拥有子树的数目，树中各节点度的最大值就是树的度，这是树的度的核心",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "43"
  },
  {
    "sentence": "回路是在图中从一个顶点出发，沿着边经过若干个顶点后又回到该起始顶点的路径且路径中顶点不重复（除起始顶点）",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "子节点是树结构中直接位于某一节点下方的节点，它与父节点存在直接的层级关系，是父节点所衍生出来的下一级节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "无向图是一种图结构，其中边是没有方向的，即如果存在一条连接顶点u和顶点v的边，那么从u到v和从v到u是同",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，并重复此步骤直到整个数组都被排序好的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "数组是一种有序数据集合，其中每个元素具有相同的数据类型，通过一个统一的数组名和下标来唯一标识和访问这些元素",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "排序",
    "tail": "数据元素",
    "head_offset": "5",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径相连，在有向图中任意一对顶点之间都存在有向路径可相互到达的图",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "邻接表的核心特征是用链表来表示图中顶点的邻接关系，每个顶点对应一个链表，链表中存储与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "满二叉树的核心特征是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "在树形结构中一个节点若存在直接的前驱节点且该前驱节点可引出包括此节点在内的子树则此前驱节点为此节点的父节点",
    "head": "前驱节点",
    "tail": "前驱节点",
    "head_offset": "16",
    "tail_offset": "22"
  },
  {
    "sentence": "树是一种非线性的数据结构，它有一个根节点，其余节点分为若干互不相交的子树，每个子树也是一棵树且具有递归性质",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "17",
    "tail_offset": "34"
  },
  {
    "sentence": "图的边的核心特征是连接图中的两个顶点，它描述了顶点之间的关系，通过边可以在图中建立起顶点之间的路径和连通性",
    "head": "图的边",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "47"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "比较排序是一种排序算法，其核心特征是通过元素之间的比较来确定元素的相对顺序，从而将待排序序列转换为有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "有向图是一种图结构，其中边具有方向，即从一个顶点指向另一个顶点，这是有向图区别于无向图的核心特征，在有向图",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构，顶点集合中的元素是图的顶点，关系集合中的元素是顶点之间的边",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "有向图的核心性质是其边具有方向性，即从一个顶点指向另一个顶点，这种方向性决定了图中顶点之间的关系和路径走向",
    "head": "有向图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "49"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "深度为k有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应时为完全",
    "head": "二叉树",
    "tail": "满二叉树",
    "head_offset": "10",
    "tail_offset": "31"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆），并且具有完全二叉树的结构",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "45"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构包括一个根节点以及左子树和右子树并且左子树和右子树也都是二叉树",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆），并且具有完全二叉树的形态",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "45"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "平衡二叉树的核心特征是其每个节点的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "树的高度",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "二叉树的核心特征是每个节点最多有两个子节点，即度最大为2，并且二叉树具有递归的结构，其左右子树也均为二叉树",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大节点数",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "完全二叉树是这样一种二叉树，若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，且有一个特定的根节点，除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于每一对顶点u和v，都存在一条从u到v和从",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序表具有逻辑上相邻的元素在物理存储位置上也相邻、可以随机访问元素、存储密度高但插入和删除操作效率低等特点",
    "head": "访问",
    "tail": "插入",
    "head_offset": "29",
    "tail_offset": "40"
  },
  {
    "sentence": "子节点是树结构中与父节点直接相连且处于较低层次的节点，具有从属于父节点的关系且在树的层级结构中有其特定位置",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边经过若干个顶点后又回到该顶点的路径且路径中除起点和终点外其他顶点不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "完全二叉树是这样一种二叉树，若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "非线性结构是一种数据元素之间存在一对多或多对多关系的数据结构，其数据元素的逻辑关系不再是简单的线性顺序关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（若图是有向图则是有向顶点序列，若为无向图则可视为双向顶点序列）",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可以表示诸如距离、成本、时间等某种度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "满二叉树是深度为k且有2的k次方减1个节点的二叉树其中每一层上的节点数都达到最大值即该层节点数等于2的（该",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "完全二叉树是若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，且有且仅有一个根节点，除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点路径上的边数或节点数，其特点是在有根树中反映了树的层次结构和规模大小等情况",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径相通，则该无向图为连通图，在有向图中，若对于每一对顶点u",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "邻接矩阵的核心性质是若图中有从顶点i到顶点j的边则邻接矩阵中第i行第j列元素为1否则为0且主对角线元素表示",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成，其中有向边是顶点的有序对，其方向具有特定意义，不同于无向图中边的无方向性，",
    "head": "有向图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树的核心特征是：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "树是一种非线性的数据结构，有且仅有一个根节点，每个节点有零个或多个子节点，且任意两个节点间有唯一的一条路径",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "19",
    "tail_offset": "33"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边经过若干顶点后又回到该起始顶点的路径且路径中顶点不重复（除起始顶点外）",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "递归基础的核心特征是存在一种简单情况或终止条件，在此情况下递归函数直接返回一个确定的结果而不再进行递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "49"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，不断重复此操作直到整个数组都被排序好的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "41"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于每一对顶点u和v，都存在从u到v以及从v",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "集合是由确定的、互不相同的对象所组成的整体这些对象具有明确的确定性、互异性且组成集合的对象之间没有顺序要求",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树中节点层次结构的深度以及树的结构复杂程度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树的节点的核心性质包括每个节点有零个或多个子节点、有且仅有一个根节点、除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即对于深度为i的层，",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "平衡二叉树或者是一棵空树，或者是具有下列性质的二叉排序树：它的左子树和右子树都是平衡二叉树，且左子树和右子",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "图的顶点是图结构中的基本元素，是构成图的节点，用于表示图中的对象或实体，在有向图中顶点有入度和出度，在无向",
    "head": "图的顶点",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值即该层节点数为2^(",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "归并排序是将一个无序数组分成两个子数组分别递归进行排序后再将排序好的子数组合并成一个有序数组的一种排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "映射是一种具有特定对应关系的数据结构特点，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "递归基础是递归算法中最简单的情况，通常是递归函数的终止条件，其核心特征是不需要再次调用自身就能直接得到结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "双向链表是一种链表结构，每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针，从而可以双向遍历链表",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径相通，则该无向图为连通图，在有向图中，若对于每一对顶点u",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "穷举法是一种通过对问题所有可能情况逐一进行检验，从而找出符合条件的解的方法其特点在于遍历所有可能情况来求解",
    "head": "穷举法",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "二叉树遍历分为前序遍历中序遍历和后序遍历，前序遍历是根左右，中序遍历是左根右，后序遍历是左右根，每种遍历都",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "存储结构的核心性质是数据元素及其关系在计算机存储器中的表示方式以及这种表示对数据操作和访问效率等方面的影响",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树的核心特征是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向连接",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断将区间分成两半并根据目标值与中间元素的比较结果来确定目标值所在位置的查找算法",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "父节点是在树形结构中，直接有一个或多个子节点连接于其下的节点，且在树的层级关系中处于比子节点更高一级的位置",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "二叉树的特点是每个节点最多有两棵子树，并且子树有左右之分，其定义涵盖了节点间的层次关系、遍历顺序等相关特性",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "存储结构的核心性质是数据元素及其关系在计算机存储器中的表示方式以及如何利用这种表示进行高效的存储和访问操作",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径，则该无向图为连通图，在有向图中，若对于每一对顶点vi和",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树的节点的核心性质包括每个节点有零个或多个子节点、有且仅有一个根节点、除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "平衡二叉树的核心特征是其每个节点的左子树和右子树的高度差的绝对值不超过1并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数组是一种有序数据集合，其中每个元素具有相同的数据类型，通过一个统一的数组名和下标来唯一标识和访问这些元素",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "在图论中，回路是指一条起始顶点与终止顶点相同的路径，且路径中除起始顶点与终止顶点可相同外，其余顶点均不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "5",
    "tail_offset": "23"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "操作效率是指在数据结构中执行特定操作（如插入、删除、查找等）所花费的时间或资源的多少来衡量该操作的效率情况",
    "head": "操作效率",
    "tail": "插入",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的第一个元素开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "44"
  },
  {
    "sentence": "平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度之差不超过1，并且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可以表示诸如距离、成本、容量等某种度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性查找的核心特征是从数据序列的第一个元素开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "44"
  },
  {
    "sentence": "完全二叉树的核心特征是：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "堆是一种特殊的完全二叉树，对于每个非叶子节点，其值都大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值",
    "head": "完全二叉树",
    "tail": "叶子节点",
    "head_offset": "7",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，其插入操作称为进栈，删除操作称为出栈，遵循后进先出的原则",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "完全二叉树的特点的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "顺序查找的核心特征是从数据序列的第一个元素开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "44"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "比较排序是基于元素之间的比较来确定元素顺序从而进行排序的算法其核心性质是通过比较元素大小来逐步构建有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，即如果存在一条连接顶点u和顶点v的边，那么从u到v和从v到u是同一条边",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于每一对顶点u和v，都存在从u到v以及从v",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于每一对顶点u和v，都存在一条从u到v和从",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径相通，或者在有向图中，对于每一对顶点u和v，都存在从u到",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树的层次结构深度以及节点分布的最大层级跨度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是一种有序数据集合，其中每个元素具有相同的数据类型，通过一个统一的数组名和下标来唯一标识和访问各个元素",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "路径是图中顶点与顶点之间的边所构成的序列，且具有有向路径与无向路径之分，有向路径的边有方向而无向路径的边无",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图，路径是有向顶点序列，序列中相邻顶点之间存在边或弧）",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树的特点的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得链表形成一个环，从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点集合不能为空，顶点间的关系集合可以为空，顶点间的关系是一种二元关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值即该层的节点数为2",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，叶子节点都在最底层，且",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向连接",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者满足若其左子树非空则左子树上所有节点的值均小于根节点的值、若其右子树非空则右子树上",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到最大值，即第i层有2^(i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值即2^(i-1)（",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "父节点是在树形结构中，其直接有一个或多个子节点与之相连，处于比子节点更高层次且具有一定层次关系和关联的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值即该层节点数为2^(",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，且有一个特定的根节点，除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "有向图是一种图结构，由顶点集合和有向边集合组成，其中有向边是顶点的有序对，其方向是从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "堆是一种特殊的完全二叉树，对于每个非叶子节点，其值都大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值",
    "head": "完全二叉树",
    "tail": "叶子节点",
    "head_offset": "7",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树的核心特征是：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点间的关系通过边来表示，图可以分为有向图和无向图，有向图的边有方向，",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历的定义的核心性质是先访问根节点再递归地访问左子树和右子树（前序遍历），或先递归地访问左子树再访问",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "数组是一种有序数据集合，其元素具有相同的数据类型，通过下标来唯一标识和访问，并且在内存中占用连续的存储空间",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表",
    "head": "链表",
    "tail": "存储结构",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点的路径且路径中除起始顶点外其他顶点不重复经过",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是先进先出，即先进入队列的元素先出队列，它有队头和队尾，在队尾进行插入操作，",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线其具有方向性或无方向性且在有向图中边有明确的起始顶点和终止顶点在无向图中边所连接",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断将区间分成两部分并依据目标值与中间元素的比较结果来确定目标值所在位置的查找算法",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "堆排序是一种基于堆数据结构的排序算法，它将待排序数据构建成一个堆，通过不断取出堆顶元素并调整堆结构来实现排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于任意两个顶点u和v，既存在从u到v的路径也",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中存储与该顶点相邻接的其他顶点信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "非线性结构中至少存在一个数据元素有两个或两个以上的前驱或后继且各数据元素之间的逻辑关系不能用线性序列简单描述",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "队列是一种特殊的线性表，其核心性质是只允许在表的一端进行插入操作，而在另一端进行删除操作，具有先进先出的特性",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "交换排序是一种排序算法，其核心性质是通过比较元素并交换不满足顺序要求的元素位置，逐步将无序序列转换为有序序列",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是一种基于堆数据结构的排序算法，它将待排序数据构建成一个堆，通过不断取出堆顶元素并调整堆结构来实现排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线其具有方向或无方向且有权值或无权值不同类型的图边的具体特点根据图的类型如无向图边",
    "head": "图的边",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "50"
  },
  {
    "sentence": "哈希表是一种数据结构它通过哈希函数将键映射到特定位置来存储和检索数据具有快速查找平均时间复杂度接近常数的特点",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对于树中的任一结点，若其序号i满足1≤i≤n，则其左孩子序号为2i",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "数组是由相同类型的数据元素组成的有序集合，具有存储相同类型数据、元素有序排列且有固定存储位置和大小等核心性质",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "数组是一种有序数据集合，其中的元素具有相同的数据类型，并且通过一个统一的数组名和下标来唯一标识和访问每个元素",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找是从数据序列的一端开始，依次将每个元素与目标值进行比较，直到找到目标值或遍历完整个序列为止的查找方法",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "完全二叉树的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "队列的核心特征是先进先出即元素按照进入队列的先后顺序依次从队列中取出排在前面的元素先出队排在后面的元素后出队",
    "head": "队列",
    "tail": "队列",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "链表是一种通过指针将一组数据元素按顺序链接起来的数据结构，每个数据元素包含数据部分和指向下一个元素的指针部分",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次将每个元素与目标值进行比较，直到找到目标值或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "42"
  },
  {
    "sentence": "完全二叉树是深度为k的，有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "有向图是一种图结构，其边具有方向性，即从一个顶点指向另一个顶点，这是有向图区别于无向图的核心特征，通过有向边",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数据的物理结构是数据在计算机中的存储表示形式，其核心性质包括数据元素的存储方式以及数据元素之间关系的表示方法",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "30"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的元素在物理位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线或弧其表示顶点之间的某种关系并且在有向图中边具有方向无向图中边无方向且边可能具有",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "堆排序是一种基于堆数据结构的排序算法，它将待排序数据构建成一个堆，通过不断取出堆顶元素并调整堆结构来实现排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "递归基础是递归算法中最简单情况的定义，通常是当问题规模减小到一定程度时可直接得出答案无需进一步递归调用的情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的键值大于或小于其子节点的键值（大顶堆或小顶堆），且具有完全二叉树的性质",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "46"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径相通，或者在有向图中，对于任意两个顶点u和v，都存在从u到",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的元素在物理位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "在树形结构中，根节点是没有前驱节点且唯一的起始节点，它位于树的顶部，是整棵树的核心，通过它衍生出树的其他节点",
    "head": "根节点",
    "tail": "前驱节点",
    "head_offset": "7",
    "tail_offset": "13"
  },
  {
    "sentence": "交换排序是一种排序算法，其核心性质是通过比较元素并交换不满足顺序要求的元素位置来逐步将无序序列转变为有序序列",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "栈的核心特征是具有后进先出的特点，即最后进入栈的元素最先被取出，就像一个只允许在一端进行插入和删除操作的容器",
    "head": "插入",
    "tail": "删除",
    "head_offset": "44",
    "tail_offset": "47"
  },
  {
    "sentence": "图的核心性质包括顶点集合和边集合的存在，边是顶点的二元组表示顶点之间的关系，图可分为有向图和无向图，有向图的",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "14"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，且有且仅有一个根节点，除根节点外的每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "交换排序是一种排序算法，其核心特征是通过比较元素并交换不满足顺序要求的元素位置，逐步将无序序列转变为有序序列",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "满二叉树是深度为k且有2^k - 1个节点的二叉树，其每一层的节点数都达到最大值，叶子节点都在最底层，且每个",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "无向图是一种图结构其中任意两个顶点之间的边没有方向即若存在连接顶点u和顶点v的边则从u到v和从v到u是同一条",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "路径是由顶点和相邻顶点序偶构成的边所形成的序列，其具有有向性或无向性，有向路径顶点序列中相邻顶点的顺序与边的",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即每一个节点要么有两个子",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "堆是一种优先队列数据结构，它满足堆序性质，即父节点的值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值",
    "head": "队列",
    "tail": "父节点",
    "head_offset": "6",
    "tail_offset": "22"
  },
  {
    "sentence": "广度优先搜索的核心性质是按照层次依次访问节点，先访问距离起始节点较近的节点，直到遍历完所有节点或找到目标节点",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树中所有结点的度的最大值就是树的度，即树中一个结点的子树个数的最大值决定了树的度，它反映了树中各结点拥有子树",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "14",
    "tail_offset": "26"
  },
  {
    "sentence": "连通图的核心特征是图中任意两个顶点之间都存在路径，即从图中任何一个顶点出发都可以通过一系列边到达其他任何顶点",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "循环链表是一种特殊的链表，其尾节点的指针域指向头节点，从而形成一个环形结构，使得链表中的节点可以依次循环访问",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "二叉树遍历包括前序遍历中序遍历和后序遍历 前序遍历是根左右 中序遍历是左根右 后序遍历是左右根 不同遍历方式",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "线性查找是在一个给定的数据序列中从第一个元素开始依次逐个检查元素，直至找到目标元素或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "42"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "单链表是一种链式存储的线性表，它由节点组成每个节点包含数据域和指针域指针域指向下一个节点从而形成一个节点序列",
    "head": "单链表",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（若图为有向图则路径有方向，从起始顶点按边的指向到终止顶点，若为无",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来访问和操作每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即对于深度为i的节点，",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "无向图是由顶点集和边集组成的一种图结构其中边集是顶点集元素的无序对集合且任意一条边连接两个顶点不存在方向区别",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "邻接矩阵是用一个二维数组来表示图中顶点之间邻接关系的矩阵，对于有n个顶点的图，其邻接矩阵是一个n×n的矩阵，",
    "head": "邻接矩阵",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树的核心性质是树上任一节点的左子树和右子树的高度差的绝对值不超过1且左子树和右子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "堆排序是一种基于堆这种数据结构，通过构建初始堆、交换堆顶元素与末尾元素并调整堆来逐步将无序数组排序的排序算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树中各节点度的最大值就是树的度树中每个节点的度都小于或等于树的度不同类型的树其度有不同特点如二叉树度最大为2",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "12",
    "tail_offset": "29"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "完全二叉树的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性表是具有相同数据类型的n（n≥0）个数据元素的有限序列，其中n为表长，当n = 0时线性表为空表，且线性",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "有向图是由顶点集合及顶点间的有向边构成的一种图，其边具有方向性，从一个顶点指向另一个顶点，与无向图不同，有向",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即每一个节点要么有两个子",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "集合是由确定的、互不相同的对象所组成的整体，其中确定的对象构成集合的元素，这些元素具有确定性、互异性和无序性",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "在图中，从一个顶点出发，沿着边经过一些顶点后又回到该顶点的路径（路径中顶点不重复，除起点和终点相同）称为回路",
    "head": "路径",
    "tail": "路径",
    "head_offset": "29",
    "tail_offset": "32"
  },
  {
    "sentence": "插入排序的核心性质是将未排序数据插入到已排序序列的合适位置，通过依次对数组中的元素进行操作，使得数组逐渐有序",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值表示与该边相关的某种代价、距离、成本或其他数值度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中所有结点的度的最大值就是树的度其核心特征为树中各结点度的数值情况决定了树的度且该度是所有结点度中的最大值",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "14",
    "tail_offset": "37"
  },
  {
    "sentence": "循环链表是一种特殊的链表，其尾节点的指针域指向头节点，从而形成一个环形结构，使得链表中的节点可以依次循环访问",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，对于一个具有n个顶点的图，其邻接矩阵是一个n×n的矩阵，若图中顶点i和顶点j之间",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "树的节点是树结构中的基本组成部分具有一个数据元素以及零个或多个指向子节点的指针用于表示树的层次关系和数据组织",
    "head": "树的节点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "存储结构的特点的核心性质包括数据元素的存储方式、数据元素之间的逻辑关系的表示方法以及数据元素的操作方式等方面",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点，其特点包括处于树的最底层、没有分支向外延伸、是数据或信息的最终存储位置等",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于任意两个顶点u和v，既存在从u到v的路径也",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "根节点是树结构中位于顶端没有父节点的特殊节点，它是整个树结构的起始点且具有特殊地位用于标识和组织树中其他节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "图的边是连接图中两个顶点的元素，其特点包括具有方向性（有向图的边有明确方向，无向图的边无方向）、有权重属性（",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径相通则该无向图为连通图，在有向图中若任意两个顶点之间都存在",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "简单排序具有比较和交换元素位置以逐步将无序序列转化为有序序列的特点其核心性质是通过多次比较和交换操作实现排序",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "52"
  },
  {
    "sentence": "迭代法的核心特征是通过不断重复执行相同的计算步骤，利用上一次迭代的结果来计算下一次迭代的值，逐步逼近问题的解",
    "head": "迭代法",
    "tail": "迭代",
    "head_offset": "0",
    "tail_offset": "30"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边经过若干顶点后又回到该顶点的路径且路径中顶点不重复（除起点和终点相同外）",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "集合的核心特征是具有确定性、互异性和无序性，其中确定性是指给定一个集合，任何一个对象是否属于这个集合是明确的",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断将区间缩小一半，比较目标值与中间元素，以确定目标值是否存在及所在位置的查找算法",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "邻接矩阵的核心性质是若图G有n个顶点，其邻接矩阵A中元素A[i][j]的值表示顶点i到顶点j是否有边相连，若",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，如果顺序错误就把它们交换过来，不断重复此操作直到整个数组都被排序好的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "迭代法的核心特征是通过不断重复执行相同的计算步骤，利用上一次迭代的结果来计算下一次迭代的值，逐步逼近问题的解",
    "head": "迭代法",
    "tail": "迭代",
    "head_offset": "0",
    "tail_offset": "30"
  },
  {
    "sentence": "无向图是一种图结构其中任意两个顶点之间的边没有方向即若存在连接顶点u和顶点v的边则从u到v和从v到u是同一条",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "队列是一种特殊的线性表，其核心性质是只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即每一个节点要么有两个子",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "连通图是指在无向图中，任意两个顶点之间都存在路径相通，或者在有向图中，对于每一对顶点u和v，都存在一条从u到",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序表的核心性质是其逻辑上相邻的元素在物理存储位置上也相邻，且可以通过下标直接访问元素，时间复杂度为O(1)",
    "head": "访问",
    "tail": "时间复杂度",
    "head_offset": "39",
    "tail_offset": "44"
  },
  {
    "sentence": "数据类型是一组值的集合以及定义在这组值上的一组操作的总称，它具有特定的取值范围、表示形式和相关操作规则等特点",
    "head": "数据类型",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对于树中的任一结点，若其序号i满足1≤i≤n，则其左孩子序号为2i",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次将每个元素与目标值进行比较，直到找到目标值或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "42"
  },
  {
    "sentence": "完全二叉树的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的元素在物理位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "子节点是树结构中与父节点直接相连且处于较低层次的节点，具有直接受父节点关联、处于树状层级结构中较低位置等特点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "队列是一种先进先出的线性数据结构，其特点是元素按照进入的顺序依次存储，在进行操作时，先进入队列的元素先被取出",
    "head": "队列",
    "tail": "队列",
    "head_offset": "0",
    "tail_offset": "45"
  },
  {
    "sentence": "二叉树遍历分为前序遍历（根左右）、中序遍历（左根右）、后序遍历（左右根），前序遍历先访问根节点再递归访问左右",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "连通图是指在无向图中，任意两个顶点之间都存在路径相通，或者在有向图中，对于每一对顶点u和v，都存在一条从u到",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树遍历分为前序遍历（根左右）、中序遍历（左根右）、后序遍历（左右根），前序遍历先访问根节点再递归访问左右",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "无向图是一种图结构其中任意两个顶点之间的边没有方向即若顶点u和顶点v之间存在边则从u到v和从v到u是同一条边",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "邻接矩阵是用于表示图的一种矩阵，其特点为：若图中有n个顶点，则矩阵为n阶方阵，矩阵元素为0或1，无向图中矩阵",
    "head": "邻接矩阵",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "48"
  },
  {
    "sentence": "数据的逻辑结构的特点是数据元素之间存在的一种逻辑关系，它独立于数据的存储方式且描述了数据元素间抽象的相互关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "11"
  },
  {
    "sentence": "邻接矩阵是表示图的一种矩阵，对于一个具有n个顶点的图，其邻接矩阵是一个n×n的矩阵，若顶点i到顶点j有边相连",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，其插入操作被称为进栈，删除操作被称为出栈，遵循后进先出的原则",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "连通图是指在无向图中，若任意两个顶点之间都存在路径能够相连，或者在有向图中，对于任意两个顶点u和v，既存在从u",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "无向图是一种图结构，其中任意两个顶点之间的边没有方向，即若存在一条连接顶点u和顶点v的边，则从u到v和从v到u",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数据的物理结构的核心性质包括数据元素在计算机中的存储方式以及数据元素之间的逻辑关系如何通过存储结构来体现等方面",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "14"
  },
  {
    "sentence": "冒泡排序比较相邻元素大小，将较大元素交换到右侧，每一轮把最大元素“冒泡”到数组末尾，重复此过程直到整个数组有序",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "数组的核心性质是具有相同数据类型的一组数据元素按顺序存储在连续的内存空间中，可以通过下标来唯一地访问其中的元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即对于深度为i的节点",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线，它表示顶点之间的某种关系，且边具有方向或无方向之分，在有向图中边有明确的起始顶点",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "栈是一种特殊的数据结构，其核心特征为后进先出，即最后进入栈中的元素会最先被取出，且只能在栈顶进行插入和删除操作",
    "head": "插入",
    "tail": "删除",
    "head_offset": "48",
    "tail_offset": "51"
  },
  {
    "sentence": "树的节点包含数据元素以及指向子节点的指针且根节点没有前驱节点其余节点有唯一前驱节点每个节点可有零个或多个子节点",
    "head": "树的节点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "满二叉树的核心性质是每一层上的节点数都达到最大值，即如果满二叉树的深度为k，那么它的节点总数为2^k - 1，",
    "head": "满二叉树",
    "tail": "满二叉树",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "二叉树遍历的定义的核心性质包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者一棵具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "抽象数据类型是一个数学模型以及定义在该模型上的一组操作，其强调数据的逻辑结构和相关操作而不依赖于具体的实现细节",
    "head": "抽象数据类型",
    "tail": "逻辑结构",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "顺序表的核心性质是其逻辑上相邻的元素在物理存储位置上也相邻，并且可以通过下标直接访问元素，时间复杂度为O(1)",
    "head": "访问",
    "tail": "时间复杂度",
    "head_offset": "40",
    "tail_offset": "45"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果该二叉树的深度为h，那么它的节点总数为2^h - 1",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树遍历分为前序遍历中根节点先访问左右子树随后访问，中序遍历左子树先访问根节点再访问右子树，后序遍历左右子树",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树中各节点度的最大值即为树的度，且树中不同节点的度可能不同，度为0的节点是叶子节点，度不为0的节点为分支节点，",
    "head": "树的度",
    "tail": "叶子节点",
    "head_offset": "12",
    "tail_offset": "37"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即对于深度为i的节点",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "数据的逻辑结构的特点是反映数据元素之间逻辑关系且与数据的存储无关包括集合结构线性结构树形结构图状结构等不同类型",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "13"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构，其中顶点集合不能为空，顶点间的关系集合描述了顶点之间的连接方式",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "循环链表的核心性质是其尾节点的指针指向头节点从而形成一个环形结构使得链表中各个节点可以依次遍历且没有明确的终点",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间抽象化的相互关系，它不考虑数据在计算机中的存储方式，仅关注数据元素之间的逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "非线性结构的核心特征是存在至少一个数据元素有不止一个前驱元素或不止一个后继元素或者元素之间的关系不满足线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "单链表是一种链式存储的线性表，每个节点包含数据元素以及指向后继节点的指针，通过头节点可顺序访问链表中的各个节点",
    "head": "单链表",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "双向链表是一种链表数据结构，其每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而形成双向链接关系",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "邻接矩阵的核心性质是其元素表示图中顶点之间是否存在边，若顶点\\(i\\)与顶点\\(j\\)之间有边相连，则邻接矩阵",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "51"
  },
  {
    "sentence": "归并排序是将一个数组分成两个子数组，分别对两个子数组进行排序，然后将排序好的子数组合并成一个有序数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，任意两个顶点之间的边是双向的，即若存在连接顶点u和顶点v的边，则从u到v和",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "完全二叉树是深度为k的具有n个结点的二叉树，若其中每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树中一个节点的子树个数称为该节点的度，树中所有节点度的最大值就是树的度，树的度的核心特征是反映树中节点拥有子树",
    "head": "子树",
    "tail": "树的度",
    "head_offset": "7",
    "tail_offset": "32"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，任意两个顶点之间的边是双向的，即若顶点u和顶点v之间存在边，则从u到v和从",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是由相同类型的数据元素组成的有序集合，这些元素在内存中按顺序存储，可以通过下标来访问和引用数组中的各个元素",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构所具有的父节点大于或等于子节点（大顶堆）或父节点小于或等于子节点（小顶堆）的性质，将",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（若图为有向图则路径有方向，从起始顶点按边的方向到达终止顶点，若为无",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "循环链表是一种链表结构，其尾节点的指针域指向头节点，从而形成一个环，使得从链表中的任意节点出发都能遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树遍历的定义的核心性质包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "满二叉树的核心性质是每一层上的节点数都达到最大值，即如果满二叉树的深度为k，那么它的节点总数为2^k - 1，",
    "head": "满二叉树",
    "tail": "满二叉树",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "简单排序是对一组数据按照特定规则依次比较元素大小并进行交换或移动操作以实现从小到大或从大到小有序排列的排序方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "51"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，其插入操作被称为进栈，删除操作被称为出栈，遵循后进先出的原则",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果该满二叉树的深度为h，则其节点总数为2^h - 1，",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "子节点是树结构中直接位于某一节点下方的节点，具有与父节点通过特定的边相连且是该父节点所关联的下一层级节点的特点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它满足父节点的键值大于或小于其子节点的键值（大顶堆或小顶堆），并且具有完全二叉树的特性",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "15",
    "tail_offset": "47"
  },
  {
    "sentence": "数据的逻辑结构的定义的核心特征是数据元素之间逻辑关系的描述，它独立于数据的存储结构，反映数据元素之间的内在联系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "16"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可通过下标来唯一标识和访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "二叉树遍历的定义的核心性质包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "无向图是由顶点集和边集组成，其中边集是顶点集的无序对集合，顶点集中的元素称为顶点，边集中的元素是顶点的无序对，",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "树的核心性质是树中任意两个节点有且仅有一条路径相连且树无回路并且有一个特定节点（根节点）到其他节点都有唯一路径",
    "head": "路径",
    "tail": "回路",
    "head_offset": "21",
    "tail_offset": "28"
  },
  {
    "sentence": "回溯法是一种通过尝试所有可能的解路径，在搜索过程中不断回溯以避免无效路径，从而找到问题最优解或所有解的算法策略",
    "head": "回溯法",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点之间通过边相连，边可以具有方向或无方向，可用于表示各种复杂的关系和结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的初始情况或终止条件，在此情况下递归函数不再调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "连通图的核心特征是图中任意两个顶点之间都存在路径，即从图中任何一个顶点出发，都能够通过一系列边到达其他所有顶点",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "顺序查找是从数据结构的一端开始，依次将数据元素与给定值进行比较，直到找到匹配元素或遍历完整个数据结构的查找方法",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "顺序查找是从数据序列的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "查找",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个数值作为权值，这些权值可以表示诸如距离、成本、容量等具有实际意义的量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图的边是连接图中两个顶点的元素，它表示顶点之间的某种关系，并且具有方向（有向图）或无方向（无向图）的属性，通过",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "循环链表是一种特殊的链表，其尾节点的指针域指向头节点，使得整个链表形成一个环，从而可以循环遍历链表中的所有节点",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它通常满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆），并且具有完全二叉树的结构",
    "head": "父节点",
    "tail": "完全二叉树",
    "head_offset": "17",
    "tail_offset": "47"
  },
  {
    "sentence": "回路是图中一条至少包含一条边且起点和终点相同的路径其核心特征是存在从某个顶点出发经过若干边后又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，任意两个顶点之间的边是双向的，即若顶点u和顶点v之间存在边，则从u到v和从",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "广度优先搜索是一种按照层次依次访问节点，先访问距离起始节点较近的节点，再逐渐访问距离更远节点的数据结构遍历算法",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "堆是一种特殊的完全二叉树，它满足对于每个非叶子节点，其值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值",
    "head": "完全二叉树",
    "tail": "叶子节点",
    "head_offset": "7",
    "tail_offset": "21"
  },
  {
    "sentence": "图的顶点是图结构中的基本数据元素，它可以用来表示各种实际对象，且在图中通过边与其他顶点相连接以构成图的拓扑结构",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "双向链表是一种链表数据结构，其每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而形成双向链接关系",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "存储结构定义的核心性质包括数据元素在计算机内存中的存储方式以及它们之间的逻辑关系如何通过存储方式得以体现等方面",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "路径的核心性质是由一系列节点按照一定顺序依次连接而成，相邻节点之间存在特定的连接关系且路径具有明确的起点和终点",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "43"
  },
  {
    "sentence": "堆排序的核心特征是将数组构建成一个堆，分为大顶堆和小顶堆，大顶堆中每个节点的值大于或等于其子节点的值，小顶堆中",
    "head": "堆排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "抽象数据类型是指一个数学模型以及定义在该模型上的一组操作，它强调数据的逻辑结构和相关操作而不涉及具体的存储表示",
    "head": "抽象数据类型",
    "tail": "逻辑结构",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "回路是数据结构中从一个顶点出发，沿着边经过若干顶点后又回到该起始顶点的路径且路径上除起始顶点外其余顶点均不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构，其中顶点集合不能为空，顶点间的关系集合描述了顶点之间的连接方式",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "二叉树遍历的核心特征包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问根节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "连通图是指在无向图中，任意两个顶点之间都存在路径能够相连，或者在有向图中，对于任意两个顶点u和v，既存在从u到",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序查找的核心性质是从数据序列的第一个元素开始，依次逐个比较元素值与目标值，直到找到目标值或遍历完整个数据序列",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "46"
  },
  {
    "sentence": "邻接矩阵是用于表示图的一种矩阵，其核心特征是：若图中有n个顶点，则邻接矩阵是一个n×n的方阵，对于无向图，矩阵",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），该序列中顶点依次相邻且边存在（有向图中",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图，路径是有向边的序列），序列中顶点相邻且边存在（对于有向",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "顺序查找是从数据序列的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "查找",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "哈希表的核心性质是通过哈希函数将键映射到特定位置以实现快速数据查找插入删除操作且平均情况下时间复杂度为常数时间",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "图的边是连接图中顶点的线，具有方向性或无方向性，每条边都与两个顶点相关联，边的集合确定了图的结构和连通性等性质",
    "head": "图的边",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "邻接矩阵是表示顶点之间相邻关系的矩阵，若图中有n个顶点，则邻接矩阵是一个n×n的方阵，对于无向图，矩阵中第i行",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "归并排序的核心特征是将一个无序数组分成两个子数组分别进行排序，然后将两个已排序的子数组合并成一个最终的有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即第k层有2的k减1次方个节点，并且所有叶子节点都在同一层",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构所具有的父节点大于或等于子节点（大顶堆）或父节点小于或等于子节点（小顶堆）的性质，将",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中一个节点的子树个数称为该节点的度，树中所有节点的度的最大值称为树的度，树的度的核心特征是反映树中节点拥有子",
    "head": "子树",
    "tail": "树的度",
    "head_offset": "7",
    "tail_offset": "33"
  },
  {
    "sentence": "循环链表的核心性质是表尾节点的指针域指向表头节点从而形成一个环使得从链表中的任意一个节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果该满二叉树的深度为k，则其节点总数为2^k - 1，",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "存储结构定义的核心特征是数据元素在计算机存储器中的存储方式，包括数据元素自身值的表示以及数据元素之间关系的表示",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "满二叉树的核心特征是一棵深度为k且有2^k-1个节点的二叉树，并且每一层上的节点数都达到最大值，即对于深度为i",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，对于有\\(n\\)个顶点的图，其邻接矩阵是一个\\(n\\times n\\)的矩阵，若图",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "简单排序是对数据序列进行排序的一种方式其核心性质是通过比较和交换元素位置逐步将数据序列从无序状态转变为有序状态",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "快速排序的核心性质是通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "在图论中，回路是指从图中某一顶点出发，沿着边连续移动，经过若干顶点后又回到该起始顶点且路径中各边互不相同的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "5",
    "tail_offset": "43"
  },
  {
    "sentence": "树是一种非线性的数据结构，有且仅有一个根节点，每个节点有零个或多个子节点，且任意两个节点间有且仅有一条路径相连",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "19",
    "tail_offset": "33"
  },
  {
    "sentence": "数组是具有相同数据类型的一组数据元素的集合，这些元素在内存中按顺序存储，通过下标可以唯一地访问数组中的每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树的二叉排序树",
    "head": "平衡二叉树",
    "tail": "树的高度",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉树遍历的核心特征包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问根节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "递归基础的核心性质是存在某些特定的简单情况或初始条件，在这些情况下递归函数可以直接给出结果而无需进一步递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "51"
  },
  {
    "sentence": "非线性结构是一种数据元素之间存在一种或多种非简单的线性关系的数据结构，即数据元素之间的关系不是一对一的线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "栈的核心特征是后进先出即最后进入栈的元素最先被弹出，且栈具有特定的操作方式如入栈将元素添加到栈顶出栈从栈顶移除",
    "head": "栈",
    "tail": "入栈",
    "head_offset": "27",
    "tail_offset": "38"
  },
  {
    "sentence": "有向图是由顶点集合及顶点间的有向边构成的一种图，其边是有方向的，即从一个顶点指向另一个顶点，顶点之间的连接具有",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即第k层有2^(k-1)个节点，并且叶子节点都在最后一层，",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到相等的元素或遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的初始情况或边界条件，在该条件下递归函数不再调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "快速排序的核心性质是通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "数据类型是一组值的集合以及定义在这组值上的一组操作的总称其核心特征为具有特定取值范围且有针对这些取值的相关操作",
    "head": "数据类型",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或者遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树遍历的核心特征包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问根节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即对于深度为i的节点",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "存储结构的特点的核心性质包括数据元素在计算机内存中的存储方式以及它们之间的逻辑关系如何通过物理存储来体现等方面",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "回溯法是一种通过尝试所有可能的解空间路径，在搜索过程中不断检查和排除不符合条件的路径，以找到问题的解的算法策略",
    "head": "回溯法",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树是一种非线性的数据结构它有一个根节点且根节点可以有零个或多个子节点每个子节点又可以有零个或多个子节点以此类推",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "16",
    "tail_offset": "20"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树是一种非线性的数据结构，它有一个根节点，其余节点分为若干互不相交的子树，每个子树也是一棵树且具有递归结构特点",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "17",
    "tail_offset": "34"
  },
  {
    "sentence": "迭代法是一种不断用变量的旧值递推新值，从一个初始估计值出发，通过重复执行相同的计算步骤逐步逼近问题真实解的方法",
    "head": "迭代法",
    "tail": "递推",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "二分查找的核心性质是在一个有序数组中，通过每次将查找区间缩小一半的方式，快速定位目标元素，其前提是数组必须有序",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长路径上的边数或节点数所表示的数值，它反映了树的结构层次深度，不同树的高度因",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，即如果存在一条连接顶点A和顶点B的边，那么从顶点A到顶点B和从顶点B到顶点A",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点所经过的最长路径上的边数或节点数，其核心特征在于体现了树从根到叶的最长延伸距离，",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果二叉树的深度为k，那么该满二叉树的节点总数为2^k -",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "归并排序是将一个数组分成两个子数组，对这两个子数组分别进行排序，再将排序好的子数组合并成一个有序的数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个数值作为权重，这些权重可以表示诸如距离、成本、容量等各种与边相关的信息",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将关键字与表中元素进行比较，直到找到与关键字相等的元素或遍历完整个表的查找方法",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "栈的核心特征是后进先出即最后进入栈的元素最先被弹出栈，并且栈的操作主要集中在栈顶进行包括入栈操作将元素压入栈顶和",
    "head": "出栈",
    "tail": "入栈",
    "head_offset": "24",
    "tail_offset": "44"
  },
  {
    "sentence": "树的查找是在给定的树结构中，根据特定的条件或键值，从根节点开始，按照树的遍历规则逐步寻找满足条件的节点的操作过程",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "26"
  },
  {
    "sentence": "回路是在图中从一个顶点出发，沿着边经过若干顶点后又回到该起始顶点所形成的路径且路径中各顶点和边均不重复（在有向图",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "图的顶点是图结构中的基本元素，是组成图的节点，用于表示图中的对象或实体，在有向图或无向图中具有标识作用且与边相关",
    "head": "图的顶点",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "树的高度是从根节点开始，沿着最长路径到最远叶子节点所经过的边的数目加1（若根节点为第0层则是最长路径上节点的最大",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "插入排序的核心特征是将未排序数据插入到已排序序列的合适位置，通过依次对每个元素进行这样的操作，最终使整个数组有序",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小并在需要时交换位置，将最大（或最小）元素逐步“冒泡”到数组末尾（或开头）的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "42"
  },
  {
    "sentence": "树中各节点度的最大值就是树的度，树的度反映了树中节点分支情况的最大程度，它体现了树结构的复杂程度，不同树的度各不",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，顶点之间的连接是对称的即若存在从顶点u到顶点v的边则必然存在从顶点v到顶点u",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性表是具有相同数据类型的n个数据元素的有限序列，其中n≥0，当n=0时为空表，相邻元素之间存在一对一的线性关系",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "存储结构是指数据元素及其关系在计算机存储器中的表示，它不仅要存储数据元素本身的值，还要存储数据元素之间的逻辑关系",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，描述了数据元素之间的相互关系以及数据的组织形式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "栈的核心特征是后进先出即最后进入栈的元素最先被弹出，且操作主要集中在栈顶进行包括入栈操作将元素压入栈顶和出栈操作",
    "head": "入栈",
    "tail": "入栈",
    "head_offset": "40",
    "tail_offset": "48"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对于树中的每个结点，如果其序号i满足1≤i≤n，且i>1时其父结点序号",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "邻接矩阵是用于表示图的一种矩阵，其核心性质为对于一个具有n个顶点的图，邻接矩阵是一个n×n的矩阵，若顶点i与顶点",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左子树和右子树都是一棵平衡",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "线性表是一种由有限个数据元素组成的序列，其中每个元素都有唯一前驱和后继（除第一个元素无前驱，最后一个元素无后继）",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "集合是由确定的、互不相同的对象所组成的整体这些对象具有明确的定义使得对于任何一个对象都能明确判断它是否属于该集合",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "54"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，对于有\\(n\\)个顶点的图，其邻接矩阵是一个\\(n\\times n\\)的矩阵，若顶点",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的初始情况，通常是问题规模足够小以至于可以直接得出结果而无需进一步递归调用的情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树是一种非线性数据结构，它由n（n≥0）个有限节点组成，包含一个根节点，且每个节点有零个或多个子节点，除根节点外",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "32",
    "tail_offset": "47"
  },
  {
    "sentence": "循环链表的核心性质是表尾节点的指针域指向表头节点从而形成一个环形结构使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "树的查找的特点的核心特征是基于树的层次结构从根节点开始按照特定规则逐层或分支遍历节点以确定目标元素是否存在于树中",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "22"
  },
  {
    "sentence": "存储结构的核心性质是数据元素及其关系在计算机存储器中的表示方式以及如何利用这种表示方式来高效地进行数据处理和操作",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "存储结构是指数据元素及其关系在计算机存储器中的表示，它包含数据元素的表示以及数据元素之间关系的表示这两个核心特征",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "在图论中，回路是指从图中某一顶点出发，沿着边连续移动，经过若干个顶点后又回到该起始顶点且路径中各边互不相同的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "5",
    "tail_offset": "44"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得整个链表形成一个环，从而可以从链表中的任意节点开始遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "连通图是指在无向图中任意两个顶点之间都存在路径可相互到达且在有向图中任意两个顶点之间都存在有向路径可相互到达的图",
    "head": "连通图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），且相邻顶点之间存在边（对于有向图存在有向",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "双向链表是一种链表数据结构，其每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针，从而可以双向遍历链表",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性查找是从数据序列的一端开始，依次将每个数据元素与目标值进行比较，直到找到目标值或遍历完整个数据序列的查找方式",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "21"
  },
  {
    "sentence": "树的查找的特点的核心性质包括若树为空则查找失败，若树非空则将给定值与根节点值比较，若相等则查找成功，若小于根节点",
    "head": "查找",
    "tail": "查找",
    "head_offset": "2",
    "tail_offset": "19"
  },
  {
    "sentence": "双向链表是一种数据结构，每个节点除了包含数据域外还包含两个指针域，分别指向前驱节点和后继节点从而形成双向链接关系",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "29"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机的存储结构，反映数据元素之间的逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "图由顶点集和边集组成顶点之间通过边相连且边具有方向性或无方向性边可有权重或无权重具有邻接关系且图可分为有向图无向",
    "head": "图",
    "tail": "有向图",
    "head_offset": "47",
    "tail_offset": "51"
  },
  {
    "sentence": "堆排序的核心性质是利用堆这种数据结构，堆分为大顶堆和小顶堆，大顶堆中每个节点的值都大于或等于其子节点的值，小顶堆",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "数据的逻辑结构的核心性质是数据元素之间的逻辑关系，它独立于数据的存储方式，描述了数据元素之间的关联方式和组织形式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "13"
  },
  {
    "sentence": "单链表的核心性质是每个节点包含一个数据元素以及一个指向下一个节点的指针，通过指针依次连接各个节点从而形成链表结构",
    "head": "单链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "树的查找的核心特征是从树的根节点开始，按照特定规则沿着树的分支路径逐步比较节点的值，以确定目标元素是否存在于树中",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者满足若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值，若它的右子树不空，则右",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果二叉树的深度为k，那么该满二叉树的节点总数为2^k -",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "非线性结构是指在该结构中至少存在一个数据元素，它具有两个或两个以上的前驱或后继，或数据元素之间的关系不是一对一的",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "数据的物理结构的核心特征是数据元素在计算机存储空间中的存储方式，包括数据元素自身的表示以及数据元素之间关系的表示",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "13"
  },
  {
    "sentence": "树中一个节点的子树个数称为该节点的度，树中所有节点的度的最大值称为树的度，树的度体现了树中节点分支情况的最大程度",
    "head": "子树",
    "tail": "树的度",
    "head_offset": "7",
    "tail_offset": "33"
  },
  {
    "sentence": "在图论中，回路是指从图中某一顶点出发，沿着边连续移动，经过若干个顶点后又回到该起始顶点且路径中各边互不相同的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "5",
    "tail_offset": "44"
  },
  {
    "sentence": "图的顶点是图结构中的基本元素，是组成图的各个节点，在有向图或无向图中具有标识和与其他顶点通过边相连的关系以构成图",
    "head": "图的顶点",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "完全二叉树是一种二叉树，它的叶子节点只会出现在最下层和次下层，且最下层的叶子节点集中在树的左部，若设二叉树的深度",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数组是一种有序数据集合，其中的元素具有相同的数据类型，并且可以通过一个统一的数组名和下标来唯一标识和访问每个元素",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "邻接矩阵的核心性质是若图中存在从顶点i到顶点j的边则邻接矩阵中对应元素为1否则为0且主对角线元素对应顶点到自身的",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点路径上经过的边数或节点数，它体现了树在垂直方向上的深度和层次结构，不同类型的树其",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "集合是由具有某种特定性质的具体的或抽象的对象汇总而成的集体，这些对象称为该集合的元素，具有确定性、互异性和无序性",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "无向图是一种图结构，其中边没有方向，即如果存在一条连接顶点A和顶点B的边，那么从顶点A到顶点B和从顶点B到顶点A",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "集合是由具有某种特定性质的具体的或抽象的对象汇总而成的集体，这些对象称为该集合的元素，具有确定性、互异性和无序性",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "37"
  },
  {
    "sentence": "树的查找特点是基于树的结构特性，通过从根节点开始按照特定规则比较节点值来确定目标元素是否存在于树中以及其所在位置",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "19"
  },
  {
    "sentence": "广度优先搜索是一种按照层次依次访问节点，先访问距离起始节点较近的节点，直至找到目标节点或遍历完所有节点的搜索算法",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "循环链表的核心性质是其尾节点的指针指向头节点从而形成一个环形结构使得链表中各个节点能够依次相连形成一个封闭的循环",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "树的查找的特点的核心性质是通过对树中节点的比较和遍历，利用树的层次结构和节点间的关系来确定目标元素是否存在于树中",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "24"
  },
  {
    "sentence": "单链表的核心性质是每个节点包含一个数据元素以及一个指向下一个节点的指针，通过指针依次连接各个节点从而形成线性序列",
    "head": "单链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "根节点是树结构中的起始节点，没有父节点，是树中所有其他节点的祖先，具有独一无二性且在树的层次结构中处于最高层位置",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "无向图是一种图结构，由顶点集合及顶点间的边集合组成，其中边是没有方向的，即若顶点vi和vj之间存在边，则从vi到",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者满足若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值，若它的右子树不空，则右",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "数据类型是一组值的集合以及定义在这组值上的一组操作的总称，不同数据类型具有不同取值范围、存储方式、操作集合等特点",
    "head": "数据类型",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，描述了数据元素之间的关联方式以及数据的组织形式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "线性查找是在一个数据序列中从第一个元素开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "42"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其核心特征是元素的插入和删除操作都在栈顶进行，新元素入栈后成为栈顶元素，而栈顶元素出",
    "head": "插入",
    "tail": "删除",
    "head_offset": "23",
    "tail_offset": "26"
  },
  {
    "sentence": "树的高度是从根节点开始，到最远叶子节点所经过的最长路径上的边数，其核心特征是反映了树从根到叶子节点的最长距离度量",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，并且可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其核心性质为元素的插入和删除操作都在栈顶进行，新元素入栈后成为栈顶元素，而栈顶元素出",
    "head": "插入",
    "tail": "删除",
    "head_offset": "23",
    "tail_offset": "26"
  },
  {
    "sentence": "无向图的核心特征是由顶点集合和边集合组成，其中边是没有方向的，即如果顶点u和顶点v之间存在一条边，那么从u到v和",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉树遍历的核心性质是前序遍历先访问根节点再递归访问左子树和右子树，中序遍历先递归访问左子树再访问根节点最后递归",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其特点是除了最后一层外，每一层上的节点数都是满的，并且最后一层上的节点都集中在该层",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点下方的节点，具有比父节点更低的层级且可能存在多个兄弟节点与之共同构成树的结构层次",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次将每个数据元素与目标值进行比较，直到找到目标值或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "23"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到最大值，即除最后一层无任何子节点外，每一层上的所有节点都有两个子节点",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "哈希表是一种数据结构它通过哈希函数将键映射到特定位置来存储和检索数据从而能在平均常数时间内进行查找插入和删除操作",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点间的关系通过边来表示，图中的边可以是有向边或无向边，并且图中顶点个数可以",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或者遍历完整个线性表为止",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础的核心特征是存在一种能使递归过程结束的条件，在该条件满足时递归不再继续调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "递归基础的核心特征是存在一个或多个明确的终止条件，在这些条件下递归过程不再继续调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点下方的节点，具有在特定层级关系中位于父节点之后且与父节点存在明确连接关系等特点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，且是树中所有其他节点的祖先，树中的所有节点都直接或间接与根节点相连",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树的高度是从根节点开始，到最远叶子节点所经过的最长路径上的边数或节点数（不同定义方式下），其核心特征为体现树中从",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础具有明确的终止条件，是递归算法中最简单的情况，在此情况下递归函数直接返回一个确定的结果而不再进行递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其特点是除了最后一层外，每一层上的节点数都是满的，并且最后一层上的节点都集中在该层",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "堆是一种优先队列数据结构，其特点是每个节点的值大于或等于其子节点的值（最大堆）或小于或等于其子节点的值（最小堆）",
    "head": "队列",
    "tail": "堆",
    "head_offset": "6",
    "tail_offset": "37"
  },
  {
    "sentence": "树的深度是从根节点开始自顶向下逐层累加至最深叶节点所经过的层数，且从根节点到该叶节点的路径上的节点数即为树的深度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础是递归算法中满足特定条件的初始情况，通常是问题规模最小或最简单时可直接得出结果而无需进一步递归调用的情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "递归基础的核心特征是存在一个或多个明确的终止条件，在这些条件下递归过程不再继续调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，并且可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序的核心性质是利用堆这种数据结构，堆分为大顶堆和小顶堆，大顶堆中每个节点的值都大于或等于其子节点的值，小顶堆",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "循环链表的核心性质是其尾节点的指针指向头节点从而形成一个环形结构使得链表中节点可以依次遍历且无明显终点可循环访问",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "比较排序是一种排序算法，其核心特征是通过比较元素之间的大小关系来确定元素的相对顺序，从而将输入序列转换为有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "有向图是由顶点集合及顶点间的有向边构成的一种图，其中每条边都有明确的方向，从一个顶点指向另一个顶点，其核心性质是",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "抽象数据类型是指一个数学模型以及定义在该模型上的一组操作，它强调数据的逻辑结构和相关操作的定义而不考虑其具体实现",
    "head": "抽象数据类型",
    "tail": "逻辑结构",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，并且可以通过下标来唯一地访问每个元素",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "链表是一种线性数据结构，其核心性质为每个节点包含数据和指向下一个节点的指针，通过指针依次连接各个节点形成链式结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有如下性质的二叉树：若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树的查找的核心特征是从根节点开始，按照特定规则（如二叉排序树的左子树节点值小于根节点值、右子树节点值大于根节点值",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "树是一种非线性的数据结构，有且仅有一个根节点，每个节点有零个或多个子节点，并且任意两个节点间有且仅有一条路径相连",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "19",
    "tail_offset": "33"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树遍历分为前序遍历（根左右）、中序遍历（左根右）、后序遍历（左右根），每种遍历按照特定顺序访问二叉树节点，前",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树的节点是树结构中的基本元素包含数据以及指向其子节点的引用且除根节点外每个节点有且仅有一个父节点根节点没有父节点",
    "head": "树的节点",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其操作主要包括入栈将元素添加到栈顶、出栈从栈顶移除元素以及获取栈顶元素等，且栈在内存",
    "head": "入栈",
    "tail": "出栈",
    "head_offset": "21",
    "tail_offset": "32"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个单链表，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "单链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），该序列中相邻顶点之间存在边（对于有向图是",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "数据类型具有特定的取值范围、存储方式以及一组与之相关的操作，不同数据类型的这些特点相互区别，共同构成了其核心性质",
    "head": "数据类型",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "集合的核心特征包括确定性、互异性和无序性，其中确定性是指对于一个给定的集合，任何一个元素是否属于这个集合是明确的",
    "head": "集合",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "树的节点的核心性质包括每个节点有零个或多个子节点，有且仅有一个称为根的节点，除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "递归基础的特点的核心特征是存在一个或多个明确的终止条件，当满足这些条件时递归不再继续，直接返回一个已知的简单结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者具有下列性质的二叉树：若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "双向链表是一种数据结构，其每个节点包含数据元素以及指向其前一个节点和后一个节点的指针，通过这些指针可实现双向遍历",
    "head": "双向链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "非线性结构中至少存在一个数据元素有两个或两个以上的直接前驱或直接后继，其数据元素之间的关系不再是一对一的线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "完全二叉树是深度为k的有n个结点的二叉树，对于树中的每个结点，如果其编号i满足1≤i≤n，则其左子结点编号为2i",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "双向链表是一种链表数据结构，其每个节点除了包含指向下一个节点的指针外还包含指向前一个节点的指针，从而支持双向遍历",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次将每个元素与目标值进行比较，直到找到目标值或遍历完整个序列为止的查找方法",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "42"
  },
  {
    "sentence": "二叉树的核心性质是一棵非空二叉树的第 i 层上最多有 2 的 i-1 次方个结点，深度为 k 的二叉树最多有 2",
    "head": "二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是从一个顶点指向另一个顶点的有序对，顶点之间的边具有方向性",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "线性表是具有相同数据类型的n个数据元素的有限序列，其中n≥0，当n=0时为空表，相邻元素之间存在一对一的线性关系",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层上的节点数都达到最大值，即除最后一层无任何子节点外，每一层上的所有节点都有两个子节点",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "有向图是一种由顶点集合以及顶点之间的有向边构成的数据结构，其中每条有向边都具有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可表示诸如距离、成本、容量等与边相关的某种度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中一个节点的子树数目称为该节点的度，树中所有节点度的最大值就是树的度，其核心特征是反映树中节点分支情况以及整棵树",
    "head": "子树",
    "tail": "树的度",
    "head_offset": "7",
    "tail_offset": "32"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构，顶点集合中的元素称为顶点，顶点间的关系集合描述了顶点之间的连接方式",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "归并排序的核心特征是将一个数组分成两个子数组，分别对这两个子数组进行排序，然后将排序好的子数组合并成一个有序的数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它由顶点表和边表组成，顶点表中存储图的顶点信息，边表中存储与每个顶点相邻接的顶点",
    "head": "邻接表",
    "tail": "图的顶点",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数或节点数，它反映了树的层次结构深度，不同类型的树其高度因节点",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉搜索树是一棵空树或者满足若其左子树不空，则左子树上所有结点的值均小于它的根结点的值、若其右子树不空，则右子树上",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列，对于无向图是无向顶点序列）且相邻顶点之间存在",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "树的高度的核心特征是从树的根节点到最远叶子节点之间最长简单路径上的边数或节点数所代表的数值，它反映了树在垂直方向上",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "路径是图中两个顶点之间的顶点序列（若为有向图则是有向边序列），包含起点终点且满足从起点按顺序经中间顶点可到达终点，",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "路径是由顶点和相邻顶点序偶构成的边所形成的序列，具有连通性、有序性、唯一性（若图中存在从顶点A到顶点B的路径，则该",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "52"
  },
  {
    "sentence": "邻接矩阵是表示图中顶点间相邻关系的矩阵，其元素值反映顶点间是否有边相连及边的相关信息，方阵行数与列数等于图的顶点数",
    "head": "邻接矩阵",
    "tail": "图的顶点",
    "head_offset": "0",
    "tail_offset": "52"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点路径上的边数或节点数所表示的垂直距离，它体现了树的纵向层次深度，反映了树结构在垂直",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性结构是一种数据结构，其核心特征为数据元素之间存在一对一的线性关系，即除了第一个元素外，每个元素有且仅有一个前驱",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点，具有与父节点通过特定关系相连且在树的层级结构中有其特定位置和作用等特点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长简单路径上的节点数体现的，根节点深度为0，每向下一层深度加1，且不同节点到根",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "算法效率是指算法执行所需要的计算机资源量，包括时间资源和空间资源，衡量算法效率主要通过时间复杂度和空间复杂度来体现",
    "head": "时间复杂度",
    "tail": "空间复杂度",
    "head_offset": "43",
    "tail_offset": "49"
  },
  {
    "sentence": "二叉树遍历的核心性质包括前序遍历先访问根节点再递归访问左子树和右子树，中序遍历先递归访问左子树再访问根节点最后递归",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其核心特征是元素的插入和删除操作都在同一端进行，即栈顶，新元素总是被添加到栈顶，而删除",
    "head": "插入",
    "tail": "删除",
    "head_offset": "23",
    "tail_offset": "26"
  },
  {
    "sentence": "二叉树遍历是按照某种特定顺序访问二叉树中每个节点一次且仅一次的操作，包括前序遍历（根左右）、中序遍历（左根右）、后",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，且有一个被称为根的特殊节点，除根节点外每个节点有且仅有一个父节点，",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "子节点是树结构或图结构中与父节点相对应的节点，其特点的核心特征包括：子节点是父节点的直接后继节点，在树结构中处于比",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉树的遍历是指按照某种特定顺序访问二叉树中的每个节点一次且仅一次的操作，包括前序遍历（根节点、左子树、右子树）、",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其除了最后一层外，每一层上的节点数都是满的，并且最后一层上的节点都集中在最左边的若干",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树遍历是按照特定规则对二叉树中节点进行访问，先序遍历先访问根节点再递归访问左子树和右子树，中序遍历先递归访问左",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树的节点是树结构中的基本组成单元包含数据以及指向子节点的指针且除根节点外每个节点有且仅有一个父节点根节点没有父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "二叉树遍历是按照特定规则对二叉树中节点进行访问，先序遍历是根节点优先访问，中序遍历是根节点在左子树和右子树之间访问",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "根节点是树结构中的起始节点，没有父节点，是整个树的入口点，它与其他节点通过边相连并处于树的最顶层位置，是树状结构中",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "完全二叉树的核心特征是其叶子节点只能出现在最下层和次下层，并且最下层的叶子节点集中在树的左部，若设二叉树的深度为h",
    "head": "完全二叉树",
    "tail": "叶子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "指针是一种变量，其值为内存中另一个变量的地址，通过它可以间接访问所指向的变量，从而实现对内存中数据的灵活操作和管理",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "30"
  },
  {
    "sentence": "无向图是一种由顶点集合以及顶点之间的边集合组成的图结构，其中边是没有方向的，即若顶点v和顶点w之间存在边，则从v到",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找的核心性质是从数据序列的第一个元素开始，依次将每个元素与目标元素进行比较，直到找到目标元素或遍历完整个序列",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "50"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点间的关系通过边来表示，图中顶点的位置和边的形状不影响图的逻辑结构，图可分为",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可表示诸如距离、成本、容量等与边相关的某种度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图的顶点是图这种数据结构中组成图的基本元素之一，是图中用于表示某个对象或实体的节点，在有向图或无向图中具有标识作用",
    "head": "图的顶点",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "43"
  },
  {
    "sentence": "双向链表是一种链表结构，其每个节点除了包含数据域外，还包含两个指针分别指向前一个节点和后一个节点，从而支持双向遍历",
    "head": "双向链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若存在从顶点v到顶点w的一条路径，则称v和w是连通的，且路径长度是路径",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "加权图是一种图结构，其中图的每条边都被赋予一个数值作为权重，这些权重可以表示诸如距离、成本、容量等具有实际意义的量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树的节点具有一个数据元素，有零个或多个子节点，且有且仅有一个被称为根的节点，除根节点外的每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "父节点是树状结构中位于上一层级的节点，其特点的核心特征包括拥有子节点且处于比子节点更高的层级位置，对其下一层级的子",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "非线性结构的核心特征是其各数据元素之间的逻辑关系不是一对一的线性关系，存在一对多、多对一或多对多等非简单线性的关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "链表是一种通过指针将一组节点连接起来的数据结构，每个节点包含数据和指向下一个节点的指针，最后一个节点的指针指向空值",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "在树形结构中一个节点存在其他节点以其为直接前驱那么该节点就是这些节点的父节点即父节点有子节点且子节点以其为直接前驱",
    "head": "父节点",
    "tail": "父节点",
    "head_offset": "35",
    "tail_offset": "39"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列，对于无向图是无向顶点序列）且相邻顶点之间存在",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它是一个近似完全二叉树的结构且满足堆序性，即对于每个非叶子节点，其值大于或等于（大顶堆）或",
    "head": "完全二叉树",
    "tail": "叶子节点",
    "head_offset": "18",
    "tail_offset": "39"
  },
  {
    "sentence": "顺序查找是从数据序列的一端开始，依次将每个数据元素与要查找的值进行比较，直到找到该值或遍历完整个序列为止的查找方法",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "树的度的核心特征是树中所有结点的度的最大值，它决定了树的分支情况以及结构复杂程度，反映了树中各结点所拥有子树数量的",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "52"
  },
  {
    "sentence": "线性表是具有相同数据类型的n个数据元素的有限序列，其中n≥0，当n=0时为空表，且线性表中相邻数据元素之间存在着序",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "循环链表的核心性质是最后一个节点的指针域指向头节点从而形成一个环形结构使得链表中的节点可以依次遍历且没有明确的终点",
    "head": "循环链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "归并排序的核心特征是采用分治策略，将待排序数组不断分成两个子数组分别递归排序，最后把有序子数组合并成一个有序的数组",
    "head": "归并排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树是一种非线性数据结构，它有一个根节点，且根节点有零个或多个子节点，每个子节点又可以有零个或多个子节点，以此类推，",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "16",
    "tail_offset": "21"
  },
  {
    "sentence": "树中各节点度的最大值即为树的度，它反映了树中节点分支情况的最大程度，体现了树结构的复杂程度，不同树的度各不相同，且",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "12",
    "tail_offset": "48"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质为：若图中有n个顶点，则邻接矩阵是一个n×n的矩阵，矩阵中元素的值表示",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "在树形结构中，一个节点若存在直接后继节点且这些后继节点通过某种特定关系与之相连，那么该节点就是这些后继节点的父节点",
    "head": "后继节点",
    "tail": "后继节点",
    "head_offset": "16",
    "tail_offset": "23"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个数值作为权重，这些权重可用于表示诸如距离、成本、容量等各种与边相关的度量",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针域指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "父节点是树状结构中其下存在子节点的节点，具有比子节点更高的层级关系，在数据结构中起着承上启下连接子节点集合的作用且",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "数组是由相同类型的数据元素组成的有限序列，具有顺序存储、元素类型一致、有固定大小以及通过下标唯一标识元素等核心性质",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "存储结构的核心性质是数据元素及其关系在计算机存储器中的表示方式以及如何通过这种表示实现对数据的高效存储、访问和操作",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接矩阵是表示图的一种矩阵，其中矩阵元素的值表示图中顶点之间是否存在边以及边的相关信息（如权值等），对于无向图其邻",
    "head": "邻接矩阵",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "52"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长简单路径上的边数，其核心性质包括非空树的高度大于等于0，并且对于任意一棵非空树",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构，顶点集合中的元素称为顶点，顶点间的关系集合描述了顶点之间的连接方式",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "线性表的核心性质是具有唯一的表头元素、唯一的表尾元素且除表头和表尾元素外每个元素有且仅有一个直接前驱和一个直接后继",
    "head": "线性表",
    "tail": "表头",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树的层次结构和深度，决定了树中节点之间的最长距离，",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树遍历是按照特定规则访问二叉树中所有节点，前序遍历先访问根节点再递归访问左子树和右子树，中序遍历先递归访问左子",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它由顶点表和边表组成，顶点表中存储图的顶点信息，边表中存储与每个顶点相邻接的顶点",
    "head": "邻接表",
    "tail": "图的顶点",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中每条有向边是一个有序对，由两个顶点构成，表示从一个顶点到另一个顶点",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其特点包括：叶子节点只能出现在最下层和次下层，且最下层的叶子节点集中在树的左部，若设",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "线性表是具有相同数据类型的n个数据元素的有限序列，其中n≥0，当n = 0时为空表，每个元素在序列中都有唯一的前驱",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数或节点数，它反映了树的层次结构和深度，不同类型的树其高度特点",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，且树中所有节点的高度是其后代节点的最大高度加1，根节点高度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其操作主要包括入栈将元素添加到栈顶、出栈从栈顶移除元素以及获取栈顶元素等，并且栈在内存",
    "head": "入栈",
    "tail": "出栈",
    "head_offset": "21",
    "tail_offset": "32"
  },
  {
    "sentence": "完全二叉树是一种特殊的二叉树，其特点是除最后一层外，每一层上的节点数均达到最大值，且最后一层上的节点都集中在该层最",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "选择排序每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找是从数据序列的一端开始，依次将每个数据元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "存储结构的核心性质是数据元素及其关系在计算机内存中的表示方式以及如何通过这种表示来高效地进行数据的存储、访问和修改",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若存在从顶点vi到顶点vj的一条路径，则称vi是vj的前驱，vj是vi",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "38"
  },
  {
    "sentence": "二叉搜索树的特点是对于树中的每个节点，其左子树中的所有节点值均小于该节点值，右子树中的所有节点值均大于该节点值，且",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或遍历完整个线性表的查找方法",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长简单路径上的边数或节点数所表示的数值，体现了树在垂直方向上的深度和层次结构特征",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中从根节点到最远叶子节点的最长简单路径上的边数就是树的高度树中不同节点到根节点的距离可能不同但树的高度是固定值且",
    "head": "根节点",
    "tail": "叶子节点",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在表的一端进行插入操作（队尾），而在另一端进行删除操作（队头），遵循先进先出",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点下方的节点，具有相对于父节点的特定位置关系且可能存在多个子节点共同构成树的分支结构",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "树中所有结点的度的最大值就是树的度，其核心特征在于它反映了树中各结点所拥有子树数目的最大情况决定着树的复杂程度且与",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "14",
    "tail_offset": "37"
  },
  {
    "sentence": "图的核心性质是由顶点集合及顶点间的边的集合所构成，顶点之间通过边相连，能直观地表示事物之间的关系，包括有向图和无向",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "19"
  },
  {
    "sentence": "树是一种非线性的数据结构，它有一个根节点，根节点有零个或多个子节点，每个子节点又可以有零个或多个子节点，且除根节点",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "17",
    "tail_offset": "21"
  },
  {
    "sentence": "选择排序每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或遍历完整个线性表的查找方法",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "有向图是由顶点集合及顶点间的有向边构成的一种图，其边是有方向的，从一个顶点指向另一个顶点，顶点之间的关系具有方向性",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "选择排序每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "子节点的核心性质是其在树形结构中直接隶属于某个父节点且具有与父节点及其他兄弟节点特定的关联关系从而构成树形层次结构",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "树的节点的核心性质是每个节点有零个或多个子节点，且有一个被称为根的特殊节点，除根节点外的每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "比较排序是基于元素间比较操作来确定元素间相对次序从而实现排序的排序方法其核心性质是排序结果仅依赖于元素间的比较关系",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "有向图是由顶点集和有向边集组成的一种图结构，其中有向边是从一个顶点指向另一个顶点的有序对，顶点之间的连接具有方向性",
    "head": "有向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树的深度是从根节点开始，沿最长路径到最远叶节点所经过的节点数，其核心特征为反映了树中节点层次的最大数量以及从根到叶",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "冒泡排序是一种比较相邻元素大小，将较大（或较小）元素逐步交换到右侧（或左侧），重复此过程直至整个数组有序的排序算法",
    "head": "冒泡排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "48"
  },
  {
    "sentence": "树的节点有一个根节点，根节点没有前驱节点，除根节点外每个节点有且仅有一个前驱节点，每个节点可以有零个或多个后继节点",
    "head": "树的节点",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，其核心特征包括以链表形式存储图中每个顶点的邻接顶点，对于有n个顶点和e条边的图，",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "在图论中回路是指在一个图中从某一顶点出发，沿着边连续移动，最终回到该顶点且路径中除起点和终点外其他顶点不重复经过的",
    "head": "回路",
    "tail": "路径",
    "head_offset": "4",
    "tail_offset": "37"
  },
  {
    "sentence": "树的节点具有唯一的根节点，每个非根节点有且仅有一个父节点，除根节点外的其他节点可以有零个或多个子节点，并且从根节点",
    "head": "树的节点",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆排序是一种基于堆这种数据结构，通过构建初始堆、不断将堆顶元素与末尾元素交换并调整堆来实现对一组数据进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历是按照某种特定顺序访问二叉树中每个节点一次且仅一次，先序遍历是先访问根节点再递归访问左子树和右子树，中序",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或到达线性表末尾的查找方法",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是一种有序数据集合，其中每个元素具有相同的数据类型，通过下标可对元素进行唯一标识和访问，且在内存中存储位置连续",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "比较排序是基于元素之间的比较来确定元素的相对顺序从而进行排序的算法，其核心特征是通过比较元素大小来逐步构建有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "根节点是树结构中没有父节点的唯一节点，它处于树的最顶端，是树整体结构的起始点，所有其他节点都直接或间接连接于根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数组是一种有序数据集合，其中所有元素具有相同的数据类型，并且可以通过一个统一的数组名和下标来唯一标识和访问每个元素",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配元素或遍历完整个线性表的查找方法",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构所具有的父节点大于或等于子节点（大顶堆）或父节点小于或等于子节点（小顶堆）的性质进行排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "在树形结构中，若存在一个节点A，有另一个节点B直接连接到A且B到根节点的路径长度比A到根节点的路径长度多1，则节点",
    "head": "根节点",
    "tail": "路径",
    "head_offset": "32",
    "tail_offset": "36"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其操作主要包括入栈将元素放入栈顶、出栈从栈顶取出元素、查看栈顶元素且栈顶指针随元素进出",
    "head": "入栈",
    "tail": "入栈",
    "head_offset": "21",
    "tail_offset": "27"
  },
  {
    "sentence": "选择排序每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或遍历完整个线性表的查找方法",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树结构中直接被某一节点所连接的下一层节点，它与父节点存在明确的连接关系，一个父节点可以有零个或多个子节点，",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "图的顶点是图结构中的基本数据元素，通常用来表示某个具体的实体或对象，在图中通过边与其他顶点相连接以构成图的结构关系",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），其边或弧的序列依次连接这些顶点且满足一定的",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "树中各节点度的最大值就是树的度树的度反映了树中节点分支情况的最大程度不同类型的树其度具有不同特点且度的大小影响树的",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "12",
    "tail_offset": "15"
  },
  {
    "sentence": "子节点是树结构或图结构中直接与某一节点相连且处于该节点下方层次的节点，具有与父节点特定的关联关系并处于特定层级位置",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "38"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线段或弧，具有方向性或无方向性，且边的集合定义了图的结构，其数量和连接关系决定了图的连通",
    "head": "图的边",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表，其插入操作称为进栈或入栈，删除操作称为出栈或退栈，遵循后进先出的",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "图的顶点是图结构中的基本数据元素，用于表示图中的节点，具有标识图中各个对象的作用且可以与其他顶点通过边建立关联关系",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其操作主要包括入栈将元素添加到栈顶、出栈从栈顶移除元素以及获取栈顶元素等，并且栈在内存",
    "head": "入栈",
    "tail": "出栈",
    "head_offset": "21",
    "tail_offset": "32"
  },
  {
    "sentence": "邻接表中顶点表的每个节点包含顶点信息和指向边表的头指针，边表的每个节点包含邻接顶点信息和指向下一条边的指针，它可以",
    "head": "邻接表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "二叉树遍历是按照一定规则对二叉树的节点进行访问，前序遍历先访问根节点再递归访问左子树和右子树，中序遍历先递归访问左",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其核心性质为元素的插入和删除操作都在栈顶进行，新元素入栈后成为栈顶元素，栈顶元素始终是",
    "head": "插入",
    "tail": "删除",
    "head_offset": "23",
    "tail_offset": "26"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长路径上的边数或节点数所决定的数值，它反映了树的层次结构深度，不同类型的树高度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其操作主要包括入栈将元素添加到栈顶、出栈从栈顶移除元素以及获取栈顶元素，且栈具有特定的",
    "head": "入栈",
    "tail": "出栈",
    "head_offset": "21",
    "tail_offset": "32"
  },
  {
    "sentence": "二叉搜索树的核心特征是对于树中的每个节点，其左子树中的所有节点值均小于该节点值，右子树中的所有节点值均大于该节点值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次逐个将数据元素与给定值进行比较，直到找到匹配元素或遍历完整个序列的查找方法",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "23"
  },
  {
    "sentence": "双向链表每个节点包含两个指针分别指向前一个节点和后一个节点从而实现双向遍历并且可以方便地在链表中进行插入删除等操作",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "算法效率是指算法执行所需要的时间和空间资源的多少，包括时间复杂度和空间复杂度来衡量算法在时间和空间上的运行效率情况",
    "head": "时间复杂度",
    "tail": "空间复杂度",
    "head_offset": "27",
    "tail_offset": "33"
  },
  {
    "sentence": "循环链表的核心特征是其尾节点的指针域指向头节点，使得链表形成一个环形结构，从链表中的任意节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "穷举法是对问题所有可能的情况进行逐一列举和检验，以找出符合条件的解，其核心性质是通过全面遍历所有可能情况来求解问题",
    "head": "穷举法",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "44"
  },
  {
    "sentence": "操作效率是指在数据结构中进行特定操作（如插入、删除、查找等）时所花费的时间或资源的多少来衡量的该操作执行的快慢程度",
    "head": "操作效率",
    "tail": "插入",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "数组是由相同类型的数据元素组成的有限序列，具有顺序存储、元素类型一致、有固定长度以及通过下标唯一标识元素等核心性质",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "图的核心性质包括顶点集合和边集合的定义，顶点之间通过边相连，边可以有方向或无方向，图可以分为有向图和无向图，并且图",
    "head": "集合",
    "tail": "集合",
    "head_offset": "10",
    "tail_offset": "14"
  },
  {
    "sentence": "树的节点具有这样的核心性质：每个节点有零个或多个子节点，且有且仅有一个根节点，除根节点外每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若图为有向图路径具有方向性，若为无向图路径无方向性且路径上顶点不重复，",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得链表形成一个环形结构，从而可以从链表中的任意节点开始遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树的节点具有这样的核心性质：每个节点有零个或多个子节点，有且仅有一个根节点，除根节点外的每个节点有且仅有一个父节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "简单排序是对数据序列进行排序的方法，其核心性质包括比较元素大小并根据比较结果交换元素位置以逐步将序列调整为有序状态",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数据的逻辑结构的核心性质是数据元素之间的逻辑关系，它独立于数据的存储方式，并且决定了数据在计算机中的组织和处理方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "13"
  },
  {
    "sentence": "回溯法是一种通过逐步构建问题的解，并在发现当前部分解无法导致可行完整解时进行回溯以重新选择路径来求解问题的算法策略",
    "head": "回溯法",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "45"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它由顶点表和边表组成，顶点表中存储图的顶点信息，边表中存储与每个顶点相邻接的顶点",
    "head": "邻接表",
    "tail": "图的顶点",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "选择排序每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "操作效率是指在数据结构的各种操作中，衡量完成特定操作所花费时间或资源的多少以及与其他相关操作效率对比情况的一种指标",
    "head": "操作效率",
    "tail": "操作效率",
    "head_offset": "0",
    "tail_offset": "44"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，且与数据的运算无关，仅关注数据元素之间的关联方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "穷举法是对问题所有可能的情况进行逐一列举和检验，以找出满足条件的解，其核心性质是通过全面遍历所有可能情况来求解问题",
    "head": "穷举法",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "44"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其每个结点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构所具有的父节点大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的性质，将待排序数组构建",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构所设计的一种排序算法，它将待排序数组构建成一个堆，通过不断取出堆顶元素并调整堆来实现排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质为对于一个具有n个顶点的图，邻接矩阵是一个n×n的方阵，矩阵中元素的值",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "36"
  },
  {
    "sentence": "树的核心特征是具有一个根节点，且根节点有零个或多个子节点，每个子节点又可以有零个或多个子节点，以此类推，形成层次分明",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "11",
    "tail_offset": "16"
  },
  {
    "sentence": "根节点是树结构中的起始节点，没有父节点，是整个树结构的顶端节点，它处于树的最上层，是树中所有其他节点的祖先，从根节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点间通过边相连，边可以具有方向形成有向图，也可以无方向形成无向图，图可用于表示",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "抽象数据类型是指一个数学模型以及定义在该模型上的一组操作，它强调数据的逻辑结构和操作的语义，而不依赖于具体的实现细节",
    "head": "抽象数据类型",
    "tail": "逻辑结构",
    "head_offset": "0",
    "tail_offset": "35"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值都小于该节点的值，且右子树中的所有节点的值都大于该节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树是一种非线性数据结构，它有一个根节点，根节点可以有零个或多个子节点，每个子节点又可以有零个或多个子节点，以此类推，",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "16",
    "tail_offset": "20"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，权重值用于表示边的某种属性或代价，图中的顶点通过带权重的边相互连接",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质为对于有向图或无向图，矩阵中的元素表示对应顶点之间是否存在边，若存在则为",
    "head": "邻接矩阵",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "25"
  },
  {
    "sentence": "树中从根节点到最远叶子节点的最长路径上的节点数就是树的深度树中每个节点的深度是其到根节点路径上的节点数总和根节点深度",
    "head": "根节点",
    "tail": "叶子节点",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的高度是从根节点开始，到最远叶子节点所经过的最长路径上的边数或节点数（取决于具体定义方式），其核心特征为体现从根到",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉树每个节点最多有两棵子树，并且子树有左右之分，其次序不能颠倒，它可以为空树，空树没有任何节点，非空二叉树由根节点",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序的核心性质是堆中每个节点的值都大于或等于其子节点的值（大顶堆）或小于或等于其子节点的值（小顶堆），并且堆是一种",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "54"
  },
  {
    "sentence": "邻接矩阵是用来表示图的一种矩阵，其中行和列对应图的顶点，矩阵元素的值表示对应顶点之间是否有边相连，若有边相连则值为1",
    "head": "邻接矩阵",
    "tail": "图的顶点",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "二分查找是一种在有序数组中通过不断将区间缩小一半来快速定位目标元素的查找算法其特点是查找效率高平均时间复杂度为对数级",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的高度是从根节点开始，到最远叶子节点经过的最长简单路径上的边数，其核心特征为是从根节点到叶子节点最长路径的边数衡量",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "加权图的核心性质是图中每条边都被赋予一个权重值，该权重值用于表示边的某种属性或代价等，不同边的权重值可不同，基于这些",
    "head": "加权图",
    "tail": "边的权重",
    "head_offset": "0",
    "tail_offset": "45"
  },
  {
    "sentence": "子节点是树结构或图结构中直接连接到某个父节点的节点，其特点的核心特征包括：在层次结构中处于父节点的下一层级，与父节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "邻接矩阵是用一个二维数组来表示图中顶点之间邻接关系的矩阵，其中矩阵元素的值表示对应顶点之间是否有边相连及边的相关信息",
    "head": "邻接矩阵",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "线性表是具有相同数据类型的n个数据元素的有限序列，有唯一的表头元素、唯一的表尾元素，且除表头和表尾元素外每个元素有且",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "顺序查找的核心性质是从数据序列的第一个元素开始，依次逐个与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个序列",
    "head": "顺序查找",
    "tail": "查找",
    "head_offset": "0",
    "tail_offset": "30"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "单链表是一种链式存储的线性表，每个节点包含数据域和指针域，指针域指向下一个节点，通过头节点可依次访问链表中的各个节点",
    "head": "单链表",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索策略，从根节点出发搜索解空间树，当探索到某一节点时",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质包括对于有向图，矩阵中元素若表示从顶点i到顶点j有边，则对应位置为1否则",
    "head": "邻接矩阵",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "26"
  },
  {
    "sentence": "数组是由相同类型的数据元素按一定顺序排列组成的有限序列，这些元素存储在连续的内存单元中，可通过下标来唯一标识每个元素",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点所经过的最长简单路径上的节点数，它反映了树在垂直方向上的层次结构特征，体现了树中节点",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理存储位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "父节点是在树形结构中，有其他节点直接连接在其下方并以其为直接前驱的节点，这些连接在其下方的节点即为该父节点的子节点，",
    "head": "父节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "50"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或者遍历完整个线性表的查找方法",
    "head": "查找",
    "tail": "线性表",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "比较排序是基于元素之间的比较来确定元素的相对顺序从而实现排序的排序算法其核心特征是通过比较元素大小来逐步构建有序序列",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "父节点是在树形结构中直接有子节点与之相连且处于较高层次或位置能对其下一层子节点起到统领、关联或作为其源头等作用的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "在图论中回路是指在图中从一个顶点出发，沿着边经过一系列顶点后又回到该起始顶点且路径中各边互不相同的路径（若允许边重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "4",
    "tail_offset": "39"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "递归基础的核心特征是存在一个或多个明确的终止条件，当满足这些条件时递归过程不再继续调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长简单路径上的边数，体现了树在垂直方向上的层次数量，反映了树的结构复杂程度，不同",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的节点具有一个父节点（根节点无父节点），可以有零个或多个子节点，每个节点通过边与父节点和子节点相连，且节点之间具有",
    "head": "树的节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历是按照某种特定顺序访问二叉树中每个节点一次且仅一次，包括先序遍历（先访问根节点，再递归访问左子树和右子树）",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉搜索树的核心性质是对于树中的每个节点，其左子树中的所有节点值都小于该节点值，其右子树中的所有节点值都大于该节点值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "归并排序是一种分治算法，其特点是将数组分成两个子数组，分别对两个子数组进行排序，然后将排序好的子数组合并成一个有序的",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "完全二叉树是这样一种二叉树，除最后一层外，每一层上的节点数均达到最大值，并且最后一层上要么是全有节点，要么是从左至右",
    "head": "完全二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "广度优先搜索是一种图搜索算法，其核心性质是按照层次依次访问节点，先访问距离起始节点较近的节点，直到遍历完所有可达节点",
    "head": "广度优先搜索",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "子节点是树结构中相对于父节点而言，直接连接在父节点之下的节点，具有与父节点存在直接层级关联且处于较低层级这一核心特征",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值均小于该节点的值，且右子树中的所有节点的值均大于该节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树的节点有一个根节点，除根节点外每个节点有且仅有一个父节点，节点可以有零个或多个子节点，并且节点是构成树型结构的基本",
    "head": "树的节点",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "递归基础的核心特征是存在一个或多个明确的终止条件，当满足这些条件时递归过程不再继续调用自身而是直接返回一个确定的结果",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其核心性质为元素的插入和删除操作都在栈顶进行，新元素总是被放置在栈顶，而最先进入栈的元素",
    "head": "插入",
    "tail": "删除",
    "head_offset": "23",
    "tail_offset": "26"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的深度的核心特征是从根节点到最远叶子节点所经过的最长路径上的节点数，它反映了树在纵向方向上的层次数量和结构复杂程度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉树的核心特征是每个节点最多有两个子节点，即左子节点和右子节点，并且存在唯一的根节点，二叉树可以为空树，若不为空树",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索策略，从根节点出发搜索解空间树，当探索到某一节点时",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质为若图中有n个顶点，则邻接矩阵是一个n×n的方阵，矩阵中元素的值表示对应",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "根节点是树结构中没有父节点的唯一节点，处于树的最顶端位置，是树的起始点，它在层次结构中具有特殊地位，是整个树结构数据",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "图的边是连接图中两个顶点的线表示顶点之间的关系其具有方向或无方向对于有向图边是有方向的从一个顶点指向另一个顶点对于无",
    "head": "图的边",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "34"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，所有其他节点都直接或间接连接到根节点，它在树的层次结构中",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树的层次结构深度以及节点分布的广度，体现了树中节点在",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的深度的核心特征是从根节点到最远叶子节点所经过的最长路径上的节点数，它反映了树在垂直方向上的层次数量，体现了树结构",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长简单路径上的节点数其核心性质为树中任意节点的深度是从根节点到该节点的路径长度且",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长简单路径上的节点数，它反映了树的层次结构和节点分布情况，体现了树在垂直方向上的",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "存储结构的核心特征是数据元素及其关系在计算机存储器中的表示方式以及如何通过这种表示来实现对数据的高效存储、访问和管理",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "循环链表是一种特殊的链表，其尾节点的指针域指向头节点，从而形成一个环形结构，使得链表中的节点可以依次遍历且能循环访问",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树的核心性质是除最后一层无任何子节点外，每一层上的所有结点都有两个子结点，并且最后一层的叶子节点是从左到右依次",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "父节点是在树形结构中直接拥有子节点的节点，它处于比子节点更高一层的层级关系中，对其下的子节点具有一定的关联和支配作用",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "有向图的核心特征是其边具有方向性，即从一个顶点指向另一个顶点，顶点之间的连接是单向的，不同于无向图中边没有方向的情况",
    "head": "有向图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "46"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理存储位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，仅考虑数据元素之间的抽象关系而不涉及具体的存储方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值表示边的某种属性或代价，用于在图的各种算法和应用中衡量边的",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任何一个节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "在树形结构中，若存在一个节点A，有另一个节点B通过特定的关系（如父子关系的连接规则）与A相连，且B到根节点的路径长度",
    "head": "根节点",
    "tail": "路径",
    "head_offset": "50",
    "tail_offset": "54"
  },
  {
    "sentence": "路径是在图结构或树结构等数据结构中从一个顶点到另一个顶点的顶点序列（对于图）或从根节点到某个节点的节点序列（对于树）",
    "head": "路径",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "40"
  },
  {
    "sentence": "插入排序的核心特征是将未排序数据插入到已排序序列的合适位置，通过依次对每个元素进行这样的操作，逐步将整个数组变为有序",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "归并排序是一种分治算法，其核心性质是将一个数组分成两个子数组，分别对这两个子数组进行排序，然后将排序好的子数组合并成",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的深度是从根节点开始自顶向下逐层累加，根节点深度为0，到最远叶子节点所经过的层次数，它反映了树中节点的最大层次距离",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树的深度是从根节点开始自顶向下逐层累加直至叶节点所经过的最大层数，其核心特征在于体现了树中节点从根到叶的最长路径上所",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图由顶点集合及顶点间的关系集合组成，顶点之间通过边相连，边可以具有方向形成有向图，也可以无方向形成无向图，图中顶点的",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "栈是一种后进先出的数据结构，其操作主要包括入栈将元素添加到栈顶、出栈从栈顶移除元素以及获取栈顶元素等，具有数据存储和",
    "head": "入栈",
    "tail": "出栈",
    "head_offset": "21",
    "tail_offset": "32"
  },
  {
    "sentence": "线性查找是从数据序列的第一个元素开始，依次将每个元素与要查找的目标值进行比较，直到找到目标值或遍历完整个数据序列为止",
    "head": "查找",
    "tail": "查找",
    "head_offset": "2",
    "tail_offset": "28"
  },
  {
    "sentence": "根节点是树结构中的起始节点，没有父节点，它位于树的顶部，是整个树结构的入口点，通过它可以访问和遍历树的其他节点，是树",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值都小于该节点的值，且右子树中的所有节点的值都大于该节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或到达线性表的另一端的查找方法",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索策略，从根节点出发搜索解空间树，当探索到某一节点时",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，具有有向图和无向图中路径的不同方向性特点且在不同图结构中有其特定的表示和",
    "head": "路径",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值均小于该节点的值，且右子树中的所有节点的值均大于该节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次将每个数据元素与目标值进行比较，直到找到目标值或遍历完整个数据序列的查找方法",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "23"
  },
  {
    "sentence": "二叉搜索树中，每个节点的左子树中的所有节点的值均小于该节点的值，右子树中的所有节点的值均大于该节点的值，且左、右子树",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值用于表示边的某种属性或成本等，不同边的权重值可不同，且权重",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "无向图是一种由顶点集合以及顶点之间的边集合组成的图结构，其中边是没有方向的，即顶点对(u, v)和顶点对(v, u)",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "有向图是一种由顶点集合以及顶点之间的有向边集合组成的图结构，其中每条有向边都具有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，仅考虑数据元素之间的抽象关系而不涉及具体的存储方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "队列是一种特殊的线性表，其特点是只允许在一端进行插入操作（队尾），而在另一端进行删除操作（队头），遵循先进先出的原则",
    "head": "队列",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数组是由相同类型的数据元素按一定顺序排列而成的有限序列，这些元素存储在连续的内存空间中，可通过下标来唯一标识每个元素",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "线性查找是从数据序列的第一个元素开始，依次将每个元素与要查找的值进行比较，直到找到该值或遍历完整个序列的一种查找算法",
    "head": "查找",
    "tail": "查找",
    "head_offset": "2",
    "tail_offset": "28"
  },
  {
    "sentence": "堆是一种特殊的数据结构，它是一个完全二叉树，并且满足父节点的值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值",
    "head": "完全二叉树",
    "tail": "父节点",
    "head_offset": "16",
    "tail_offset": "26"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将表中元素与给定值进行比较，若找到则返回该元素的位置，若遍历完整个表仍未找到则返回",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质包括若图中有n个顶点则邻接矩阵是n阶方阵，矩阵元素表示顶点间是否有边相连",
    "head": "邻接矩阵",
    "tail": "邻接矩阵",
    "head_offset": "0",
    "tail_offset": "33"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，仅考虑数据元素之间的抽象关系而不涉及具体的存储方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "简单排序是对数据序列进行比较和交换等操作，通过多次逐步调整使数据有序，具有操作相对简单直观、时间复杂度一般较高等特点",
    "head": "简单排序",
    "tail": "时间复杂度",
    "head_offset": "0",
    "tail_offset": "46"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值表示边的某种属性或代价，用于在图的各种操作和算法中体现边的",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "邻接矩阵是表示图的一种方式，其特点的核心性质包括：对于有向图，矩阵中元素若对应边存在则为1否则为0，行列分别对应顶点",
    "head": "邻接矩阵",
    "tail": "有向图",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "有向图是一种由顶点集合以及顶点之间的有向边集合组成的图结构，其中每条有向边都具有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "满二叉树是一种二叉树，其每一层的节点数都达到了最大值，即除叶子节点外每个节点都有两个子节点，叶子节点都在同一层，并且",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，其特点包括不同类型树的高度有差异且与树的结构和节点分布等相关",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "无向图是一种由顶点集合及顶点间的边集合组成的图结构，其中边是没有方向的，顶点之间通过边相互连接且每条边都可以双向遍历",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径上的节点数，体现了树在垂直方向上的延伸程度，不同类型的树其高度特点不同，完全",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树是一种非线性的数据结构，它有一个根节点，且每个节点有零个或多个子节点，子节点之间形成层次关系，具有递归性和分支结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "17",
    "tail_offset": "32"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的查找是指在给定的树结构中，根据特定的条件或目标值，通过特定的遍历算法在树的节点中进行搜索以确定该值是否存在以及其",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "32"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值用于表示边的某种属性或成本等，不同的边其权重值可以不同且图",
    "head": "加权图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性查找是从数据序列的起始位置开始，依次逐个将数据元素与目标值进行比较，直到找到目标值或遍历完整个数据序列的查找方法",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "23"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长简单路径上的节点数决定的，反映了树的层次结构以及从根到叶节点所经过的最大层数，",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理存储位置上也相邻的数据结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "20",
    "tail_offset": "25"
  },
  {
    "sentence": "树的深度是从根节点开始自顶向下到最远叶子节点所经过的最长路径上的节点数，反映了树在垂直方向上的层次数量，体现了树结构",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树结构中直接被父节点包含且与其他同级子节点共同构成树的层次关系、具有特定的父-子关联并在树的遍历等操作中依据",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "递归基础具有明确的终止条件，是递归算法中最简单、最基本的情况，在此情况下递归直接返回一个确定的结果而不再继续调用自身",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将表中元素与给定值进行比较，若找到则返回该元素的位置，若遍历完整个表仍未找到则返回",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是一种基于堆这种数据结构进行排序的算法，它将待排序数据构建成一个堆，通过不断取出堆顶元素并调整堆结构来实现排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树是一种非线性数据结构，它有一个根节点，且根节点可以有零个或多个子节点，每个子节点又可以有零个或多个子节点，以此类推",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "16",
    "tail_offset": "21"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "无向图的核心特征是由顶点集合以及顶点之间的边集合组成，且边是没有方向的，即顶点之间的连接关系是对称的，从顶点A到顶点",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "父节点是树结构中除根节点外有且仅有一个直接前驱节点的节点，它可以有零个或多个子节点，通过它可以访问到其直接后继节点即",
    "head": "父节点",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构，顶点集合中的元素称为顶点，关系集合中的元素是顶点对表示顶点之间的关系",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "哈希表是一种数据结构它通过哈希函数将键映射到特定位置来存储和检索数据以实现快速的数据访问平均情况下时间复杂度接近常数",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "邻接矩阵是用一个二维数组来表示图中顶点之间相邻关系的矩阵，若图中有n个顶点，则邻接矩阵是一个n×n的矩阵，矩阵中元素",
    "head": "邻接矩阵",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回路是指在图中从一个顶点出发，沿着边连续移动，经过若干个顶点后又回到起始顶点的路径且路径中除起始顶点外其他顶点不重复",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "39"
  },
  {
    "sentence": "双向链表是一种线性数据结构，每个节点除了包含数据域外还包含两个指针，分别指向前一个节点和后一个节点，从而实现双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，使得链表形成一个环，从链表中的任意节点出发都可以遍历到链表中的其他节点",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "数组是一种有序的数据集合，其中的元素具有相同的数据类型，通过下标来访问和修改元素，并且数组的大小在创建后通常是固定的",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "路径是图中从一个顶点到另一个顶点的顶点序列，若存在这样的序列，其中顶点之间通过边相连，该序列即为这两个顶点之间的路径",
    "head": "路径",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "56"
  },
  {
    "sentence": "穷举法通过对问题所有可能的情况进行逐一列举和检验，从而找出符合条件的解，其核心性质是对所有可能情况进行全面遍历以求解",
    "head": "穷举法",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "53"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，对于图中的每个顶点，都有一个链表与之对应，链表中的节点表示与该顶点相邻接的其他顶点",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "31"
  },
  {
    "sentence": "树中各节点度的最大值就是树的度，它反映了树中节点分支情况的一个关键特性，树的度决定了树的结构复杂程度以及在相关算法和",
    "head": "树的度",
    "tail": "树的度",
    "head_offset": "12",
    "tail_offset": "36"
  },
  {
    "sentence": "操作效率是指在数据结构中进行特定操作（如插入、删除、查找等）时所花费的时间或资源与该操作的规模（如数据量大小等）之间",
    "head": "操作效率",
    "tail": "插入",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "抽象数据类型具有数据抽象和行为抽象，数据抽象指用数据类型描述数据对象集，行为抽象指用一组操作描述数据对象上的抽象运算",
    "head": "抽象数据类型",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "24"
  },
  {
    "sentence": "无向图是一个二元组，其中一个元素是由顶点组成的非空有限集合，另一个元素是由顶点的无序对构成的边集合，且边集合中的元素",
    "head": "无向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值均小于该节点的值，且右子树中的所有节点的值均大于该节点的值",
    "head": "二叉搜索树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "子节点是树结构中与父节点直接相连且处于较低层次的节点，它具有与父节点特定的关联关系，在数据组织和操作中扮演着相应角色",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "线性查找是从数据序列的第一个元素开始，依次将每个元素与要查找的值进行比较，直到找到该值或遍历完整个序列为止的查找方法",
    "head": "查找",
    "tail": "查找",
    "head_offset": "2",
    "tail_offset": "28"
  },
  {
    "sentence": "邻接矩阵是用一个二维数组来表示图中顶点之间邻接关系的矩阵，其中矩阵元素的值表示对应顶点之间是否有边相连及边的相关信息",
    "head": "邻接矩阵",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "父节点是树结构中直接位于某一节点之上的节点，它具有指向子节点的连接关系，是子节点的直接前驱，在树的层次结构中处于比子",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "有向图是一种由顶点集合以及顶点间的有向边集合组成的数据结构，其中每条有向边都具有明确的方向，从一个顶点指向另一个顶点",
    "head": "有向图",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "根节点是树结构中没有前驱节点且位于树顶端的起始节点，它是整个树结构中层次最高的节点，其他节点都直接或间接连接在它之下",
    "head": "根节点",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻的顶点及其相关信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回溯法基础的定义的核心性质是在问题的解空间树中，按深度优先策略从根节点出发搜索解空间树，搜索至解空间树的任一节点时，",
    "head": "回溯法",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "32"
  },
  {
    "sentence": "数据的物理结构的特点的核心性质包括数据元素在计算机存储空间中的存储方式以及数据元素之间的逻辑关系在计算机中的表示形式",
    "head": "物理结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "17"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "递归基础是递归算法中最简单的情况，通常是问题的最小规模或最基本形式，它直接返回一个已知的结果而不进行进一步的递归调用",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根节点出发搜索解空间树，当探索到某一节点",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序查找是从数据序列的第一个元素开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个序列为止",
    "head": "顺序查找",
    "tail": "查找",
    "head_offset": "0",
    "tail_offset": "28"
  },
  {
    "sentence": "二分查找是一种在有序数组中通过不断将区间减半来查找特定元素，具有效率较高、平均时间复杂度为对数级但要求数组有序的特点",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，并且与数据的运算无关，只关注数据元素之间的关联方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "邻接表的核心特征是用链表来表示图中顶点的邻接关系，对于图中的每个顶点，都有一个链表与之对应，链表中存储了与该顶点相邻",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉树遍历是按照某种特定顺序访问二叉树中每个节点一次且仅一次的操作方式，分为前序遍历（根左右）、中序遍历（左根右）、",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树遍历的核心特征是通过特定顺序访问二叉树中的每个节点，先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树的查找是在树结构中按照特定规则寻找特定元素，其核心性质包括若树为空则查找失败，若树非空则将根节点与待查找元素比较，",
    "head": "查找",
    "tail": "查找",
    "head_offset": "2",
    "tail_offset": "35"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树的层次结构深度及节点分布范围等特点，体现了树在垂直",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "堆排序是一种基于堆这种数据结构进行排序的算法，它将待排序数据构建成一个堆，通过不断取出堆顶元素并调整堆结构来实现排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完",
    "head": "选择排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树",
    "head": "平衡二叉树",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任何一个节点出发都可以遍历整个链表",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "有向图的核心特征是其边具有方向性，即从一个顶点指向另一个顶点，这种方向性决定了图中顶点之间的关系是单向的，与无向图边",
    "head": "有向图",
    "tail": "无向图",
    "head_offset": "0",
    "tail_offset": "54"
  },
  {
    "sentence": "无向图是一种图结构，由顶点集合和边集合组成，其中边是没有方向的，即边所连接的两个顶点之间的关系是对称的，不存在从一个",
    "head": "无向图",
    "tail": "图",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回溯法基础的特点是按深度优先策略，从根节点出发搜索解空间树，在搜索至某一节点时先判断该节点是否包含问题的解，若不包含",
    "head": "回溯法",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，所有其他节点都直接或间接连接到根节点，在树的遍历等操作中",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "顺序查找是从线性表的一端开始，依次将表中元素与给定值进行比较，若找到则返回该元素的位置，若遍历完整个表仍未找到则返回",
    "head": "顺序查找",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索策略，从根节点出发搜索解空间树，当探索到某一节点时",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "27"
  },
  {
    "sentence": "广度优先搜索是一种从起始节点开始，按照层次依次访问节点，先访问距离起始节点近的节点，直至遍历完所有可达节点的搜索算法",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "树是一种非线性的数据结构，它有一个根节点，根节点可以有零个或多个子节点，每个子节点又可以有零个或多个子节点，以此类推，",
    "head": "根节点",
    "tail": "根节点",
    "head_offset": "17",
    "tail_offset": "21"
  },
  {
    "sentence": "若它的右子树不空，则右子树上",
    "head": "右子树",
    "tail": "右子树",
    "head_offset": "3",
    "tail_offset": "10"
  },
  {
    "sentence": "树中没有子节点的节点即叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树每个节点最多有两个子节点",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有子节点的节点即叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "11"
  },
  {
    "sentence": "线性表是n个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点的核心特征是没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有子节点的节点即叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树每个节点最多有两个子节点",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数组是相同类型数据元素的有序集合",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数组是相同类型数据元素的有序集合",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有子节点的节点就是叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是相同类型数据元素的有序集合",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中没有子节点的节点就是叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有前驱节点的节点即为根节点",
    "head": "前驱节点",
    "tail": "根节点",
    "head_offset": "4",
    "tail_offset": "13"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "线性表数据元素一对一相邻且有顺序",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "数组是相同类型数据元素的有序集合",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是相同类型数据元素的有序集合",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有子节点的节点就是叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有子节点的节点就是叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "树中没有子节点的节点就是叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数组是相同类型数据元素的有序集合",
    "head": "数组",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "回路是图中一条起点和终点相同的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是树中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "单链表通过节点指针依次相连存储数据",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "若任意节点的右子树不空，则右子树上",
    "head": "右子树",
    "tail": "右子树",
    "head_offset": "6",
    "tail_offset": "13"
  },
  {
    "sentence": "选择基准元素分治排序使数组快速有序",
    "head": "排序",
    "tail": "数组",
    "head_offset": "8",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是一棵树中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "线性表是n个数据元素构成的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是一棵树中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是一棵树中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是一棵树中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是一棵树中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "交换排序通过比较交换元素位置实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "树的节点包含数据且有指向子节点的链接",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "数组是存储相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的一种算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中数据元素及指向子树的分支构成节点",
    "head": "数据元素",
    "tail": "子树",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "数组是存储相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性表是零个或多个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "选择基准分区递归排序以达快速有序效果",
    "head": "递归",
    "tail": "排序",
    "head_offset": "6",
    "tail_offset": "8"
  },
  {
    "sentence": "树结构中没有子节点的节点就是叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "6",
    "tail_offset": "14"
  },
  {
    "sentence": "线性表是零个或多个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性表是零个或多个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "线性表是零个或多个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "邻接表通过链表存储顶点及邻接顶点信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "线性表是数据元素按顺序排列的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中数据元素及指向子树的分支构成节点",
    "head": "数据元素",
    "tail": "子树",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "树的节点包含数据且有指向子节点的链接",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的一种算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性表是零个或多个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的高效算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是存储相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "数组是具有相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "数组是具有相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树中数据元素及指向子树的分支构成节点",
    "head": "数据元素",
    "tail": "子树",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "回路是从一点出发又回到该点的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "线性表是数据元素一对一排列的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的一种算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的高效算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是具有相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树的子树有左右之分，次序不能颠倒",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "数组是具有相同数据类型元素的有序集合",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的一种算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆排序是利用堆结构特性进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "根节点是树形结构起始点无父节点有子节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树是一种分层数据结构包含根节点和子节点",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "线性结构数据元素间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "图中任意两点都存在路径相连的图是连通图",
    "head": "路径",
    "tail": "连通图",
    "head_offset": "9",
    "tail_offset": "16"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "堆排序利用堆结构特性对数据进行排序操作",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "比较排序通过元素间比较确定最终排序顺序",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "连通图是任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树是一种分层数据结构包含根节点及子节点",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "数据逻辑结构指数据元素间抽象的逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "交换排序通过比较交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "交换排序通过比较交换元素位置来完成排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "根节点是树结构起始点无父节点有子节点等",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "数据逻辑结构是数据元素间逻辑关系的整体",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "根节点是树结构起始点，无父节点有子节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "非线性结构中数据元素之间存在多对多关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是指在树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树是一种分层数据结构包含根节点及子节点",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "邻接表以链表形式存储图中顶点及邻接关系",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "在树结构中通过特定路径查找特定节点元素",
    "head": "路径",
    "tail": "查找",
    "head_offset": "9",
    "tail_offset": "11"
  },
  {
    "sentence": "图中任意两点都存在路径相连的图是连通图",
    "head": "路径",
    "tail": "连通图",
    "head_offset": "9",
    "tail_offset": "16"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "队列特点是先进先出，元素按顺序入队出队",
    "head": "队列",
    "tail": "入队",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "链表是通过指针将节点连接起来的数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "叶子节点是指在树结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "数据逻辑结构是数据元素间逻辑关系的整体",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "通过分治策略将数组分成两部分并递归排序",
    "head": "数组",
    "tail": "递归",
    "head_offset": "7",
    "tail_offset": "15"
  },
  {
    "sentence": "选择基准分两部分递归排序以实现快速排序",
    "head": "递归",
    "tail": "排序",
    "head_offset": "8",
    "tail_offset": "10"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "交换排序通过比较交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "数据逻辑结构是数据元素间逻辑关系的整体",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "数据逻辑结构是数据元素间逻辑关系的整体",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "双向链表节点有前驱和后继指针可双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "交换排序通过比较交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "连通图是图中任意两点都存在路径相连的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "图中任意两点都存在路径相连的图是连通图",
    "head": "路径",
    "tail": "连通图",
    "head_offset": "9",
    "tail_offset": "16"
  },
  {
    "sentence": "队列特点是先进先出，元素按顺序入队出队",
    "head": "队列",
    "tail": "入队",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "连通图是图中任意两点都存在路径相连的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性结构中数据元素存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "叶子节点是树结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "队列特点是先进先出，元素按顺序入队出队",
    "head": "队列",
    "tail": "入队",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树是一种分层数据结构包含根节点和子节点",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "数据逻辑结构是数据元素间逻辑关系的整体",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "连通图是任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "选择基准值分治将数组分成两部分递归排序",
    "head": "数组",
    "tail": "递归",
    "head_offset": "8",
    "tail_offset": "15"
  },
  {
    "sentence": "队列特点是先进先出，元素按顺序入队出队",
    "head": "队列",
    "tail": "入队",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "交换排序通过比较交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "数据逻辑结构是数据元素间逻辑关系的整体",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "叶子节点是指在树状结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "回路是图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的一种排序算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "在树结构中，没有子节点的节点即为叶子节点",
    "head": "子节点",
    "tail": "叶子节点",
    "head_offset": "8",
    "tail_offset": "16"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互到达",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "回路是图中从一顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "数据逻辑结构核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "满二叉树是每一层节点数都达到最大的二叉树",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "在有序数组中通过不断折半查找目标值的方法",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "12"
  },
  {
    "sentence": "回路是在电路中电流能够循环流动的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互连通",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "循环链表是尾节点指针指向头节点的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "回路是图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "回路是从某节点出发又回到该节点的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "数据逻辑结构核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "数组是相同类型数据的有序集合通过下标访问",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互连通",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性表是数据元素按线性关系排列的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "根节点是树结构中位于顶端没有父节点的节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "线性结构数据元素之间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "数据逻辑结构核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是指在树状结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "交换排序是通过元素交换位置实现排序的方法",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的一种排序算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树是一种非线性数据结构有根节点及子树关系",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "满二叉树是每一层节点数都达到最大的二叉树",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "回路是图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互到达",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "邻接矩阵用二维数组表示图中顶点间邻接关系",
    "head": "邻接矩阵",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性表是数据元素一对一线性关系的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的高效排序算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "在有序数组中通过不断折半比较查找目标元素",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "14"
  },
  {
    "sentence": "交换排序通过比较与交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "图的顶点是图结构中用于表示数据元素的节点",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互连通",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "树的节点有一个或多个子节点且有唯一根节点",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互到达",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "叶子节点的核心特征是在树结构中没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "满二叉树是每一层节点数都达到最大的二叉树",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "选择基准值将数组分两部分，递归排序子数组",
    "head": "数组",
    "tail": "递归",
    "head_offset": "6",
    "tail_offset": "13"
  },
  {
    "sentence": "树是一种非线性数据结构有根节点和子树关系",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "回路是图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互到达",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "图的顶点是图结构中代表数据元素的基本单元",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是数据结构中没有子节点的末端节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "堆排序利用堆结构，将数据排序且具有高效性",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "交换排序通过比较与交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "回路是能沿一定路径回到起点的闭合线路结构",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "堆排序是利用堆这种数据结构进行排序的算法",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是数据元素通过指针连接的线性存储结构",
    "head": "链表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "叶子节点的核心特征是在树结构中没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "满二叉树是每一层节点数都达到最大的二叉树",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "线性表数据元素一对一相邻且有先后顺序关系",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "线性表是数据元素一对一排列且有顺序的结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "邻接表通过链表存储图中顶点及邻接顶点信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "父节点是在树形结构中位于子节点之上的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "回路是图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是每一层节点数都达到最大的二叉树",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "双向链表是节点含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互连通",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "满二叉树是每一层节点数都达到最大的二叉树",
    "head": "满二叉树",
    "tail": "二叉树",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "邻接矩阵用二维数组表示图中顶点间邻接关系",
    "head": "邻接矩阵",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "双向链表是节点有前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "非线性结构中数据元素间关系不满足线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "循环链表是尾节点指针指向头节点的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "根节点是树结构中位于顶端没有父节点的节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互连通",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "交换排序通过比较与交换元素位置来完成排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "回路是在电路中电流能够循环流动的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "叶子节点是指在树状结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "链表是通过节点指针依次连接而成的数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "叶子节点的核心特征是在树结构中没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "选择基准值将数组分两部分，递归排序各部分",
    "head": "数组",
    "tail": "递归",
    "head_offset": "6",
    "tail_offset": "13"
  },
  {
    "sentence": "通过选择基准元素将数组分两部分并递归排序",
    "head": "数组",
    "tail": "递归",
    "head_offset": "9",
    "tail_offset": "16"
  },
  {
    "sentence": "堆排序利用堆结构特性高效地对数据进行排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "邻接表以链表形式存储图中顶点及相关边信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "连通图是任意两点之间都存在路径可相连的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互连通",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "邻接表通过链表存储图中顶点及邻接顶点信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "循环链表是首尾相连的链表，无明显头尾节点",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树是一种分层数据结构且有根节点及子树关系",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "12",
    "tail_offset": "16"
  },
  {
    "sentence": "单链表通过节点指针依次相连，数据存储离散",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "图的顶点是图结构中用于表示数据元素的节点",
    "head": "图的顶点",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性结构数据元素之间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "循环链表是尾节点指针指向头节点的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "连通图中任意两点之间都存在路径可相互到达",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "在有序数组中通过不断二分区间查找目标元素",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "14"
  },
  {
    "sentence": "交换排序通过比较与交换元素位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合且内存连续",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "单链表是节点通过指针依次连接形成的线性结构",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "回路是在图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "双向链表每个节点有前驱和后继指针可双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "非线性结构中数据元素之间存在非一对一的关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问其所有节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是由节点组成通过指针相连的线性数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "图是由顶点集合及顶点间边集合构成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "12"
  },
  {
    "sentence": "根节点是树结构中处于顶端无父节点的起始节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "链表是通过指针将节点连接起来的线性数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "回溯法按选优条件深度优先搜索并适时回溯找解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "比较排序通过元素间比较确定其相对顺序来排序",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "非线性结构中数据元素之间存在非一对一的关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "递归基础是递归函数中终止递归调用的初始条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用的最简情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "回路是在图中从一顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "回路是在图中从某顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "单链表是一种每个节点只含一个指针域的线性表",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问其所有节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "数据逻辑结构特点是数据元素间抽象关系的体现",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "按顺序依次查找数据序列中目标元素的查找方法",
    "head": "查找",
    "tail": "查找",
    "head_offset": "5",
    "tail_offset": "17"
  },
  {
    "sentence": "根节点是树结构中处于顶层无父节点的起始节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "根节点是树结构中处于顶层无父节点的起始节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "线性结构中数据元素之间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "快速排序以基准值分区，递归分治实现高效排序",
    "head": "快速排序",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "连通图是任意两点间都存在路径可相互到达的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "交换排序是通过元素交换位置来实现排序的方法",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "根节点是树结构中位于顶端无父节点的起始节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "归并排序是将数组分治后合并有序子数组来排序",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是相同类型数据的有序集合且内存连续存储",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉树每个节点最多有两个子节点且有层次结构",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "树结构中位于顶层无父节点的起始节点是根节点",
    "head": "父节点",
    "tail": "根节点",
    "head_offset": "9",
    "tail_offset": "18"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "归并排序将数组分治后合并，使有序性逐步提升",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "树是一种分层结构，有根节点且子节点关系明确",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "10",
    "tail_offset": "14"
  },
  {
    "sentence": "数组是相同类型数据的有序集合且内存连续存储",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "链表是通过指针连接节点来存储数据的线性结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "比较排序是基于元素间比较来确定最终排序顺序",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "非线性结构中数据元素之间存在非一对一的关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "按特定顺序访问二叉树中所有节点的操作叫遍历",
    "head": "访问",
    "tail": "二叉树",
    "head_offset": "5",
    "tail_offset": "7"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "选择基准值将数组分两部分，递归对两部分排序",
    "head": "数组",
    "tail": "递归",
    "head_offset": "6",
    "tail_offset": "13"
  },
  {
    "sentence": "在有序数组中通过不断折半查找目标元素的方法",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "12"
  },
  {
    "sentence": "回溯法按选优条件深度优先搜索并适时回溯找解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "回溯法按选优条件深度优先搜索并适时回溯求解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合且内存连续",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "父节点在数据结构中是比子节点层次更高的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "树是一种分层结构，有根节点且子节点关系明确",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "10",
    "tail_offset": "14"
  },
  {
    "sentence": "根节点是树结构中处于顶层无父节点的起始节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "交换排序是通过元素交换位置来实现排序的方法",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "回溯法按选优条件深度优先搜索并适时回溯找解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "回路是在图中从一顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "按顺序逐个检查元素以查找目标元素的查找方式",
    "head": "查找",
    "tail": "查找",
    "head_offset": "10",
    "tail_offset": "17"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "数据逻辑结构指数据元素间抽象关系不依赖存储",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合且内存连续",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "按顺序逐个比较元素查找目标直至找到或遍历完",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "9",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "回溯法按选优条件深度优先搜索并适时回溯求解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问其节点的操作方式",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "非线性结构中数据元素之间存在非一对一的关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回路是数据结构中从起点出发又回到起点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "在有序数组中通过不断折半查找目标元素的方法",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "12"
  },
  {
    "sentence": "线性结构中数据元素之间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "链表是由节点组成通过指针连接的数据存储结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回路是在图中从某节点出发又回到该节点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "顺序查找按顺序逐个检查数据元素直至找到目标",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "回路是在图中从一顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "叶子节点的核心特征是在树状结构中没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉树每个节点最多有两个子节点且有层次结构",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "叶子节点的核心特征是在树状结构中没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "根节点是树结构起始点无父节点且具有特殊地位",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系及特性",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "回路是在图中从一顶点出发又回到该顶点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "单链表是一种每个节点只含一个指针域的线性表",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "线性表是由零个或多个数据元素组成的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "链表是由节点组成通过指针连接的数据存储结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "父节点在数据结构中是比子节点层级更高的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "线性结构中数据元素之间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "连通图中任意两个顶点之间都存在路径能够相连",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "双向链表每个节点有前驱和后继指针可双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "双向链表每个节点有前驱和后继指针可双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系及特性",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "叶子节点的核心特征是在树状结构中没有子节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "交换排序是通过元素间比较与交换位置实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "回路是在电路中能形成电流循环流动的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点下方的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "递归基础是递归函数中终止递归调用的初始条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "非线性结构中数据元素间的关系不满足线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点确保全面不重复",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问其节点的操作过程",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "回路是数据结构中从起点出发又回到起点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "递归基础是递归函数中终止递归调用的初始条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "双向链表每个节点有前驱和后继指针可双向遍历",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "非线性结构中数据元素之间存在非一对一的关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "连通图是任意两点间都存在路径可相互到达的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "选择基准元素将数组分两部分，递归排序各部分",
    "head": "数组",
    "tail": "递归",
    "head_offset": "7",
    "tail_offset": "14"
  },
  {
    "sentence": "交换排序是通过元素交换位置来实现排序的方法",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "树结构中位于顶端无父节点的起始节点是根节点",
    "head": "父节点",
    "tail": "根节点",
    "head_offset": "9",
    "tail_offset": "18"
  },
  {
    "sentence": "顺序查找按顺序逐个检查数据元素直至找到目标",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "子节点是树结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "在有序数组中通过不断比较中间值来查找目标值",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "16"
  },
  {
    "sentence": "线性结构中数据元素之间存在一对一的线性关系",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不呈线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "双向链表是节点包含前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用的最简情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "交换排序是通过元素间比较与交换位置来实现排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "存储结构核心概念是数据元素及其关系的存储方式",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "线性表是数据元素有序排列且有一对一关系的序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "存储结构特点包括数据元素存储及关系呈现方式等",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "比较排序通过元素间比较确定元素相对顺序来排序",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "树的度是指一棵树中，其节点拥有子树的最大数目",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "每次从未排序序列中选最小元素放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "16"
  },
  {
    "sentence": "指针是存储变量内存地址的变量用于间接访问数据",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不满足线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "指针是内存地址的变量，用于间接访问和操作数据",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "对于最小堆，父节点的值小于或等于其子节点的值",
    "head": "堆",
    "tail": "父节点",
    "head_offset": "4",
    "tail_offset": "6"
  },
  {
    "sentence": "根节点是树结构中没有前驱节点且唯一的特殊节点",
    "head": "根节点",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以完整呈现树结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置进行排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "树的深度是从根节点到最远叶节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "堆排序基于堆结构，通过选择和交换实现数据排序",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "回溯法基础特点是按条件深度优先搜索并适时回溯",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "图中任意两点都存在路径可相互连通的图是连通图",
    "head": "路径",
    "tail": "连通图",
    "head_offset": "9",
    "tail_offset": "19"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "回路是在电路或系统中能形成电流循环的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "回路是在电路或系统中能形成电流循环的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "连通图是图中任意两点都存在路径可相互到达的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "归并排序是将数组分治后合并以达有序的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "循环链表是尾节点指向头节点形成环形结构的链表",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "从数据序列开头依次逐个查找目标元素的查找方法",
    "head": "查找",
    "tail": "查找",
    "head_offset": "11",
    "tail_offset": "18"
  },
  {
    "sentence": "树的深度是从根节点到最远叶节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "比较排序通过比较元素大小来确定其最终排序位置",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "顺序查找是从数据序列开头依次逐个查找目标元素",
    "head": "顺序查找",
    "tail": "查找",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "回溯法基础特点是按条件深度优先搜索并适时回溯",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "树的度是指一棵树中，其节点拥有子树的最大数目",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "栈具有后进先出的特点即最后入栈的元素最先出栈",
    "head": "栈",
    "tail": "入栈",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "树的查找基于树形结构通过特定路径确定元素位置",
    "head": "查找",
    "tail": "路径",
    "head_offset": "2",
    "tail_offset": "14"
  },
  {
    "sentence": "循环链表是一种尾节点指针指向头节点的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二分查找在有序数组中通过不断折半查找目标元素",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "堆排序利用堆结构将数据排序，根节点最大或最小",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "在有序数组中通过不断二分比较查找目标值的方法",
    "head": "数组",
    "tail": "查找",
    "head_offset": "3",
    "tail_offset": "14"
  },
  {
    "sentence": "树是一种有根节点且子节点关系唯一的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "树的深度是从根节点到最远叶节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "比较排序是基于元素间比较来确定其最终排序位置",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以完整呈现树结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "每次从未排序序列中选最小元素放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "16"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解树结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "指针是存储变量内存地址的变量具有间接访问特性",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树是一种分层结构有根且子树不相交的非线性结构",
    "head": "子树",
    "tail": "非线性结构",
    "head_offset": "11",
    "tail_offset": "17"
  },
  {
    "sentence": "循环链表是尾节点指向头节点形成循环的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "快速排序通过选择基准值将数组分两部分递归排序",
    "head": "快速排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "链表是通过节点指针连接数据元素的线性数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性表是n个具有相同特性的数据元素的有限序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "双向链表是每个节点有前驱和后继指针的链表结构",
    "head": "双向链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树是一种有根节点且子节点关系唯一的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "回溯法基础特点是按条件深度优先搜索并适时回溯",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "树的深度是从根节点到最远叶节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "根节点是树结构中位于顶端没有父节点的特殊节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "图是由顶点集合及顶点间边的集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "13"
  },
  {
    "sentence": "选择基准分两部分递归排序使数组有序的排序算法",
    "head": "选择基准",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问树中所有节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "链表由节点组成，节点间通过指针相连以存储数据",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "广度优先搜索按层次依次访问节点以找到目标节点",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "叶子节点是指在树状数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置进行排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "选择基准值将数组分两部分递归排序以达快速有序",
    "head": "数组",
    "tail": "递归",
    "head_offset": "6",
    "tail_offset": "12"
  },
  {
    "sentence": "存储结构核心概念是数据元素及其关系的存储方式",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差不超1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "数据逻辑结构定义核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "图是由顶点集合及顶点间边的集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "13"
  },
  {
    "sentence": "映射是集合间元素按规则对应关系的一种数学概念",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "指针是存储变量内存地址的变量用于间接访问数据",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "线性表是数据元素一对一排列且有先后顺序的结构",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "树是一种分层结构有根且子树不相交的非线性结构",
    "head": "子树",
    "tail": "非线性结构",
    "head_offset": "11",
    "tail_offset": "17"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "哈希表通过哈希函数将键映射到特定位置存储数据",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "每次从未排序序列中选最小元素放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "16"
  },
  {
    "sentence": "叶子节点是指在树状数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "数据逻辑结构定义核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "数据逻辑结构定义核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "比较排序通过比较元素大小来确定其最终排序位置",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "链表是通过节点指针依次相连存储数据的线性结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "图中任意两点都存在路径可相互连通的图是连通图",
    "head": "路径",
    "tail": "连通图",
    "head_offset": "9",
    "tail_offset": "19"
  },
  {
    "sentence": "非线性结构中数据元素之间的关系不满足线性关系",
    "head": "非线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "深度优先搜索按深度推进，优先探索一条路径到底",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "广度优先搜索按层次依次访问节点以找到目标节点",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "根节点是树结构中位于顶端没有父节点的特殊节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差不超1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置进行排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "平衡二叉树每个节点左右子树高度差绝对值不超1",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "平衡二叉树每个节点左右子树高度差绝对值不超1",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "图是由顶点集合及顶点间边的集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "13"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差不超1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "从数据序列开头依次逐个查找目标元素的查找方式",
    "head": "查找",
    "tail": "查找",
    "head_offset": "11",
    "tail_offset": "18"
  },
  {
    "sentence": "交换排序核心概念是通过比较交换元素位置来排序",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "平衡二叉树每个节点左右子树高度差绝对值不超1",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点是指在树状数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "指针是存储变量内存地址的变量具有间接访问特性",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "数据逻辑结构定义核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置进行排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "树是一种有根节点且子节点关系唯一的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "数据逻辑结构定义核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "13"
  },
  {
    "sentence": "每个数据元素包含数据和指针两部分，指针指向下",
    "head": "数据元素",
    "tail": "指针",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "按照特定顺序访问二叉树中所有节点的操作叫遍历",
    "head": "访问",
    "tail": "二叉树",
    "head_offset": "6",
    "tail_offset": "8"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树是由根节点和若干子树构成的层次结构数据结构",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断折半查找目标值",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于自身右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以完整呈现树结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树的节点是包含数据及指向子节点链接的基本单元",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "平衡二叉树每个节点左右子树高度差绝对值不超1",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "每次从未排序序列中选最小元素放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "16"
  },
  {
    "sentence": "子节点是树状结构中直接连接在父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "归并排序将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "指针是存储变量内存地址的变量具有间接访问特性",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "链表由节点组成，节点含数据及指针指向下一节点",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "存储结构核心概念是数据元素及其关系的存储方式",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "连通图是图中任意两点都存在路径可相互连通的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "树的度是指一棵树中，其节点拥有子树的最大数目",
    "head": "树的度",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置进行排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "根节点是数据结构中树状结构的起始节点无父节点",
    "head": "根节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "叶子节点是指在树状数据结构中没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以全面了解树结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "将未排序数据插入已排序序列的合适位置完成排序",
    "head": "排序",
    "tail": "插入",
    "head_offset": "2",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子树的树形结构",
    "head": "二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "每次从未排序序列中选最小元素与未排序首位交换",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "16"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "每次从未排序序列中选最小元素放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "16"
  },
  {
    "sentence": "树是由根节点和若干子树构成的层次结构数据结构",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "3",
    "tail_offset": "9"
  },
  {
    "sentence": "树是一种递归定义的包含根节点及子树的非线性结构",
    "head": "递归",
    "tail": "根节点",
    "head_offset": "4",
    "tail_offset": "11"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系不依赖存储",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系及组织形式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数组是具有相同数据类型元素的有序集合且内存连续",
    "head": "数组",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表由节点组成，节点通过指针相连，数据存储灵活",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "归并排序是将数组分治后合并有序子数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树结构",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列的合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "按顺序逐个检查数据元素以查找目标元素的查找方式",
    "head": "数据元素",
    "tail": "查找",
    "head_offset": "7",
    "tail_offset": "12"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回路是从一点出发经一系列节点后又回到该点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "叶子节点是数据结构中树状结构里没有子节点的节点",
    "head": "叶子节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "递归基础是递归函数中无需再次递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "栈是一种限定仅在表尾进行插入和删除操作的线性表",
    "head": "表尾",
    "tail": "插入",
    "head_offset": "8",
    "tail_offset": "12"
  },
  {
    "sentence": "按顺序逐个查找数据直至找到目标或遍历完所有数据",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "5",
    "tail_offset": "16"
  },
  {
    "sentence": "堆是一种完全二叉树，父节点键值大于或小于子节点",
    "head": "完全二叉树",
    "tail": "父节点",
    "head_offset": "4",
    "tail_offset": "10"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "堆排序是利用堆结构进行排序的算法，先建堆再调整",
    "head": "堆排序",
    "tail": "堆",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉树每个节点最多有两个子节点且有特定层次结构",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序查找是按顺序逐个检查数据元素以确定目标元素",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树结构",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系及组织方式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "图由顶点集合及顶点间边的集合组成的一种数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "链表由节点组成各节点通过指针相连数据存储不连续",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "哈希表通过哈希函数将键映射到地址以快速存取数据",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "指针是存储变量内存地址并能通过它访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "递归基础是递归函数中最简单无需再递归的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索解空间树找可行解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "树的高度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "从数据序列开头依次查找目标元素直至找到或遍历完",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "9",
    "tail_offset": "20"
  },
  {
    "sentence": "归并排序是将数组分块排序后合并成有序数组的算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表是由节点组成，节点间通过指针连接的数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "回路是从一点出发经一系列节点后又回到该点的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "比较排序是基于元素间比较进行顺序排列的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "比较排序是基于元素间比较进行顺序排列的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "邻接表以链表形式存储图中顶点及与其相邻顶点信息",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用即可终止的条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列的合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序查找按顺序逐个检查元素直至找到目标或遍历完",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "线性查找按顺序逐个检查元素直至找到目标或遍历完",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "20"
  },
  {
    "sentence": "递归基础是递归函数中无需再次递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "比较排序是基于元素间比较进行顺序排列的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "指针是存储变量内存地址并可通过它访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "数据类型定义是规定数据取值范围及操作集合的概念",
    "head": "数据类型",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差不超过1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "链表是通过指针将节点连接起来形成的线性数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "邻接表是用链表存储图中顶点及邻接关系的数据结构",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系及组织形式",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径相连的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列的合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差不超过1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索解空间树找可行解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "归并排序是将数组分块排序后合并成有序数组的算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到值的一种数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树是一种分层结构数据，有根节点且各节点有子节点",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "20"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "比较排序通过元素间比较确定其相对顺序来进行排序",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "堆是一种完全二叉树，父节点键值大于或小于子节点",
    "head": "完全二叉树",
    "tail": "父节点",
    "head_offset": "4",
    "tail_offset": "10"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "冒泡排序是比较相邻元素大小并交换位置的排序算法",
    "head": "冒泡排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "线性表是数据元素有序排列且存在一对一关系的序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "归并排序是将数组分治后合并有序子数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中从根节点到最远叶节点最长简单路径上边的数目",
    "head": "根节点",
    "tail": "路径",
    "head_offset": "3",
    "tail_offset": "16"
  },
  {
    "sentence": "二叉树每个节点最多有两个子节点且有特定结构关系",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "指针是存储变量内存地址并能通过它访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "冒泡排序是比较相邻元素大小并交换位置的排序算法",
    "head": "冒泡排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "循环链表是链表尾节点指向头节点形成环的数据结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回溯法是通过尝试所有可能路径求解问题的算法策略",
    "head": "回溯法",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "按顺序逐个检查数据元素以查找目标元素的查找方法",
    "head": "数据元素",
    "tail": "查找",
    "head_offset": "7",
    "tail_offset": "12"
  },
  {
    "sentence": "简单排序是通过比较与交换元素位置实现排序的方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "顺序查找是从数据序列开头依次查找目标元素的方法",
    "head": "顺序查找",
    "tail": "查找",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "递归基础是递归函数中无需再次递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "图由顶点集合及顶点间边的集合组成的一种数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列的合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树是一种有根节点且子树互不相交的非线性数据结构",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树中数据元素及指向子树分支构成的基本单位是节点",
    "head": "数据元素",
    "tail": "子树",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "树的节点是包含数据及指向子节点的链接的基本单元",
    "head": "树的节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "递归基础是递归函数中无需再次递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列的合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索并适时回溯的算法",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "递归基础是递归函数中无需再次递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索解空间树找可行解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索解空间来求解问题",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "比较排序是基于元素间比较进行顺序排列的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中各节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树结构",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "归并排序是将数组分治后合并有序子数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "顺序查找按顺序逐个检查元素直至找到目标或遍历完",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "比较排序是基于元素间比较进行顺序排列的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "选择基准分治递归将数组按基准值划分为两部分排序",
    "head": "递归",
    "tail": "数组",
    "head_offset": "6",
    "tail_offset": "9"
  },
  {
    "sentence": "数据结构中稳定性指排序前后相等元素相对位置不变",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "图是由顶点集合及顶点间边的集合所组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "13"
  },
  {
    "sentence": "堆是一种完全二叉树，父节点键值大于或小于子节点",
    "head": "完全二叉树",
    "tail": "父节点",
    "head_offset": "4",
    "tail_offset": "10"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索解空间树找可行解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "线性结构是数据元素之间存在一对一线性关系的结构",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "存储结构指数据元素及其关系在计算机内的存储方式",
    "head": "存储结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "深度优先搜索是按深度优先依次访问节点的搜索方法",
    "head": "深度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系不依赖存储",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "树中数据元素及指向子树分支构成的基本单位是节点",
    "head": "数据元素",
    "tail": "子树",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中各节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "邻接表通过链表存储顶点及相连顶点信息体现图结构",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "数据结构中稳定性指排序前后相等元素相对位置不变",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "数据结构中稳定性指相同元素排序前后相对位置不变",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "5",
    "tail_offset": "13"
  },
  {
    "sentence": "简单排序是通过比较和交换元素位置实现排序的方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "递归基础是递归函数中无需再次递归调用的终止条件",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "数据逻辑结构特点指数据元素间抽象关系不依赖存储",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "9"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "回溯法是通过尝试多种路径并回退来求解问题的方法",
    "head": "回溯法",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "顺序查找按顺序逐个检查元素直至找到目标或遍历完",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "线性查找按顺序逐个检查元素直至找到目标或遍历完",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "2",
    "tail_offset": "20"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的无向图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "比较排序是基于元素间比较进行顺序排列的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树结构",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后合并成有序数组",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点以遍历图或树结构",
    "head": "广度优先搜索",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "从数据序列首个元素起依次查找目标元素的查找方法",
    "head": "查找",
    "tail": "查找",
    "head_offset": "12",
    "tail_offset": "19"
  },
  {
    "sentence": "根节点是树结构中位于顶端没有前驱节点的特殊节点",
    "head": "根节点",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "数据逻辑结构定义的核心概念是数据元素间逻辑关系",
    "head": "逻辑结构",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "14"
  },
  {
    "sentence": "深度优先搜索按深度推进探索，优先往深处扩展路径",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "从数据序列开头依次查找目标元素直至找到或遍历完",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "9",
    "tail_offset": "20"
  },
  {
    "sentence": "插入排序是将未排序数据插入已排序序列的合适位置",
    "head": "插入排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回溯法是通过尝试多种路径并回退来求解问题的方法",
    "head": "回溯法",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "图由顶点集合及顶点间边的集合构成的一种数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "4",
    "tail_offset": "12"
  },
  {
    "sentence": "树的深度是从根节点到最远叶子节点的最长路径长度",
    "head": "树的深度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用的终止条件情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "从数据序列开头依次查找目标元素直到找到或遍历完",
    "head": "查找",
    "tail": "遍历",
    "head_offset": "9",
    "tail_offset": "20"
  },
  {
    "sentence": "交换排序是通过比较交换元素位置来实现排序的方法",
    "head": "交换排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "归并排序是将序列分治后合并有序子序列的排序算法",
    "head": "归并排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "线性结构是数据元素之间存在一对一线性关系的结构",
    "head": "线性结构",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用的最简情况定义",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "二叉搜索树中每个节点左子树值小于该节点右子树值",
    "head": "二叉搜索树",
    "tail": "左子树",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "连通图是图中任意两个顶点之间都存在路径的无向图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "树是一种分层结构，有根且子树不相交的非线性结构",
    "head": "子树",
    "tail": "非线性结构",
    "head_offset": "12",
    "tail_offset": "18"
  },
  {
    "sentence": "图是由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "5",
    "tail_offset": "14"
  },
  {
    "sentence": "顺序查找按顺序逐个检查元素直至找到目标或遍历完",
    "head": "顺序查找",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "按顺序逐个检查数据元素以查找目标元素的查找方法",
    "head": "数据元素",
    "tail": "查找",
    "head_offset": "7",
    "tail_offset": "12"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索并适时回溯的方法",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "归并排序是将数组分治后合并有序子数组的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "指针是存储变量内存地址并可通过它访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "二叉树遍历按特定顺序访问节点以完整呈现树形结构",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "顺序查找是按顺序逐个检查数据元素以确定目标元素",
    "head": "顺序查找",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "快速排序是通过一趟排序将数组分为两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "链表是通过节点指针依次连接存储数据的线性数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "循环链表是一种尾节点指向头节点形成循环的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性查找是按顺序逐个检查数据元素直至找到目标元素",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "12"
  },
  {
    "sentence": "回溯法基础特点是按条件深度优先搜索解空间找可行解",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "比较排序是通过元素间比较确定其相对顺序的排序方法",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "每趟从待排序元素中选最小（大）值与未排序首位交换",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是所有节点都有左右子树且叶子层满的二叉树",
    "head": "满二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "快速排序是通过一趟排序将数据分为两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆是一种特殊数据结构，父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "11",
    "tail_offset": "21"
  },
  {
    "sentence": "树是一种包含根节点且节点间有层次关系的非线性结构",
    "head": "根节点",
    "tail": "非线性结构",
    "head_offset": "6",
    "tail_offset": "19"
  },
  {
    "sentence": "满二叉树是除叶子外每个节点都有两个子节点的二叉树",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "深度优先搜索是按深度优先依次访问节点直至完成搜索",
    "head": "深度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长简单路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "抽象数据类型是对数据及操作进行抽象描述的数据类型",
    "head": "抽象数据类型",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "20"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长简单路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "循环链表是一种尾节点指向头节点形成循环的链表结构",
    "head": "循环链表",
    "tail": "尾节点",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "深度优先搜索按深度依次访问节点直至无法深入再回溯",
    "head": "深度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "11"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "快速排序是通过一趟排序将数组分为两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "指针是存储变量内存地址并通过该地址访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "每次从未排序数据中选最小（大）值放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后再合并的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "堆是一种特殊数据结构，父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "11",
    "tail_offset": "21"
  },
  {
    "sentence": "映射是一种元素对应关系一个集合到另一个集合的对应",
    "head": "映射",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图是指图中任意两个顶点之间都存在路径相连的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长简单路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "深度优先搜索是按路径延伸到最深层再回溯的搜索方法",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "指针是存储变量内存地址并通过该地址访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "父节点是在树形结构中位于上一层可连接子节点的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "指针是内存中存储变量地址并可通过它访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "深度优先搜索沿一条路径深入探索直到无法继续再回溯",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "单链表通过节点指针依次连接，每个节点指向下一节点",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "深度优先搜索沿一条路径深入探索直到无法继续再回溯",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "队列的特点是先进先出，即先进入队列的元素先出队列",
    "head": "队列",
    "tail": "队列",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "线性表是具有相同数据类型的n个数据元素的有限序列",
    "head": "线性表",
    "tail": "数据类型",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "在数据结构中，稳定性指排序后相同元素相对位置不变",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "7",
    "tail_offset": "11"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后再合并的排序方法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "深度优先搜索沿一条路径深入探索直至无法继续才回溯",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "树是一种有根节点且子节点具有层次关系的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "单链表通过节点指针依次相连，每个节点只知后继节点",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "线性查找是按顺序逐个检查数据元素直至找到目标元素",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "12"
  },
  {
    "sentence": "每次从未排序数据中选最小（大）值放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "指针是内存中存储变量地址并能通过它访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "子节点是树状结构中直接连接在某个父节点之下的节点",
    "head": "子节点",
    "tail": "父节点",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "在树形结构中父节点是直接有子节点连接于其下的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "6",
    "tail_offset": "13"
  },
  {
    "sentence": "连通图是任意两个顶点之间都存在路径可相互到达的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "图中任意两点之间都存在路径可相互连通的图是连通图",
    "head": "路径",
    "tail": "连通图",
    "head_offset": "11",
    "tail_offset": "21"
  },
  {
    "sentence": "树是一种分层结构且根节点唯一子树不相交的数据结构",
    "head": "根节点",
    "tail": "子树",
    "head_offset": "9",
    "tail_offset": "14"
  },
  {
    "sentence": "树的查找基于树形结构从根节点开始按特定规则找目标",
    "head": "查找",
    "tail": "根节点",
    "head_offset": "2",
    "tail_offset": "11"
  },
  {
    "sentence": "快速排序是通过一趟排序将数组分为两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "堆是一种特殊数据结构，父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "11",
    "tail_offset": "21"
  },
  {
    "sentence": "线性表是数据元素有序排列且有唯一前驱和后继的序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "堆是一种特殊树形结构，父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "11",
    "tail_offset": "21"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索解空间树找解的方法",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "链表是通过指针将离散存储的节点顺序连接的数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "线性表是数据元素有序排列且有前驱和后继关系的序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "回溯法是按选优条件深度优先搜索并适时回溯求解问题",
    "head": "回溯法",
    "tail": "深度优先搜索",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "链表通过节点指针相连，数据存储不连续且可灵活增减",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "指针是内存中存储变量地址并可通过其访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "根节点是树结构中没有前驱节点且唯一位于顶层的节点",
    "head": "根节点",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "满二叉树是除叶子外每个节点都有两个子节点的二叉树",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "从根节点到最远叶子节点所经过的最长路径上的节点数",
    "head": "根节点",
    "tail": "叶子节点",
    "head_offset": "1",
    "tail_offset": "7"
  },
  {
    "sentence": "哈希表通过哈希函数将数据映射到特定位置以快速存取",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "二叉树遍历是按特定顺序访问二叉树中所有节点的操作",
    "head": "二叉树",
    "tail": "遍历",
    "head_offset": "0",
    "tail_offset": "3"
  },
  {
    "sentence": "数组是存储相同类型数据的有序集合具有特定内存结构",
    "head": "数组",
    "tail": "集合",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "指针是存储变量内存地址且可通过地址访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "线性查找是按顺序逐个检查数据元素以确定目标值位置",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "12"
  },
  {
    "sentence": "树是一种有根节点且子节点具有层次关系的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "单链表是一种每个节点只含一个指针域的链式存储结构",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "14"
  },
  {
    "sentence": "哈希表通过哈希函数将数据映射到特定位置以快速存取",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "递归基础是递归函数中无需递归调用可直接求解的情况",
    "head": "递归基础",
    "tail": "递归",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "快速排序是通过一趟排序将数组分为两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "回路是在电路中电流能沿其流动并回到起点的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "在数据结构中稳定性指相同元素排序前后相对位置不变",
    "head": "稳定性",
    "tail": "排序",
    "head_offset": "6",
    "tail_offset": "14"
  },
  {
    "sentence": "单链表由节点组成每个节点含数据及指向下一节点指针",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "树是一种包含根节点且节点间有层次关系的非线性结构",
    "head": "根节点",
    "tail": "非线性结构",
    "head_offset": "6",
    "tail_offset": "19"
  },
  {
    "sentence": "按顺序逐个查找数据元素直至找到目标元素的查找方法",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "5",
    "tail_offset": "7"
  },
  {
    "sentence": "树是一种有根节点且子节点具有层次关系的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "循环链表是一种链表其尾节点指针指向头节点形成循环",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "7"
  },
  {
    "sentence": "堆是一种特殊数据结构，父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "11",
    "tail_offset": "21"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "线性查找是按顺序逐个检查数据元素以确定目标值位置",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "12"
  },
  {
    "sentence": "每次从未排序数据中选最小（大）值与未排序首位交换",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "每次从未排序元素中选最小（大）值放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "满二叉树是除叶子外每个节点都有两个子节点的二叉树",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "哈希表是通过哈希函数将键映射到存储位置的数据结构",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "链表由节点组成，节点包含数据及指向下一节点的指针",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "在树形结构中位于顶层没有父节点的起始节点是根节点",
    "head": "父节点",
    "tail": "根节点",
    "head_offset": "12",
    "tail_offset": "21"
  },
  {
    "sentence": "回路是在电路中电流能从电源出发回到电源的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "指针是存储变量内存地址并通过该地址访问变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "深度优先搜索是按路径延伸方向深入探索直至无法继续",
    "head": "深度优先搜索",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "树是一种有根节点且子节点具有层次关系的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "循环链表是链表尾节点指向头节点形成循环的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "满二叉树是除叶子外每个节点都有两个子节点的二叉树",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "满二叉树是除叶子外每个节点都有两个子节点的二叉树",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "17"
  },
  {
    "sentence": "循环链表是链表尾节点指向头节点形成循环的链表结构",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "归并排序是将数组分成子数组排序后再合并的排序算法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "树是一种有根节点且子节点具有层次关系的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "快速排序是通过一趟排序将数据分为两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "快速排序是通过一趟排序将数组分成两部分并递归排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "每趟从未排序元素中选最小（大）值与未排序首位交换",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "单链表由节点组成每个节点含数据及指向下一节点指针",
    "head": "单链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "树是一种有根节点且子节点具有层次关系的非线性结构",
    "head": "根节点",
    "tail": "子节点",
    "head_offset": "5",
    "tail_offset": "9"
  },
  {
    "sentence": "连通图是指图中任意两个顶点之间都存在路径相连的图",
    "head": "连通图",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "按顺序逐个检查数据元素直至找到目标元素的查找方法",
    "head": "数据元素",
    "tail": "查找",
    "head_offset": "7",
    "tail_offset": "20"
  },
  {
    "sentence": "指针是存储变量内存地址并可通过它访问该变量的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "线性表是数据元素有序排列且有唯一前驱和后继的序列",
    "head": "线性表",
    "tail": "数据元素",
    "head_offset": "0",
    "tail_offset": "4"
  },
  {
    "sentence": "每次从未排序数据中选最小（大）值放已排序序列末尾",
    "head": "排序",
    "tail": "排序",
    "head_offset": "4",
    "tail_offset": "18"
  },
  {
    "sentence": "树的高度是从根节点到最远叶节点的最长简单路径长度",
    "head": "树的高度",
    "tail": "根节点",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "栈是一种只能在一端进行插入和删除操作的特殊线性表",
    "head": "插入",
    "tail": "删除",
    "head_offset": "11",
    "tail_offset": "14"
  },
  {
    "sentence": "在树形结构中，父节点是指其下面连接有子节点的节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "7",
    "tail_offset": "18"
  },
  {
    "sentence": "树查找基于树结构从根节点开始按特定规则找目标元素",
    "head": "查找",
    "tail": "树",
    "head_offset": "1",
    "tail_offset": "5"
  },
  {
    "sentence": "链表是通过指针连接节点且数据存储不连续的数据结构",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "回路是在电路中电流能沿其流动并形成闭合路径的部分",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "19"
  },
  {
    "sentence": "快速排序是通过一趟排序将数据分为两部分再分别排序",
    "head": "快速排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "9"
  },
  {
    "sentence": "队列的核心性质是先进先出即先进入队列的元素先出队列",
    "head": "队列",
    "tail": "队列",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差绝对值不超1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "单链表是由节点组成且每个节点只指向下一节点的线性表",
    "head": "单链表",
    "tail": "线性表",
    "head_offset": "0",
    "tail_offset": "22"
  },
  {
    "sentence": "简单排序是按特定规则依次比较交换元素位置的排序方法",
    "head": "简单排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "广度优先搜索按层次依次扩展节点先访问距离起始点近的",
    "head": "广度优先搜索",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "16"
  },
  {
    "sentence": "平衡二叉树是左右子树高度差绝对值不超1的二叉排序树",
    "head": "平衡二叉树",
    "tail": "子树",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "归并排序是将数组分成子数组分别排序再合并的排序方法",
    "head": "归并排序",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "6"
  },
  {
    "sentence": "根节点是树结构中没有前驱节点且位于树顶端的特殊节点",
    "head": "根节点",
    "tail": "前驱节点",
    "head_offset": "0",
    "tail_offset": "10"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断折半查找目标值的方法",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "回路是图中一条至少包含一条边且起点和终点相同的路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "链表是由节点组成，节点包含数据及指向下一节点的指针",
    "head": "链表",
    "tail": "指针",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "队列是一种先进先出、按顺序存储和操作数据的线性结构",
    "head": "队列",
    "tail": "线性结构",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "二叉树是一种每个节点最多有两个子节点的树形数据结构",
    "head": "二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "二分查找是在有序数组中通过不断二分区间来定位目标值",
    "head": "二分查找",
    "tail": "数组",
    "head_offset": "0",
    "tail_offset": "8"
  },
  {
    "sentence": "指针是存储变量内存地址，能间接访问和修改数据的变量",
    "head": "指针",
    "tail": "访问",
    "head_offset": "0",
    "tail_offset": "15"
  },
  {
    "sentence": "单链表由节点组成，每个节点指向下一节点形成线性结构",
    "head": "单链表",
    "tail": "线性结构",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "回路是在电路中电流能够依次通过各元件形成的闭合路径",
    "head": "回路",
    "tail": "路径",
    "head_offset": "0",
    "tail_offset": "23"
  },
  {
    "sentence": "邻接表是用链表存储图中顶点及邻接顶点信息的数据结构",
    "head": "邻接表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "堆是一种特殊数据结构满足父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "22"
  },
  {
    "sentence": "线性查找是按顺序逐个检查数据元素以确定目标值的方法",
    "head": "查找",
    "tail": "数据元素",
    "head_offset": "2",
    "tail_offset": "12"
  },
  {
    "sentence": "哈希表通过哈希函数将键映射到特定位置以快速存取数据",
    "head": "哈希表",
    "tail": "哈希函数",
    "head_offset": "0",
    "tail_offset": "5"
  },
  {
    "sentence": "循环链表是一种首尾相连的链表，无明显头指针和尾指针",
    "head": "循环链表",
    "tail": "链表",
    "head_offset": "0",
    "tail_offset": "12"
  },
  {
    "sentence": "满二叉树是除叶节点外每个节点都有两个子节点的二叉树",
    "head": "满二叉树",
    "tail": "子节点",
    "head_offset": "0",
    "tail_offset": "18"
  },
  {
    "sentence": "比较排序是基于元素比较来确定元素相对位置的排序方式",
    "head": "比较排序",
    "tail": "排序",
    "head_offset": "0",
    "tail_offset": "21"
  },
  {
    "sentence": "堆是一种特殊的数据结构，父节点键值大于或小于子节点",
    "head": "父节点",
    "tail": "子节点",
    "head_offset": "12",
    "tail_offset": "22"
  },
  {
    "sentence": "在树形结构中位于顶层、没有父节点的起始节点是根节点",
    "head": "父节点",
    "tail": "根节点",
    "head_offset": "13",
    "tail_offset": "22"
  },
  {
    "sentence": "图是一种由顶点集合及顶点间的关系集合组成的数据结构",
    "head": "集合",
    "tail": "集合",
    "head_offset": "7",
    "tail_offset": "16"
  }
]