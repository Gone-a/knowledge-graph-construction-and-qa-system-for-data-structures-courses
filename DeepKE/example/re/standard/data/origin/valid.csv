sentence,relation,head,tail,head_offset,tail_offset
数据的逻辑结构的核心性质是数据元素之间的逻辑关系，它独立于数据的存储方式，并且决定了数据在计算机中的组织和处理方式,belg,逻辑结构,数据元素,3,13
归并排序是将数组分治后合并以达有序的排序算法,rely,归并排序,数组,0,6
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
简单排序是对数据序列进行排序的一种方式其核心性质是通过比较和交换元素位置逐步将数据序列从无序状态转变为有序状态,b-belg,简单排序,排序,0,12
树中没有子节点的节点就是叶子节点,none,子节点,叶子节点,4,12
图的边是连接图中两个顶点的线，它可以表示顶点之间的关系，并且在有向图中边具有方向而无向图中边无方向,none,图的边,有向图,0,31
循环链表是一种特殊的链表，其尾节点的指针域指向头节点，从而形成一个环形结构，使得链表中的节点可以依次遍历且能循环访问,b-belg,循环链表,链表,0,10
树的节点的核心性质是每个节点有零个或多个子节点，且有一个被称为根的特殊节点，除根节点外每个节点有且仅有一个父节点，,belg,树的节点,子节点,0,20
平衡二叉树是左右子树高度差绝对值不超1的二叉排序树,belg,平衡二叉树,子树,0,8
满二叉树的核心性质是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层有,b-belg,满二叉树,二叉树,0,27
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表,b-belg,循环链表,链表,0,7
树的高度是从根节点到最远叶节点的最长路径长度,rely,树的高度,根节点,0,6
连通图是指在无向图中，若任意两个顶点之间都存在路径，则该无向图为连通图，在有向图中，若对于每一对顶点vi和,b-belg,连通图,无向图,0,6
选择基准元素将数组分两部分，递归排序各部分,none,数组,递归,7,14
满二叉树是每一层节点数都达到最大的二叉树,b-belg,满二叉树,二叉树,0,17
线性查找是从数据序列的一端开始，依次将每个数据元素与目标值进行比较，直到找到目标值或遍历完整个数据序列的查找方式,rely,查找,数据元素,2,21
邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点,rely,邻接表,链表,0,32
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或遍历完整个线性表的查找方法,rely,顺序查找,线性表,0,6
交换排序是通过元素交换位置来实现排序的方法,b-belg,交换排序,排序,0,16
栈是一种只能在一端进行插入和删除操作的特殊线性表,relative,插入,删除,11,14
完全二叉树是若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h,b-belg,完全二叉树,二叉树,0,8
广度优先搜索按层次依次扩展节点以遍历图或树,attr,广度优先搜索,遍历,0,16
线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或遍历完整个线性表的查找方法,rely,查找,线性表,2,6
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的单向关系,b-belg,有向图,图,0,18
叶子节点是指在树结构中没有子节点的节点,relative,叶子节点,子节点,0,13
叶子节点的核心特征是在树状结构中没有子节点,relative,叶子节点,子节点,0,18
完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,17
堆是一种特殊的完全二叉树，它满足对于每个非叶子节点，其值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值,belg,完全二叉树,叶子节点,7,21
树中所有结点的度的最大值就是树的度，其核心特征在于它反映了树中各结点所拥有子树数目的最大情况决定着树的复杂程度且与,attr,树的度,子树,14,37
双向链表是每个节点有前驱和后继指针的链表结构,belg,双向链表,指针,0,15
单链表通过节点指针依次相连存储数据,rely,单链表,指针,0,7
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止,rely,顺序查找,线性表,0,6
递归基础是递归函数中无需递归调用的最简情况,rely,递归基础,递归,0,12
树是一种有根节点且子节点具有层次关系的非线性结构,none,根节点,子节点,5,9
线性结构中数据元素之间存在一对一的线性关系,belg,线性结构,数据元素,0,5
在有序数组中通过不断折半比较查找目标元素,rely,数组,查找,3,14
有向图是一种由顶点集合以及顶点间的有向边集合组成的图，其中有向边是有方向的，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
栈是一种后进先出的数据结构，其核心特征是元素的插入和删除操作都在栈顶进行，新元素入栈后成为栈顶元素，而栈顶元素出,relative,插入,删除,23,26
穷举法是一种通过对问题所有可能情况逐一进行检验，从而找出符合条件的解的方法其特点在于遍历所有可能情况来求解,attr,穷举法,遍历,0,42
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
邻接表的核心特征是用链表来表示图中顶点的邻接关系，对于图中的每个顶点，都有一个链表与之对应，链表中存储了与该顶点相邻,rely,邻接表,链表,0,10
树的深度是从根节点到最远叶子节点所经过的最长简单路径上的节点数，它反映了树在垂直方向上的层次结构特征，体现了树中节点,rely,树的深度,根节点,0,6
路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），且相邻顶点之间存在边（对于有向图存在有向,none,路径,有向图,0,24
简单排序是对数据序列通过比较元素大小并逐步交换位置等方式将其按特定顺序（如升序或降序）排列的一种排序方法,b-belg,简单排序,排序,0,48
递归基础是递归函数中无需递归调用的终止条件,rely,递归基础,递归,0,12
完全二叉树是深度为k的有n个结点的二叉树，对于树中的任一结点，若其序号i满足1≤i≤n，则其左孩子序号为2i,b-belg,完全二叉树,二叉树,0,17
根节点是树结构中的一个特殊节点，它没有父节点，是整个树的起始点，其他所有节点都直接或间接连接到根节点,relative,根节点,父节点,0,19
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
堆是一种完全二叉树，父节点键值大于或小于子节点,belg,完全二叉树,父节点,4,10
抽象数据类型是指一个数学模型以及定义在该模型上的一组操作，它强调数据的逻辑结构和操作的语义，而不依赖于具体的实现细节,attr,抽象数据类型,逻辑结构,0,35
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,20
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
叶子节点是树中没有子节点的末端节点,relative,叶子节点,子节点,0,9
交换排序通过比较交换元素位置来实现排序,b-rely,交换排序,排序,0,17
插入排序的核心特征是将未排序数据插入到已排序序列的合适位置，通过依次对每个元素进行这样的操作，最终使整个数组有序,b-belg,插入排序,排序,0,12
连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于每一对顶点u和v，都存在一条从u到v和从,b-belg,连通图,无向图,0,6
满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果二叉树的深度为k，那么该满二叉树的节点总数为2^k -,b-belg,满二叉树,二叉树,0,7
数据的逻辑结构是指数据元素之间逻辑关系的整体，它描述数据元素之间的关联方式而不考虑其在计算机中的存储表示,belg,逻辑结构,数据元素,3,9
比较排序是基于元素之间的比较来确定元素顺序从而进行排序的算法其核心性质是通过比较元素大小来逐步构建有序序列,b-belg,比较排序,排序,0,25
父节点是树状结构中其下存在子节点的节点，具有比子节点更高的层级关系，在数据结构中起着承上启下连接子节点集合的作用且,relative,父节点,子节点,0,13
哈希表是一种数据结构它通过哈希函数将键映射到特定位置来存储和检索数据以实现快速的数据访问平均情况下时间复杂度接近常数,rely,哈希表,哈希函数,0,13
无向图是一种由顶点集合以及顶点之间的边集合组成的图结构其中边是没有方向的顶点对表示顶点之间的连接关系,belg,无向图,集合,0,9
从数据序列开头依次查找目标元素直至找到或遍历完,rely,查找,遍历,9,20
单链表通过节点指针依次相连，数据存储离散,rely,单链表,指针,0,7
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值即第i层有2^(i,b-belg,满二叉树,二叉树,0,24
堆排序是利用堆结构进行排序的高效算法,rely,堆排序,堆,0,6
在树形结构中位于顶层没有父节点的起始节点是根节点,none,父节点,根节点,12,21
循环链表是一种首尾相连的链表结构,b-belg,循环链表,链表,0,12
将未排序数据插入已排序序列的合适位置进行排序,rely,排序,插入,2,6
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(,b-belg,满二叉树,二叉树,0,24
数据的物理结构的核心特征是数据元素在计算机存储空间中的存储方式，包括数据元素自身的表示以及数据元素之间关系的表示,belg,物理结构,数据元素,3,13
二叉搜索树中，每个节点的左子树中的所有节点的值均小于该节点的值，右子树中的所有节点的值均大于该节点的值，且左、右子树,belg,二叉搜索树,左子树,0,12
树是一种有根节点且子节点具有层次关系的非线性结构,none,根节点,子节点,5,9
二叉树是每个节点最多有两个子树的树结构,belg,二叉树,子树,0,13
二叉树是每个节点最多有两个子树的树结构,belg,二叉树,子树,0,13
顺序查找是按顺序逐个检查数据元素以确定目标元素,rely,顺序查找,数据元素,0,12
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
数据结构中稳定性指排序前后相等元素相对位置不变,b-attr,稳定性,排序,5,9
数据结构中稳定性指排序前后相等元素相对位置不变,b-attr,稳定性,排序,5,9
双向链表是节点含前驱和后继指针的链表结构,belg,双向链表,指针,0,13
双向链表是一种线性数据结构，其中每个节点包含一个数据元素以及分别指向其前驱节点和后继节点的两个指针,belg,双向链表,数据元素,0,24
连通图是指在无向图中，若任意两个顶点之间都存在路径相通，或者在有向图中，对于每一对顶点u和v，都存在从u到,b-belg,连通图,无向图,0,6
数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机，仅考虑数据元素间的抽象关系,rely,逻辑结构,数据元素,3,9
数据类型是一组值的集合以及定义在这组值上的一组操作的总称，它具有特定的取值范围、表示形式和相关操作规则等特点,attr,数据类型,集合,0,9
满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(i,b-belg,满二叉树,二叉树,0,22
映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应,b-belg,映射,集合,0,6
交换排序是通过元素交换位置实现排序的方法,b-belg,交换排序,排序,0,15
循环链表的核心性质是其尾节点的指针指向头节点从而形成一个环形结构使得链表中节点可以依次遍历且无明显终点可循环访问,belg,循环链表,尾节点,0,11
平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1且左右子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
叶子节点是指在树状结构中没有子节点的节点,relative,叶子节点,子节点,0,14
有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
树的深度是从根节点开始，沿最长路径到最远叶节点所经过的节点数，其核心特征为反映了树中节点层次的最大数量以及从根到叶,rely,树的深度,根节点,0,6
双向链表是一种链表数据结构，其每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而形成双向链接关系,b-belg,双向链表,链表,0,7
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的元素在物理位置上也相邻,belg,线性表,数据元素,20,25
回路是在电路中电流能够依次通过各元件形成的闭合路径,b-belg,回路,路径,0,23
完全二叉树是一种二叉树，它的叶子节点只会出现在最下层和次下层，且最下层的叶子节点集中在树的左部，若设二叉树的深度,b-belg,完全二叉树,二叉树,0,8
树的高度是从根节点到最远叶节点的最长路径长度,rely,树的高度,根节点,0,6
递归基础是递归函数中无需再次递归调用的终止条件,rely,递归基础,递归,0,14
指针是内存地址的变量，用于间接访问和操作数据,rely,指针,访问,0,15
单链表通过节点指针依次相连，每个节点只知后继节点,rely,单链表,指针,0,7
树的高度是从根节点到最远叶节点的最长简单路径上的边数，其核心性质包括非空树的高度大于等于0，并且对于任意一棵非空树,rely,树的高度,根节点,0,6
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的方向,b-belg,有向图,图,0,18
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止,rely,顺序查找,线性表,0,6
树是一种非线性数据结构，它由n（n≥0）个有限节点组成，包含一个根节点，且每个节点有零个或多个子节点，除根节点外,relative,根节点,子节点,32,47
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
叶子节点是指在树状结构中没有子节点的节点,relative,叶子节点,子节点,0,14
比较排序是基于元素间比较进行顺序排列的排序方式,b-belg,比较排序,排序,0,19
树的查找基于树形结构从根节点开始按特定规则找目标,rely,查找,根节点,2,11
插入排序的核心性质是将未排序数据插入到已排序序列的合适位置，通过不断重复此操作，最终使整个数组有序,b-belg,插入排序,排序,0,12
树的深度是从根节点到最远叶子节点的最长简单路径上的节点数，它反映了树的层次结构和节点分布情况，体现了树在垂直方向上的,rely,树的深度,根节点,0,6
循环链表是一种特殊的链表，其尾节点的指针指向头节点，使得链表形成一个环，从而可以循环遍历链表中的所有节点,b-belg,循环链表,链表,0,10
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
链表是数据元素通过指针连接的线性存储结构,belg,链表,数据元素,0,3
二叉树遍历按特定顺序访问节点以全面了解树结构,rely,二叉树,遍历,0,3
指针是存储变量内存地址并能通过它访问变量的变量,rely,指针,访问,0,16
插入排序是将未排序数据插入已排序序列的合适位置,b-belg,插入排序,排序,0,7
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
平衡二叉树是左右子树高度差绝对值不超1的二叉排序树,belg,平衡二叉树,子树,0,8
树的查找基于树形结构通过特定路径确定元素位置,rely,查找,路径,2,14
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻,belg,线性表,数据元素,20,25
递归基础是递归算法中满足特定条件的初始情况，在此情况下递归函数直接返回一个已知结果而不再进行递归调用,rely,递归基础,递归,0,5
路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），其边或弧的序列依次连接这些顶点且满足一定的,none,路径,有向图,0,24
堆是一种特殊的数据结构，它满足父节点的值大于或小于其子节点的值（大顶堆或小顶堆），且具有完全二叉树的特性,none,父节点,完全二叉树,15,44
无向图是由顶点集和边集组成的一种图结构其中边集是顶点集的无序对集合且任意一条边连接两个顶点没有方向之分,b-belg,无向图,图,0,16
比较排序是一种排序算法，其核心特征是通过比较元素之间的大小关系来确定元素在排序序列中的位置从而实现排序,b-belg,比较排序,排序,0,7
归并排序是将数组分块排序后合并成有序数组的算法,rely,归并排序,数组,0,6
子节点是树状结构中直接连接在父节点下方的节点，具有在特定层级关系中位于父节点之后且与父节点存在明确连接关系等特点,relative,子节点,父节点,0,14
存储结构是指数据元素及其关系在计算机存储器中的表示，它具有数据元素的表示和关系的表示这两个核心性质,belg,存储结构,数据元素,0,6
循环链表是一种首尾相连的链表结构,b-belg,循环链表,链表,0,12
数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素,attr,数组,数据类型,0,12
树结构中位于顶层无父节点的起始节点是根节点,none,父节点,根节点,9,18
按顺序逐个查找数据直至找到目标或遍历完所有数据,relative,查找,遍历,5,16
回路是数据结构中从起点出发又回到起点的路径,b-belg,回路,路径,0,19
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到最大值，即第i层有2^(i,b-belg,满二叉树,二叉树,0,24
树是一种非线性的数据结构，它有一个根节点，其余节点分为若干互不相交的子树，每个子树也是一棵树且具有递归结构特点,none,根节点,子树,17,34
完全二叉树是这样一种二叉树，若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到,b-belg,完全二叉树,二叉树,0,10
堆排序是利用堆这种数据结构所具有的父节点大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的性质，将待排序数组构建,rely,堆排序,堆,0,6
递归基础的核心特征是存在一个或多个明确的终止条件，当满足这些条件时递归过程不再继续调用自身而是直接返回一个确定的结果,rely,递归基础,递归,0,33
栈是一种只能在一端进行插入和删除操作的特殊线性表，其插入操作称为进栈或入栈，删除操作称为出栈或退栈，遵循后进先出的,relative,插入,删除,11,14
完全二叉树是深度为k的有n个结点的二叉树，对于树中的任一结点，若其编号为i（1≤i≤n），则其左孩子结点,b-belg,完全二叉树,二叉树,0,17
队列是一种特殊的线性表，其特点是只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出原则,b-belg,队列,线性表,0,8
叶子节点的核心特征是在树结构中没有子节点,relative,叶子节点,子节点,0,17
无向图是一种图结构，其中边是没有方向的，即如果存在一条连接顶点u和顶点v的边，那么从u到v和从v到u是同,b-belg,无向图,图,0,6
邻接矩阵用二维数组表示图中顶点间邻接关系,rely,邻接矩阵,数组,0,7
数据结构中稳定性指相同元素排序前后相对位置不变,b-attr,稳定性,排序,5,13
数组是具有相同数据类型元素的有序集合,attr,数组,数据类型,0,7
连通图是图中任意两个顶点之间都存在路径相连的图,rely,连通图,路径,0,17
回路是在图中从一顶点出发又回到该顶点的路径,b-belg,回路,路径,0,19
堆是一种优先队列数据结构，它满足父节点的值大于或等于（最大堆）或小于或等于（最小堆）其子节点的值的特性,none,队列,父节点,6,16
叶子节点的核心特征是没有子节点,attr,叶子节点,子节点,0,12
循环链表是尾节点指向头节点形成循环的链表结构,belg,循环链表,尾节点,0,5
二分查找的核心性质是在一个有序数组中，通过每次将查找区间缩小一半的方式，快速定位目标元素，其前提是数组必须有序,rely,二分查找,数组,0,15
在树形结构中父节点是直接有子节点连接于其下的节点,relative,父节点,子节点,6,13
回路是数据结构中从一个顶点出发，沿着边经过若干顶点后又回到该起始顶点的路径且路径上除起始顶点外其余顶点均不重复,b-belg,回路,路径,0,35
回溯法按选优条件深度优先搜索并适时回溯求解,rely,回溯法,深度优先搜索,0,8
线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表,rely,查找,线性表,2,6
比较排序是基于元素比较来确定元素相对位置的排序方式,b-belg,比较排序,排序,0,21
链表是通过节点指针依次连接存储数据的线性数据结构,rely,链表,指针,0,7
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止,none,查找,遍历,2,43
满二叉树是一种二叉树，其每一层的节点数都达到了最大值，即除叶子节点外每个节点都有两个子节点，叶子节点都在同一层，并且,b-belg,满二叉树,二叉树,0,7
子节点是树状结构中直接连接在父节点之下的节点,relative,子节点,父节点,0,14
树的深度是从根节点到最远叶子节点的最长简单路径上的边数，体现了树在垂直方向上的层次数量，反映了树的结构复杂程度，不同,rely,树的深度,根节点,0,6
数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，仅考虑数据元素之间的抽象关系而不涉及具体的存储方式,belg,逻辑结构,数据元素,3,9
将未排序数据插入已排序序列的合适位置完成排序,rely,排序,插入,2,6
树中从根节点到最远叶子节点的最长简单路径上的边数就是树的高度树中不同节点到根节点的距离可能不同但树的高度是固定值且,relative,根节点,叶子节点,3,9
叶子节点的核心特征是在树结构中没有子节点,relative,叶子节点,子节点,0,17
根节点是树结构中没有前驱节点且唯一的特殊节点,relative,根节点,前驱节点,0,10
指针是存储变量内存地址，能间接访问和修改数据的变量,attr,指针,访问,0,15
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
"无向图是一种由顶点集合以及顶点之间的边集合组成的图结构，其中边是没有方向的，即顶点对(u, v)和顶点对(v, u)",belg,无向图,集合,0,9
图的顶点是图结构中的基本元素，是组成图的各个节点，在有向图或无向图中具有标识和与其他顶点通过边相连的关系以构成图,belg,图的顶点,有向图,0,26
二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,20
指针是存储变量内存地址并能通过它访问变量的变量,rely,指针,访问,0,16
二分查找是在有序数组中通过不断将区间缩小一半来查找目标值，具有查找效率高、时间复杂度为对数级的特点,rely,二分查找,数组,0,8
归并排序的核心特征是采用分治策略，将待排序数组不断分成两个子数组分别递归排序，最后把有序子数组合并成一个有序的数组,b-belg,归并排序,排序,0,19
循环链表是首尾相连的链表，无明显头尾节点,b-belg,循环链表,链表,0,10
链表是通过节点指针依次连接而成的数据结构,rely,链表,指针,0,7
有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，每条有向边从一个顶点指向另一个顶点,b-belg,有向图,图,0,18
根节点是树形结构起始点无父节点有子节点,relative,根节点,父节点,0,12
顺序查找是从线性表的一端开始，依次将关键字与线性表中的元素进行比较，直到找到匹配的元素或到达线性表的末尾,rely,顺序查找,线性表,0,6
连通图是图中任意两点都存在路径相连的图,rely,连通图,路径,0,13
循环链表的核心性质是最后一个节点的指针域指向头节点从而形成一个环形结构使得链表中的节点可以依次遍历且没有明确的终点,attr,循环链表,指针,0,17
连通图是图中任意两点都存在路径可相互连通的图,rely,连通图,路径,0,13
完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,17
邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点,belg,邻接表,链表,0,32
比较排序通过比较元素大小来确定其最终排序位置,b-belg,比较排序,排序,0,18
数组是存储相同类型数据的有序集合,b-belg,数组,集合,0,14
有向图是由顶点集合及顶点间的有向边构成的一种图，其边具有方向性，从一个顶点指向另一个顶点，与无向图不同，有向,belg,有向图,集合,0,7
完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h,b-belg,完全二叉树,二叉树,0,8
连通图是图中任意两个顶点之间都存在路径的图,attr,连通图,路径,0,17
连通图是任意两个顶点之间都存在路径可相互到达的图,rely,连通图,路径,0,15
叶子节点是一棵树中没有子节点的节点,relative,叶子节点,子节点,0,11
无向图是由顶点集和边集组成，其中边集是顶点集的无序对集合，顶点集中的元素称为顶点，边集中的元素是顶点的无序对，,belg,无向图,集合,0,26
树的高度是从根节点到最远叶子节点路径上的边数或节点数，其特点是在有根树中反映了树的层次结构和规模大小等情况,rely,树的高度,根节点,0,6
根节点是树结构中的起始节点，没有父节点，它位于树的顶部，是整个树结构的入口点，通过它可以访问和遍历树的其他节点，是树,none,根节点,父节点,0,16
数组的核心性质是其元素在内存中按顺序存储且具有相同的数据类型，通过下标可以唯一地访问和修改数组中的元素,attr,数组,数据类型,0,26
回路是指在图中从一个顶点出发，沿着边经过若干顶点后又回到该起始顶点的路径且路径中顶点不重复（除起始顶点外）,b-belg,回路,路径,0,34
子节点是树结构中直接连接在父节点之下的节点，具有与父节点通过特定关系相连且在树的层级结构中有其特定位置和作用等特点,relative,子节点,父节点,0,13
链表是一种线性数据结构，其核心性质为每个节点包含数据和指向下一个节点的指针，通过指针依次连接各个节点形成链式结构,belg,链表,指针,0,35
存储结构是指数据元素及其关系在计算机存储器中的表示，它包含数据元素的表示以及数据元素之间关系的表示这两个核心特征,belg,存储结构,数据元素,0,6
非线性结构是一种数据元素之间存在一种或多种非简单的线性关系的数据结构，即数据元素之间的关系不是一对一的线性关系,belg,非线性结构,数据元素,0,8
存储结构的特点的核心性质包括数据元素在计算机内存中的存储方式以及它们之间的逻辑关系如何通过物理存储来体现等方面,belg,存储结构,数据元素,0,14
递归基础是递归算法中存在的一种情况，即当问题规模减小到某一特定值时，可直接得出问题的解而无需再次递归调用,rely,递归基础,递归,0,5
通过选择基准元素将数组分两部分并递归排序,rely,数组,递归,9,16
树的查找的特点的核心特征是基于树的层次结构从根节点开始按照特定规则逐层或分支遍历节点以确定目标元素是否存在于树中,rely,查找,根节点,2,22
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
树的节点是树结构中的基本组成单元包含数据以及指向子节点的指针且除根节点外每个节点有且仅有一个父节点根节点没有父节点,belg,树的节点,子节点,0,24
路径是图中从一个顶点到另一个顶点的顶点序列（若图为有向图则路径有方向，从起始顶点按边的指向到终止顶点，若为无,rely,路径,有向图,0,25
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
顺序表具有随机访问效率高、存储密度大、逻辑上相邻元素物理存储位置也相邻但插入和删除操作效率低等特点,relative,访问,插入,7,36
二叉树遍历的核心特征是通过特定顺序访问二叉树中的每个节点，先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是,rely,二叉树,遍历,0,3
顺序表的核心性质是其逻辑上相邻的元素在物理存储位置上也相邻，并且可以通过下标直接访问元素，时间复杂度为O(1),b-attr,访问,时间复杂度,40,45
根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，所有其他节点都直接或间接连接到根节点，在树的遍历等操作中,relative,根节点,父节点,0,19
路径是图中从一个顶点到另一个顶点的顶点序列，若图为有向图则路径有方向，且在无向图中路径上边无方向而在有向,rely,路径,有向图,0,25
二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值均小于该节点的值，且右子树中的所有节点的值均大于该节点的值,b-belg,二叉搜索树,二叉树,0,8
选择基准元素分治排序使数组快速有序,rely,排序,数组,8,11
双向链表是一种链表数据结构，其每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而形成双向链接关系,b-belg,双向链表,链表,0,7
队列特点是先进先出，元素按顺序入队出队,rely,队列,入队,0,15
深度优先搜索是按路径延伸到最深层再回溯的搜索方法,rely,深度优先搜索,路径,0,8
数据类型定义的核心性质包括具有特定的值集合、定义了一组对这些值的操作以及规定了这些操作所遵循的规则,belg,数据类型,集合,0,19
连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于任意两个顶点u和v，既存在从u到v的路径也,b-belg,连通图,无向图,0,6
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或到达线性表末尾的查找方法,rely,查找,线性表,2,6
回路是图中从某顶点出发又回到该顶点的路径,b-belg,回路,路径,0,18
单链表是一种链式存储的线性表，每个节点包含数据元素以及指向后继节点的指针，通过头节点可顺序访问链表中的各个节点,b-belg,单链表,线性表,0,11
有向图是一种由顶点集合以及顶点之间的有向边集合组成的图结构，其中每条有向边都具有明确的方向，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
循环链表是一种首尾相连的链表，无明显头指针和尾指针,b-belg,循环链表,链表,0,12
链表由节点组成，节点含数据及指针指向下一节点,belg,链表,指针,0,14
树是一种分层数据结构包含根节点和子节点,relative,根节点,子节点,12,16
叶子节点是数据结构中没有子节点的节点,relative,叶子节点,子节点,0,12
满二叉树是深度为k且有2^k - 1个节点的二叉树，其每一层的节点数都达到最大值，叶子节点都在最底层，且每个,b-belg,满二叉树,二叉树,0,22
树中没有子节点的节点即叶子节点,none,子节点,叶子节点,4,11
顺序查找是从数据序列的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个序列为止,b-belg,顺序查找,查找,0,25
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左子树和右子树都是一棵平衡,none,平衡二叉树,排序,0,10
双向链表节点有前驱和后继指针可双向遍历,belg,双向链表,指针,0,12
叶子节点是树结构中没有子节点的节点,relative,叶子节点,子节点,0,11
按顺序逐个检查数据元素以查找目标元素的查找方式,rely,数据元素,查找,7,12
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向连接,b-belg,有向图,图,0,18
冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法,rely,冒泡排序,数组,0,39
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果该二叉树的深度为h，那么它的节点总数为2^h - 1,b-belg,满二叉树,二叉树,0,7
叶子节点是数据结构中没有子节点的节点,relative,叶子节点,子节点,0,12
二叉树遍历是按特定顺序访问二叉树中所有节点,rely,二叉树,遍历,0,3
数组是存储相同类型数据的有序集合,b-belg,数组,集合,0,14
归并排序是将一个数组分成两个子数组，对这两个子数组分别进行排序，再将排序好的子数组合并成一个有序的数组的排序算法,rely,归并排序,数组,0,8
线性结构中数据元素之间存在一对一的线性关系,belg,线性结构,数据元素,0,5
平衡二叉树的核心特征是树上任一结点的左子树和右子树的高度差不超过1，并且左右两个子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
根节点是树结构中处于顶层无父节点的起始节点,relative,根节点,父节点,0,13
连通图是指在无向图中，若任意两个顶点之间都存在路径，则该无向图为连通图，在有向图中，若对于每一对顶点u和,b-belg,连通图,无向图,0,6
根节点是树结构中的起始节点，没有父节点，具有唯一标识整棵树的作用，树中其他节点都直接或间接连接到根节点,relative,根节点,父节点,0,16
子节点是树结构中直接位于某一节点下方的节点，具有与父节点通过特定的边相连且是该父节点所关联的下一层级节点的特点,relative,子节点,父节点,0,25
递归基础具有明确的终止条件，是递归算法中最简单的情况，在此情况下递归函数直接返回一个确定的结果而不再进行递归调用,b-rely,递归基础,递归,0,15
叶子节点是树结构中没有子节点的末端节点,relative,叶子节点,子节点,0,11
回路是指在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点的路径且路径中除起始顶点外其他顶点不重复经过,b-belg,回路,路径,0,32
数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素,attr,数组,数据类型,0,12
数组是相同类型数据元素的有序集合,belg,数组,数据元素,0,7
递归基础的核心特征是存在一个或多个明确的终止条件，在这些条件下递归过程不再继续调用自身而是直接返回一个确定的结果,rely,递归基础,递归,0,31
二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,20
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值均小于该节点的值，且右子树中的所有节点的值均大于该节点的值,b-belg,二叉搜索树,二叉树,0,8
平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1，并且左右子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
循环链表是链表尾节点指向头节点形成循环的链表结构,b-belg,循环链表,链表,0,5
队列是一种特殊的线性表，它只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
递归基础具有明确的终止条件，是递归算法中最简单、最基本的情况，不依赖于进一步的递归调用即可直接得出结果,b-belg,递归基础,递归,0,15
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索策略，从根节点出发搜索解空间树，当探索到某一节点时,rely,回溯法,深度优先搜索,0,27
链表由节点组成各节点通过指针相连数据存储不连续,rely,链表,指针,0,12
图的顶点是图这种数据结构中组成图的基本元素之一，是图中用于表示某个对象或实体的节点，在有向图或无向图中具有标识作用,belg,图的顶点,有向图,0,43
数组是相同类型数据元素的有序集合,belg,数组,数据元素,0,7
满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其中每一层的节点数都达到最大值，即第i层有2^(i-,b-belg,满二叉树,二叉树,0,22
二叉树遍历是按照某种特定顺序访问二叉树中每个节点一次且仅一次，包括先序遍历（先访问根节点，再递归访问左子树和右子树）,rely,二叉树,遍历,0,3
顺序查找按顺序逐个检查元素直至找到目标或遍历完,rely,顺序查找,遍历,0,20
二叉搜索树的核心性质是对于树中的每个节点，其左子树中的所有节点值都小于该节点值，其右子树中的所有节点值都大于该节点值,belg,二叉搜索树,左子树,0,22
有向图是由顶点集合及顶点间的有向边构成的一种图，其边是有方向的，即从一个顶点指向另一个顶点，顶点之间的连接具有,none,有向图,集合,0,7
图的顶点是图结构中用于表示数据元素的基本单元，是构成图的重要组成部分且在图的各种操作和关系中具有关键作用,none,图的顶点,数据元素,0,13
递归基础是递归函数中终止递归调用的初始条件,rely,递归基础,递归,0,12
循环链表是一种链表，其尾节点的指针指向头节点，使得从链表中的任何一个节点开始都可以遍历整个链表形成一个环,b-belg,循环链表,链表,0,7
二叉树遍历是按特定顺序访问二叉树中所有节点,rely,二叉树,遍历,0,3
完全二叉树是深度为k的有n个结点的二叉树，除第k层外，其余各层的结点数都达到最大个数，且第k层的结点都,b-belg,完全二叉树,二叉树,0,17
栈是一种只能在一端进行插入和删除操作的特殊线性表,relative,插入,删除,11,14
单链表由节点组成每个节点含数据及指向下一节点指针,belg,单链表,指针,0,22
插入排序的核心特征是将未排序数据插入到已排序序列的合适位置，通过不断重复此操作，逐步将整个数组变为有序,b-belg,插入排序,排序,0,12
广度优先搜索按层次依次扩展节点以遍历图或树,attr,广度优先搜索,遍历,0,16
完全二叉树的核心特征是：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大,b-belg,完全二叉树,二叉树,0,14
树的深度的核心特征是从根节点到最远叶子节点所经过的最长路径上的节点数，它反映了树在垂直方向上的层次数量，体现了树结构,rely,树的深度,根节点,0,11
邻接矩阵是表示图的一种方式，其特点包括：对于有向图，邻接矩阵中第i行第j列的元素值若为1表示从顶点i到,rely,邻接矩阵,有向图,0,22
邻接矩阵是表示图的一种矩阵，其中矩阵元素的值表示图中顶点之间是否存在边以及边的相关信息（如权值等），对于无向图其邻,rely,邻接矩阵,无向图,0,52
二叉树的子树有左右之分，次序不能颠倒,belg,二叉树,子树,0,4
线性表是数据元素一对一排列的有限序列,belg,线性表,数据元素,0,4
子节点是树结构或图结构中与父节点相对应的节点，其特点的核心特征包括：子节点是父节点的直接后继节点，在树结构中处于比,relative,子节点,父节点,0,13
树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树的层次结构深度以及节点分布的广度，体现了树中节点在,rely,树的高度,根节点,0,6
指针是存储变量内存地址并可通过它访问该变量的变量,attr,指针,访问,0,16
连通图是指在无向图中任意两个顶点之间都存在路径相连，在有向图中任意一对顶点间都存在有向路径相互可达的图,b-belg,连通图,无向图,0,6
在树形数据结构中若存在节点A和节点B，当节点B直接连接于节点A且节点A为父节点时节点B就是节点A的子节点,relative,父节点,子节点,36,49
存储结构的核心性质是数据元素及其关系在计算机存储器中的表示方式以及如何通过这种表示实现对数据的高效存储、访问和操作,belg,存储结构,数据元素,0,10
有向图是一种图结构，其边具有方向性，即从一个顶点指向另一个顶点，这是有向图区别于无向图的核心特征，通过有向边,b-belg,有向图,图,0,6
数据逻辑结构是数据元素间逻辑关系的整体,belg,逻辑结构,数据元素,2,7
数组是相同类型数据的有序集合且内存连续存储,b-belg,数组,集合,0,12
平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度之差不超过1并且左右两个子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
树的深度的核心特征是从根节点到最远叶子节点所经过的最长路径上的节点数，它反映了树在纵向方向上的层次数量和结构复杂程度,rely,树的深度,根节点,0,11
线性表是数据元素一对一线性关系的有限序列,belg,线性表,数据元素,0,4
二叉树遍历是按特定顺序访问其节点的操作过程,none,二叉树,遍历,0,3
根节点是树结构中的起始节点，没有父节点，是整个树结构的顶端节点，它处于树的最上层，是树中所有其他节点的祖先，从根节点,relative,根节点,父节点,0,16
顺序查找的核心特征是从数据序列的第一个元素开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列,rely,顺序查找,遍历,0,42
平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,attr,平衡二叉树,树的高度,0,18
线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到该关键字或者遍历完整个线性表的查找方法,rely,查找,线性表,2,6
回路是图中从某顶点出发又回到该顶点的路径,b-belg,回路,路径,0,18
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
哈希表是一种数据结构它通过哈希函数将键映射到特定位置来存储和检索数据具有快速查找平均时间复杂度接近常数的特点,rely,哈希表,哈希函数,0,13
邻接表以链表形式存储图中顶点及邻接关系,rely,邻接表,链表,0,4
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性,b-belg,队列,线性表,0,8
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止,rely,顺序查找,线性表,0,6
二叉树的特点是每个节点最多有两棵子树，并且子树有左右之分，其定义涵盖了节点间的层次关系、遍历顺序等相关特性,belg,二叉树,子树,0,16
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值,b-belg,满二叉树,二叉树,0,24
非线性结构中数据元素之间的关系不满足线性关系,belg,非线性结构,数据元素,0,6
邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点,belg,邻接表,链表,0,32
二分查找是在有序数组中，通过不断将区间分成两半并比较中间元素与目标值，以确定目标值所在位置的查找算法,rely,二分查找,数组,0,8
根节点是树结构中的一个特殊节点，它没有父节点，且是树中所有其他节点的祖先，树中的所有节点都直接或间接与根节点相连,none,根节点,父节点,0,19
满二叉树是深度为k且有2的k次方减1个节点的二叉树其中每一层上的节点数都达到最大值即第i层上有2的i减,b-belg,满二叉树,二叉树,0,22
抽象数据类型是指一个数学模型以及定义在该模型上的一组操作，它强调数据的逻辑结构和相关操作而不涉及具体的存储表示,attr,抽象数据类型,逻辑结构,0,35
双向链表是一种链表数据结构，其每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针，从而可以双向遍历链表,b-belg,双向链表,链表,0,7
链表是通过指针将节点连接起来的线性数据结构,rely,链表,指针,0,5
线性结构的核心性质是数据元素之间存在着一对一的线性关系，即除第一个元素外，每个元素有且仅有一个前驱,belg,线性结构,数据元素,0,10
子节点是树状结构中直接连接在父节点之下的节点,relative,子节点,父节点,0,14
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向连接,b-belg,有向图,图,0,18
子节点是树结构中直接连接在父节点之下的节点,relative,子节点,父节点,0,13
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
循环链表是一种链表，其尾节点的指针指向头节点，使得链表形成一个环形结构，从而可以从链表中的任意节点开始遍历整个链表,b-belg,循环链表,链表,0,7
完全二叉树是一种特殊的二叉树，其特点是除了最后一层外，每一层上的节点数都是满的，并且最后一层上的节点都集中在该层,b-belg,完全二叉树,二叉树,0,11
树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树的层次结构深度以及节点分布的最大层级跨度,rely,树的高度,根节点,0,6
循环链表是一种链表，其尾节点的指针指向头节点，使得从链表中的任何一个节点出发都可以遍历整个链表形成一个环,b-belg,循环链表,链表,0,7
无向图的核心特征是由顶点集合以及顶点之间的边集合组成，且边是没有方向的，即顶点之间的连接关系是对称的，从顶点A到顶点,rely,无向图,集合,0,12
线性表是数据元素有序排列且有唯一前驱和后继的序列,belg,线性表,数据元素,0,4
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻,belg,线性表,数据元素,20,25
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
哈希表通过哈希函数将键映射到特定位置以快速存取数据,rely,哈希表,哈希函数,0,5
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
树的度是指一棵树中，其节点拥有子树的最大数目,none,树的度,子树,0,15
循环链表是尾节点指针指向头节点的链表结构,belg,循环链表,尾节点,0,5
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表,b-belg,链表,存储结构,0,20
数据的物理结构是数据在计算机中的存储表示形式，其核心性质包括数据元素的存储方式以及数据元素之间关系的表示方法,belg,物理结构,数据元素,3,30
二分查找是在有序数组中通过不断将区间分成两半并根据目标值与中间元素的比较结果来确定目标值所在位置的查找算法,rely,二分查找,数组,0,8
树中一个节点的子树数目称为该节点的度，树中所有节点度的最大值就是树的度，其核心特征是反映树中节点分支情况以及整棵树,none,子树,树的度,7,32
将未排序数据插入已排序序列的合适位置进行排序,rely,排序,插入,2,6
加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值用于表示与边相关的某种代价、距离、容量等属性,b-belg,加权图,图,0,6
交换排序通过比较与交换元素位置来实现排序,b-rely,交换排序,排序,0,18
邻接矩阵是用一个二维数组来表示图中顶点之间邻接关系的矩阵，对于有n个顶点的图，其邻接矩阵是一个n×n的矩阵，,rely,邻接矩阵,数组,0,10
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
按照特定顺序访问二叉树中所有节点的操作叫遍历,rely,访问,二叉树,6,8
栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底,relative,插入,删除,11,14
树的查找的特点的核心性质是通过对树中节点的比较和遍历，利用树的层次结构和节点间的关系来确定目标元素是否存在于树中,rely,查找,遍历,2,24
数组是一种有序数据集合，其中的元素具有相同的数据类型，并且可以通过一个统一的数组名和下标来唯一标识和访问每个元素,b-belg,数组,集合,0,9
有向图的核心特征是其边具有方向性，即从一个顶点指向另一个顶点，顶点之间的连接是单向的，不同于无向图中边没有方向的情况,relative,有向图,无向图,0,46
迭代法是一种通过从一个初始估计值开始，按照一定的迭代公式不断重复计算，逐步逼近问题精确解的数值计算方法,attr,迭代法,迭代,0,24
将未排序数据插入已排序序列的合适位置完成排序,rely,排序,插入,2,6
深度优先搜索按深度依次访问节点直至无法深入再回溯,attr,深度优先搜索,访问,0,11
循环链表是链表尾节点指向头节点形成环的数据结构,b-belg,循环链表,链表,0,5
归并排序是将数组分成子数组排序后合并成有序数组,rely,归并排序,数组,0,6
完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h,b-belg,完全二叉树,二叉树,0,8
根节点是树结构起始点无父节点且具有特殊地位,relative,根节点,父节点,0,11
平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,attr,平衡二叉树,树的高度,0,18
简单排序是对数据序列进行比较和交换等操作，通过多次逐步调整使数据有序，具有操作相对简单直观、时间复杂度一般较高等特点,attr,简单排序,时间复杂度,0,46
双向链表每个节点有前驱和后继指针可双向遍历,belg,双向链表,指针,0,14
子节点是树结构中直接位于某一节点下方的节点，它与父节点存在直接的层级关系，是父节点所衍生出来的下一级节点,relative,子节点,父节点,0,24
堆是一种优先队列数据结构，它满足堆序性质，即父节点的值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值,none,队列,父节点,6,22
归并排序是将数组分块排序后合并成有序数组的算法,rely,归并排序,数组,0,6
邻接表的核心特征是用链表来表示图中顶点的邻接关系，每个顶点对应一个链表，链表中存储与该顶点相邻接的其他顶点,rely,邻接表,链表,0,10
非线性结构中数据元素之间存在非一对一的关系,belg,非线性结构,数据元素,0,6
在树形结构中，根节点是没有前驱节点且唯一的起始节点，它位于树的顶部，是整棵树的核心，通过它衍生出树的其他节点,relative,根节点,前驱节点,7,13
链表是一种通过指针将一组数据元素按顺序链接起来的数据结构，每个数据元素包含数据部分和指向下一个元素的指针部分,rely,链表,指针,0,7
交换排序是通过元素间比较与交换位置实现排序,b-belg,交换排序,排序,0,19
树是一种非线性的数据结构，它有一个根节点，且每个节点有零个或多个子节点，子节点之间形成层次关系，具有递归性和分支结构,relative,根节点,子节点,17,32
路径是图中从一个顶点到另一个顶点的顶点序列（若图为有向图则路径有方向，从起始顶点按边的方向到达终止顶点，若为无,rely,路径,有向图,0,25
队列是一种特殊的线性表，其核心特征是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
归并排序是将数组分成子数组排序后合并成有序数组,rely,归并排序,数组,0,6
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向关系,b-belg,有向图,图,0,18
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻,belg,线性表,数据元素,20,25
数据逻辑结构指数据元素间抽象关系不依赖存储,belg,逻辑结构,数据元素,2,7
图的边是连接图中两个顶点的元素，它表示顶点之间的某种关系，并且具有方向（有向图）或无方向（无向图）的属性，通过,none,图的边,有向图,0,36
操作效率是指在数据结构中执行特定操作（如插入、删除、查找等）所花费的时间或资源的多少来衡量该操作的效率情况,rely,操作效率,插入,0,20
堆是一种特殊数据结构，父节点键值大于或小于子节点,relative,父节点,子节点,11,21
线性查找是从数据序列的起始位置开始，依次将每个元素与目标值进行比较，直到找到目标值或遍历完整个序列的查找方法,rely,查找,遍历,2,42
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
数据的物理结构的核心性质包括数据元素在计算机中的存储方式以及数据元素之间的逻辑关系如何通过存储结构来体现等方面,belg,物理结构,数据元素,3,14
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止,rely,顺序查找,线性表,0,6
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
穷举法是对问题所有可能的情况进行逐一列举和检验，以找出满足条件的解，其核心性质是通过全面遍历所有可能情况来求解问题,attr,穷举法,遍历,0,44
树中没有子节点的节点即叶子节点,none,子节点,叶子节点,4,11
叶子节点是树结构中没有子节点的末端节点,relative,叶子节点,子节点,0,11
二叉搜索树中每个节点左子树值小于该节点右子树值,belg,二叉搜索树,左子树,0,10
连通图中任意两个顶点之间都存在路径,belg,连通图,路径,0,15
连通图是指图中任意两个顶点之间都存在路径相连的图,rely,连通图,路径,0,18
连通图中任意两点之间都存在路径可相互到达,rely,连通图,路径,0,13
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
循环链表是一种链表，其尾节点的指针域指向头节点，从而形成一个环形结构，使得从链表中的任意节点出发都可以遍历整个链表,b-belg,循环链表,链表,0,7
栈是一种后进先出的数据结构，其核心性质为元素的插入和删除操作都在栈顶进行，新元素入栈后成为栈顶元素，栈顶元素始终是,relative,插入,删除,23,26
映射是一种从集合A到集合B的对应关系，对于集合A中的每一个元素，在集合B中都有唯一的一个元素与之对应,b-belg,映射,集合,0,6
树中没有子节点的节点就是叶子节点,none,子节点,叶子节点,4,12
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
加权图是一种图结构，其中每条边都被赋予一个数值作为权重，这些权重可用于表示诸如距离、成本、容量等各种与边相关的度量,b-belg,加权图,图,0,6
存储结构核心概念是数据元素及其关系的存储方式,belg,存储结构,数据元素,0,9
连通图中任意两点之间都存在路径可相互连通,rely,连通图,路径,0,13
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
树的节点的核心性质是每个节点有零个或多个子节点，且有一个被称为根的特殊节点，除根节点外的每个节点有且仅有一个父节点,belg,树的节点,子节点,0,20
二叉搜索树是一棵空树或者具有如下性质的二叉树：若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值,b-belg,二叉搜索树,二叉树,0,19
二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,19
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
二叉树遍历按特定顺序访问节点以全面了解结构,rely,二叉树,遍历,0,3
子节点是树结构中直接连接在父节点之下的节点,relative,子节点,父节点,0,13
平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度差不超过1并且左子树和右子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
非线性结构中数据元素之间的关系不满足线性关系,belg,非线性结构,数据元素,0,6
二叉树遍历是按特定顺序访问二叉树中所有节点的操作,rely,二叉树,遍历,0,3
冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序好的排序算法,rely,冒泡排序,数组,0,39
二叉树遍历按特定顺序访问节点以全面了解结构,rely,二叉树,遍历,0,3
简单排序是对数据序列进行排序的方法，其核心性质包括比较元素大小并根据比较结果交换元素位置以逐步将序列调整为有序状态,b-belg,简单排序,排序,0,12
数组是具有相同数据类型的一组数据元素的集合，这些元素在内存中按顺序存储，通过下标可以唯一地访问数组中的每个元素,attr,数组,数据类型,0,7
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
邻接表通过链表存储图中顶点及邻接顶点信息,rely,邻接表,链表,0,5
数组是存储相同数据类型元素的有序集合,attr,数组,数据类型,0,7
二叉树每个节点最多有两个子节点,belg,二叉树,子节点,0,12
有向图是由顶点集和有向边集组成的一种图结构，其中每条有向边是一个有序对，由两个顶点构成，表示从一个顶点到另一个顶点,b-belg,有向图,图,0,18
单链表是一种链式存储的线性表，每个节点包含数据域和指针域，指针域指向下一个节点，通过头节点可依次访问链表中的各个节点,b-belg,单链表,线性表,0,11
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可表示诸如距离、成本、容量等某种度量,b-belg,加权图,图,0,6
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
非线性结构中数据元素之间的关系不呈线性关系,belg,非线性结构,数据元素,0,6
线性查找的核心特征是从数据序列的第一个元素开始，依次逐个检查每个元素，直到找到目标元素或遍历完整个序列为止,none,查找,遍历,2,44
二叉树是一种每个节点最多有两个子树的树形结构包括一个根节点以及左子树和右子树并且左子树和右子树也都是二叉树,belg,二叉树,子树,0,15
广度优先搜索按层次依次访问节点以找到目标节点,rely,广度优先搜索,访问,0,11
冒泡排序是一种比较相邻元素大小，如果顺序错误就把它们交换过来，不断重复此操作直到整个数组都被排序好的排序算法,rely,冒泡排序,数组,0,42
线性结构中数据元素存在一对一的线性关系,belg,线性结构,数据元素,0,5
满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，叶子节点都在最底层，且,b-belg,满二叉树,二叉树,0,22
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
树中数据元素及指向子树分支构成的基本单位是节点,none,数据元素,子树,2,9
满二叉树是除叶子外每个节点都有两个子节点的二叉树,belg,满二叉树,子节点,0,17
数据逻辑结构是数据元素间逻辑关系的整体,belg,逻辑结构,数据元素,2,7
根节点是树结构中的起始节点，没有父节点，是整个树的入口点，它与其他节点通过边相连并处于树的最顶层位置，是树状结构中,none,根节点,父节点,0,16
树的高度是从根节点到最远叶节点的最长路径长度,rely,树的高度,根节点,0,6
连通图中任意两点之间都存在路径可相互到达,rely,连通图,路径,0,13
顺序表具有逻辑上相邻的元素在物理存储位置上也相邻、可随机访问、存储密度高、插入和删除操作效率低等特点,relative,访问,插入,28,37
数组是相同类型数据的有序集合且内存连续存储,b-belg,数组,集合,0,12
满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果二叉树的深度为k，那么该满二叉树的节点总数为2^k -,b-belg,满二叉树,二叉树,0,7
树的深度是从根节点到最远叶节点的最长路径长度,rely,树的深度,根节点,0,6
叶子节点的核心特征是在树结构中没有子节点,relative,叶子节点,子节点,0,17
堆排序是利用堆结构进行排序的算法,rely,堆排序,堆,0,6
子节点是树结构中直接位于某一节点下方的节点，具有与父节点存在直接层级关系且处于其下一层级的核心性质,relative,子节点,父节点,0,25
树的节点的核心性质包括每个节点有零个或多个子节点、有且仅有一个根节点、除根节点外每个节点有且仅有一个父节点,belg,树的节点,子节点,0,21
满二叉树是一种二叉树，其每一层的节点数都达到最大值，即如果该满二叉树的深度为h，则其节点总数为2^h - 1，,b-belg,满二叉树,二叉树,0,7
冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法,rely,冒泡排序,数组,0,39
树的节点包含数据元素以及指向子节点的指针且根节点没有前驱节点其余节点有唯一前驱节点每个节点可有零个或多个子节点,belg,树的节点,数据元素,0,6
叶子节点是树结构中没有子节点的节点，其特点包括处于树的最底层、没有分支向外延伸、是数据或信息的最终存储位置等,relative,叶子节点,子节点,0,11
