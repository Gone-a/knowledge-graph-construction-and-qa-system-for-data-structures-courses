sentence,relation,head,tail,head_offset,tail_offset
线性查找是在一个给定的数据序列中从第一个元素开始依次逐个检查元素，直至找到目标元素或遍历完整个序列的查找方法,rely,查找,遍历,2,42
完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,17
连通图是指在无向图中任意两个顶点之间都存在路径，或者在有向图中对于任意两个顶点u和v，既存在从u到v的路径也,rely,连通图,无向图,0,6
二叉树遍历按特定顺序访问节点以全面了解结构,rely,二叉树,遍历,0,3
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的元素在物理位置上也相邻的数据结构,belg,线性表,数据元素,20,25
邻接矩阵是用来表示图的一种矩阵，其中行和列对应图的顶点，矩阵元素的值表示对应顶点之间是否有边相连，若有边相连则值为1,rely,邻接矩阵,图的顶点,0,23
数据类型是一组值的集合以及定义在这组值上的一组操作的总称，具有特定的取值范围、存储方式和操作规则等特点,b-belg,数据类型,集合,0,9
归并排序是将数组分成子数组排序后合并成有序数组,rely,归并排序,数组,0,6
哈希表通过哈希函数将数据映射到特定位置以快速存取,rely,哈希表,哈希函数,0,5
数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，仅考虑数据元素之间的抽象关系而不涉及具体的存储方式,rely,逻辑结构,数据元素,3,9
树中一个节点的子树数目称为该节点的度，树中所有节点度的最大值就是树的度，其核心特征是反映树中节点分支情况以及整棵树,none,子树,树的度,7,32
二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值都小于该节点的值，且右子树中的所有节点的值都大于该节点的值,b-belg,二叉搜索树,二叉树,0,8
非线性结构中数据元素之间的关系不呈线性关系,belg,非线性结构,数据元素,0,6
树的查找基于树形结构从根节点开始按特定规则找目标,rely,查找,根节点,2,11
树是一种非线性数据结构有根节点和子树关系,none,根节点,子树,12,16
堆是一种特殊的数据结构，它满足父节点的键值大于或小于其子节点的键值（大顶堆或小顶堆），且具有完全二叉树的性质,none,父节点,完全二叉树,15,46
堆是一种完全二叉树，父节点键值大于或小于子节点,belg,完全二叉树,父节点,4,10
二叉树是一种每个节点最多有两个子树的树形结构,belg,二叉树,子树,0,15
交换排序是一种排序算法，其核心性质是通过比较元素并交换不满足顺序要求的元素位置来逐步将无序序列转变为有序序列,b-belg,交换排序,排序,0,7
连通图是指在无向图中，若任意两个顶点之间都存在路径相通，或者在有向图中，对于每一对顶点u和v，都存在从u到,b-belg,连通图,无向图,0,6
数据逻辑结构特点指数据元素间抽象关系及特性,rely,逻辑结构,数据元素,2,9
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值即2^(i-1)（,b-belg,满二叉树,二叉树,0,24
树的高度是从根节点到最远叶子节点的最长简单路径上的边数，它反映了树中节点层次结构的深度以及树的结构复杂程度,rely,树的高度,根节点,0,6
叶子节点是树结构中没有子节点的节点,b-belg,叶子节点,子节点,0,11
邻接矩阵的核心性质是其元素表示图中顶点之间是否存在边，若顶点\(i\)与顶点\(j\)之间有边相连，则邻接矩阵,none,邻接矩阵,邻接矩阵,0,51
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性,b-belg,队列,线性表,0,8
线性结构中数据元素存在一对一的线性关系,belg,线性结构,数据元素,0,5
存储结构定义的核心性质包括数据元素在计算机内存中的存储方式以及它们之间的逻辑关系如何通过存储方式得以体现等方面,belg,存储结构,数据元素,0,13
邻接表是一种用于表示图的数据结构，对于图中的每个顶点，都有一个链表与之对应，链表中的节点表示与该顶点相邻接的其他顶点,none,邻接表,链表,0,31
广度优先搜索按层次依次扩展节点以遍历图或树,rely,广度优先搜索,遍历,0,16
插入排序是将未排序数据插入已排序序列合适位置,b-belg,插入排序,排序,0,7
图的核心性质包括顶点集合和边集合的定义，顶点之间通过边相连，边可以有方向或无方向，图可以分为有向图和无向图，并且图,none,集合,集合,10,14
堆是一种特殊数据结构，父节点键值大于或小于子节点,rely,父节点,子节点,11,21
子节点是树结构中直接连接在父节点之下的节点,belg,子节点,父节点,0,13
递归基础是递归定义中满足特定条件的初始情况其核心性质是具有明确的、无需进一步递归即可确定的定义值或状态,belg,递归基础,递归,0,5
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
二叉树遍历的定义的核心性质包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问,rely,二叉树,遍历,0,3
线性查找是在一个数据序列中从起始位置开始依次逐个检查元素，直至找到目标元素或遍历完整个序列的查找方法,rely,查找,遍历,2,38
叶子节点是树结构中没有子节点的节点,b-belg,叶子节点,子节点,0,11
邻接表的核心特征是用链表来表示图中顶点的邻接关系，对于图中的每个顶点，都有一个链表与之对应，链表中存储了与该顶点相邻,rely,邻接表,链表,0,10
平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1，并且左右子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
链表是由节点组成通过指针相连的线性数据结构,rely,链表,指针,0,10
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,belg,选择排序,排序,0,10
非线性结构中数据元素之间的关系不呈线性,belg,非线性结构,数据元素,0,6
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,belg,选择排序,排序,0,10
无向图是一种图结构，由顶点集合和边集合组成，其中边是顶点的无序对，顶点之间通过边相连且不区分边的方向,b-belg,无向图,图,0,6
树中从根节点到最远叶节点最长简单路径上边的数目,rely,根节点,路径,3,16
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值,b-belg,满二叉树,二叉树,0,24
平衡二叉树的核心特征是树上任一结点的左子树和右子树的深度之差不超过1并且左右两个子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底,none,插入,删除,11,14
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,belg,选择排序,排序,0,10
图的顶点是图结构中用于表示数据元素的基本单元，它具有特定的标识且可能与其他顶点通过边相连以构成图的结构,b-belg,图的顶点,数据元素,0,13
回路是在图中从一个顶点出发，沿着边连续移动，最终回到起始顶点的路径且除起始顶点外所经过的顶点不重复,b-belg,回路,路径,0,31
每个数据元素包含数据和指针两部分，指针指向下,belg,数据元素,指针,2,11
二叉树的特点是每个节点最多有两棵子树，并且子树有左右之分，其定义涵盖了节点间的层次关系、遍历顺序等相关特性,belg,二叉树,子树,0,16
图的顶点是图结构中用于表示数据元素的基本单元，是构成图的重要组成部分且在图的各种操作和关系中具有关键作用,belg,图的顶点,数据元素,0,13
二叉树是一种每个节点最多有两个子树的树形结构,belg,二叉树,子树,0,15
平衡二叉树是左右子树高度差不超1的二叉排序树,belg,平衡二叉树,子树,0,8
栈是一种后进先出的数据结构，其操作主要包括入栈将元素添加到栈顶、出栈从栈顶移除元素以及获取栈顶元素等，且栈在内存,anto,入栈,出栈,21,32
将未排序数据插入已排序序列的合适位置完成排序,rely,排序,插入,2,6
广度优先搜索按层次依次扩展节点以遍历图或树,rely,广度优先搜索,遍历,0,16
按特定顺序访问二叉树中所有节点的操作叫遍历,rely,访问,二叉树,5,7
递归基础是递归算法中存在的一种情况，即当问题规模减小到某一特定值时，可直接得出问题的解而无需再次递归调用,belg,递归基础,递归,0,5
简单排序是对数据序列进行比较和交换等操作，通过多次逐步调整使数据有序，具有操作相对简单直观、时间复杂度一般较高等特点,attr,简单排序,时间复杂度,0,46
满二叉树是深度为k且有2的k次方减1个节点的二叉树其中每一层上的节点数都达到最大值即第i层上有2的i减,b-belg,满二叉树,二叉树,0,22
指针是存储变量内存地址并能通过它访问变量的变量,rely,指针,访问,0,16
邻接矩阵是表示图的一种矩阵，对于一个具有n个顶点的图，其邻接矩阵是一个n×n的矩阵，若顶点i到顶点j有边相连,syno,邻接矩阵,邻接矩阵,0,28
回溯法按选优条件深度优先搜索并适时回溯找解,rely,回溯法,深度优先搜索,0,8
完全二叉树的核心特征是：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大,b-belg,完全二叉树,二叉树,0,14
树的查找特点是基于树的结构特性，通过从根节点开始按照特定规则比较节点值来确定目标元素是否存在于树中以及其所在位置,rely,查找,根节点,2,19
映射是集合间元素按规则对应关系的一种数学概念,rely,映射,集合,0,3
双向链表是节点包含前驱和后继指针的链表结构,belg,双向链表,指针,0,14
根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接连接到根节点,none,根节点,父节点,0,19
数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，且与数据的运算无关，仅关注数据元素之间的关联方式,rely,逻辑结构,数据元素,3,9
简单排序是对数据序列通过比较和交换元素位置等基本操作，将其按特定顺序（如升序或降序）排列的排序方法,b-belg,简单排序,排序,0,45
二叉树是每个节点最多有两个子树的树结构,belg,二叉树,子树,0,13
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
堆是一种特殊的数据结构，它满足父节点的键值大于或小于其子节点的键值（大顶堆或小顶堆），并且具有完全二叉树的特性,none,父节点,完全二叉树,15,47
线性查找是在一个数据序列中从第一个元素开始依次逐个检查，直到找到目标元素或遍历完整个序列为止的查找方法,rely,查找,遍历,2,37
链表通过节点指针相连，数据存储不连续且可灵活增减,rely,链表,指针,0,6
循环链表是一种链表结构，其尾节点的指针域指向头节点，从而形成一个环，使得从链表中的任意节点出发都能遍历整个链表,b-belg,循环链表,链表,0,7
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
回路是指在图中从一个顶点出发，沿着边经过若干顶点后又回到该起始顶点的路径且路径中顶点不重复（除起始顶点外）,belg,回路,路径,0,34
二叉搜索树是一棵空树或者具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,19
无向图是一种由顶点集合以及顶点之间的边集合组成的图结构，其中边是没有方向的，即顶点之间的连接是双向的,belg,无向图,集合,0,9
顺序查找按顺序逐个检查元素直至找到目标或遍历完,rely,顺序查找,遍历,0,20
回路是数据结构中从一个顶点出发，沿着边经过一系列顶点后又回到该起始顶点的路径且路径中至少包含一条边,belg,回路,路径,0,36
映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一确定的元素与之对应,rely,映射,集合,0,6
回路是从一点出发经一系列节点后又回到该点的路径,b-belg,回路,路径,0,21
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
指针是存储变量内存地址的变量用于间接访问数据,rely,指针,访问,0,18
子节点是树结构中直接位于某一节点下方的节点，它与父节点存在直接的层级关系，是父节点所衍生出来的下一级节点,belg,子节点,父节点,0,24
数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机的存储结构，反映数据元素之间的逻辑关系,rely,逻辑结构,数据元素,3,9
栈是一种只能在一端进行插入和删除操作的特殊线性表，允许操作的一端称为栈顶，不允许操作的一端称为栈底,none,插入,删除,11,14
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
哈希表是一种数据结构它通过哈希函数将键映射到特定位置来存储和检索数据以实现快速的数据访问平均情况下时间复杂度接近常数,rely,哈希表,哈希函数,0,13
满二叉树的核心特征是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值，即第i层,b-belg,满二叉树,二叉树,0,29
每次从未排序序列中选最小元素与未排序首位交换,none,排序,排序,4,16
数据的逻辑结构的核心性质是数据元素之间的逻辑关系，它独立于数据的存储方式，描述了数据元素之间的关联方式和组织形式,belg,逻辑结构,数据元素,3,13
堆是一种优先队列数据结构，它通常用数组实现，满足堆特性：对于最大堆，每个节点的值大于或等于其子节点的值,rely,队列,数组,6,17
堆排序的核心性质是堆中每个节点的值都大于或等于其子节点的值（大顶堆）或小于或等于其子节点的值（小顶堆），并且堆是一种,rely,堆排序,堆,0,54
平衡二叉树的核心特征是树上任一节点的左子树和右子树的高度差不超过1并且左子树和右子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左子树和右子树都是一棵平衡,b-belg,平衡二叉树,排序,0,10
非线性结构是一种数据元素之间存在一对多或多对多关系的数据结构，其数据元素的逻辑关系不再是简单的线性顺序关系,belg,非线性结构,数据元素,0,8
堆排序是利用堆结构特性进行排序的算法,rely,堆排序,堆,0,6
堆是一种特殊数据结构，父节点键值大于或小于子节点,rely,父节点,子节点,11,21
队列是一种特殊的线性表，其核心性质是只允许在一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
二叉搜索树是一棵空树或者是具有下列性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,20
叶子节点是树结构中没有子节点的节点,b-belg,叶子节点,子节点,0,11
路径是图中从一个顶点到另一个顶点的顶点序列（若图为有向图则路径有方向，从起始顶点按边的指向到终止顶点，若为无,none,路径,有向图,0,25
连通图的核心特征是图中任意两个顶点之间都存在路径，即从图中任何一个顶点出发都可以通过一系列边到达其他任何顶点,rely,连通图,路径,0,22
有向图的核心特征是其边具有方向性，即从一个顶点指向另一个顶点，顶点之间的连接是单向的，不同于无向图中边没有方向的情况,anto,有向图,无向图,0,46
二叉搜索树中，每个节点的左子树中的所有节点的值均小于该节点的值，右子树中的所有节点的值均大于该节点的值，且左、右子树,belg,二叉搜索树,左子树,0,12
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
递归基础的核心性质是存在某些特定的简单情况或初始条件，在这些情况下递归函数可以直接给出结果而无需进一步递归调用,rely,递归基础,递归,0,51
子节点是树结构中直接位于某一节点下方的节点，具有与父节点通过特定的边相连且是该父节点所关联的下一层级节点的特点,belg,子节点,父节点,0,25
交换排序是一种排序算法，其核心特征是通过比较元素并交换不满足顺序要求的元素位置，逐步将无序序列转变为有序序列,b-belg,交换排序,排序,0,7
平衡二叉树的核心性质是树上任一节点的左子树和右子树的高度差的绝对值不超过1且左子树和右子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
二叉树遍历按特定顺序访问节点以全面了解结构,rely,二叉树,遍历,0,3
有向图的核心特征是其边具有方向性，即从一个顶点指向另一个顶点，这种方向性决定了图中顶点之间的关系是单向的，与无向图边,anto,有向图,无向图,0,54
数组是相同类型数据元素的有序集合,belg,数组,数据元素,0,7
回溯法是通过尝试所有可能路径求解问题的算法策略,rely,回溯法,路径,0,12
根节点是树结构中的起始节点，没有父节点，是树中所有其他节点的祖先，具有独一无二性且在树的层次结构中处于最高层位置,none,根节点,父节点,0,16
树是一种分层结构，有根节点且子节点关系明确,none,根节点,子节点,10,14
树的查找的特点的核心特征是基于树的层次结构从根节点开始按照特定规则逐层或分支遍历节点以确定目标元素是否存在于树中,rely,查找,根节点,2,22
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值即2^(i-1)（,b-belg,满二叉树,二叉树,0,24
有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条边都有明确的方向，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其每一层上的节点数都达到最大值即该层节点数为2^(,b-belg,满二叉树,二叉树,0,24
树的高度是从根节点到最远叶节点的最长简单路径上的边数，其核心性质包括非空树的高度大于等于0，并且对于任意一棵非空树,none,树的高度,根节点,0,6
图的顶点是图结构中的基本元素，是组成图的节点，用于表示图中的对象或实体，在有向图或无向图中具有标识作用且与边相关,none,图的顶点,有向图,0,37
根节点是树结构中处于顶端无父节点的起始节点,none,根节点,父节点,0,13
二叉树是一种树型结构，它的每个节点最多有两个子节点，分别称为左子节点和右子节点，并且二叉树可以为空树,belg,二叉树,子节点,0,22
完全二叉树的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数,belg,完全二叉树,二叉树,0,13
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
双向链表每个节点包含两个指针分别指向前一个节点和后一个节点从而实现双向遍历并且可以方便地在链表中进行插入删除等操作,belg,双向链表,指针,0,12
树中从根节点到最远叶子节点的最长简单路径上的边数就是树的高度树中不同节点到根节点的距离可能不同但树的高度是固定值且,none,根节点,叶子节点,3,9
栈具有后进先出的特点即最后入栈的元素最先出栈,rely,栈,入栈,0,13
无向图是一种图结构，其中边没有方向，即如果存在一条连接顶点A和顶点B的边，那么从顶点A到顶点B和从顶点B到顶点A,b-belg,无向图,图,0,6
循环链表是链表尾节点指向头节点形成循环的链表结构,b-belg,循环链表,链表,0,5
插入排序是将未排序数据插入已排序序列合适位置,belg,插入排序,排序,0,7
有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
递归基础是递归函数中无需递归调用的最简情况定义,belg,递归基础,递归,0,12
回路是在电路中电流能沿其流动并回到起点的闭合路径,belg,回路,路径,0,22
回路是图中从某顶点出发又回到该顶点的路径,b-belg,回路,路径,0,18
算法效率是指算法执行所需要的计算机资源量，包括时间资源和空间资源，衡量算法效率主要通过时间复杂度和空间复杂度来体现,none,时间复杂度,空间复杂度,43,49
满二叉树是除叶节点外每个节点都有两个子节点的二叉树,rely,满二叉树,子节点,0,18
树的高度是从根节点到最远叶节点的最长路径长度,rely,树的高度,根节点,0,6
根节点是树结构中没有父节点的唯一节点，处于树的最顶端位置，是树的起始点，它在层次结构中具有特殊地位，是整个树结构数据,none,根节点,父节点,0,10
递归基础是递归算法中确定的最简单情况或初始条件，在该条件下递归函数无需再次调用自身即可直接给出结果,belg,递归基础,递归,0,5
完全二叉树是深度为k的有n个结点的二叉树，若按层次序编号后其所有结点均与深度为k的满二叉树中编号从1至n,b-belg,完全二叉树,二叉树,0,17
叶子节点是一棵树中没有子节点的节点,b-belg,叶子节点,子节点,0,11
每次从未排序序列中选最小元素放已排序序列末尾,none,排序,排序,4,16
选择基准分两部分递归排序使数组有序的排序算法,rely,选择基准,递归,0,8
数组是具有相同数据类型的一组数据元素的集合，这些元素在内存中按顺序存储，可通过下标唯一地访问每个元素,b-belg,数组,数据类型,0,7
递归基础的核心特征是存在一个或多个明确的终止条件，当满足这些条件时递归过程不再继续调用自身而是直接返回一个确定的结果,rely,递归基础,递归,0,33
线性表是具有相同数据类型的n个数据元素的有限序列，其中n≥0，当n=0时为空表，相邻元素之间存在一对一的线性关系,b-belg,线性表,数据类型,0,8
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
非线性结构中数据元素之间的关系不呈线性关系,belg,非线性结构,数据元素,0,6
二叉树遍历的核心特征是通过特定顺序访问二叉树中的每个节点，先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是,rely,二叉树,遍历,0,3
广度优先搜索的核心性质是按照层次依次访问节点，先访问距离起始节点较近的节点，直到遍历完所有节点或找到目标节点,rely,广度优先搜索,访问,0,18
图的边是连接图中两个顶点的线其具有方向性或无方向性且在有向图中边有明确的起始顶点和终止顶点在无向图中边所连接,belg,图的边,有向图,0,27
映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一的一个元素与之对应,rely,映射,集合,0,6
深度优先搜索是按路径延伸方向深入探索直至无法继续,rely,深度优先搜索,路径,0,8
数组是相同类型数据元素的有序集合,belg,数组,数据元素,0,7
二叉树遍历按特定顺序访问节点以完整呈现树结构,rely,二叉树,遍历,0,3
归并排序是将数组分成子数组排序后合并成有序数组,rely,归并排序,数组,0,6
广度优先搜索是一种图搜索算法，其核心性质是按照层次依次访问节点，先访问距离起始节点较近的节点，直到遍历完所有可达节点,rely,广度优先搜索,图,0,9
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表,b-belg,链表,存储结构,0,20
循环链表的核心性质是其尾节点的指针指向头节点从而形成一个环形结构使得链表中各个节点能够依次相连形成一个封闭的循环,rely,循环链表,尾节点,0,11
循环链表是尾节点指向头节点形成循环的链表结构,rely,循环链表,尾节点,0,5
数据的逻辑结构是指数据元素之间的逻辑关系，它与数据的存储无关，独立于计算机，反映数据元素之间的结构关系,rely,逻辑结构,数据元素,3,9
路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图是有向顶点序列），该序列中顶点依次相邻且边存在（有向图中,none,路径,有向图,0,24
无向图的核心特征是由顶点集合和边集合组成，其中边是没有方向的，即如果顶点u和顶点v之间存在一条边，那么从u到v和,belg,无向图,集合,0,12
递归基础是递归函数中无需再次递归调用的终止条件,belg,递归基础,递归,0,14
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
广度优先搜索是一种按照层次依次访问节点，先访问距离起始节点较近的节点，直至找到目标节点或遍历完所有节点的搜索算法,rely,广度优先搜索,访问,0,15
叶子节点是数据结构中没有子节点的节点,b-belg,叶子节点,子节点,0,12
二叉搜索树是一棵空树或者具有如下性质的二叉树：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值,b-belg,二叉搜索树,二叉树,0,19
选择基准值将数组分两部分递归排序以达快速有序,rely,数组,递归,6,12
在数据结构中，稳定性指排序后相同元素相对位置不变,rely,稳定性,排序,7,11
二叉树的核心性质是一棵非空二叉树的第 i 层上最多有 2 的 i-1 次方个结点，深度为 k 的二叉树最多有 2,none,二叉树,二叉树,0,13
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性,b-belg,队列,线性表,0,8
图是由顶点集合及顶点间的关系集合组成的数据结构，其中顶点集合不能为空，顶点间的关系集合描述了顶点之间的连接方式,none,集合,集合,5,14
树是一种非线性的数据结构，它有一个根节点，且每个节点有零个或多个子节点，子节点之间形成层次关系，具有递归性和分支结构,none,根节点,子节点,17,32
队列是一种特殊的线性表，其核心性质是只允许在表的一端进行插入操作，而在另一端进行删除操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
邻接表是一种用于表示图的数据结构，对于图中的每个顶点，它都有一个链表，链表中存储了与该顶点相邻接的其他顶点,belg,邻接表,链表,0,32
广度优先搜索按层次依次扩展节点以遍历图或树结构,rely,广度优先搜索,遍历,0,16
满二叉树是除叶子外每个节点都有两个子节点的二叉树,rely,满二叉树,子节点,0,17
线性结构中数据元素之间存在一对一的线性关系,belg,线性结构,数据元素,0,5
图是由顶点集合及顶点间边的集合组成的数据结构,none,集合,集合,5,13
回溯法是一种通过尝试所有可能的解空间路径，在搜索过程中不断检查和排除不符合条件的路径，以找到问题的解的算法策略,rely,回溯法,路径,0,18
双向链表是一种线性数据结构，其中每个节点包含一个数据元素以及分别指向其前驱节点和后继节点的两个指针,belg,双向链表,数据元素,0,24
数组是一种具有固定大小的数据结构，其中元素具有相同的数据类型，并且可以通过下标来访问和修改这些元素,none,数组,数据类型,0,26
指针是存储变量内存地址并通过该地址访问变量的变量,rely,指针,访问,0,17
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
广度优先搜索按层次依次访问节点以找到目标节点,rely,广度优先搜索,访问,0,11
存储结构是指数据元素及其关系在计算机存储器中的表示，包括顺序存储、链式存储、索引存储和散列存储等方式,rely,存储结构,数据元素,0,6
连通图的核心特征是图中任意两个顶点之间都存在路径，即从图中任何一个顶点出发，都能够通过一系列边到达其他所有顶点,rely,连通图,路径,0,22
满二叉树是所有节点都有左右子树且叶子层满的二叉树,belg,满二叉树,子树,0,13
连通图是指在无向图中，若任意两个顶点之间都存在路径，则该无向图为连通图，在有向图中，若对于每一对顶点u和,b-belg,连通图,无向图,0,6
二叉树是一种每个节点最多有两个子树的树形结构,belg,二叉树,子树,0,15
线性表是数据元素有序排列且有唯一前驱和后继的序列,belg,线性表,数据元素,0,4
链表由节点组成，节点通过指针相连，数据存储灵活,none,链表,指针,0,12
链表是由节点组成，节点包含数据及指向下一节点的指针,belg,链表,指针,0,23
顺序查找按顺序逐个检查元素直至找到目标或遍历完,rely,顺序查找,遍历,0,20
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，具有先进先出的特性,b-belg,队列,线性表,0,8
图的边是连接图中顶点的线，具有两个端点且方向可分为有向边和无向边，边可有权重，边的集合决定了图的连通性,b-rely,图的边,集合,0,41
二叉树遍历是按特定顺序访问二叉树中所有节点的操作,rely,二叉树,遍历,0,3
叶子节点是一棵树中没有子节点的节点,b-belg,叶子节点,子节点,0,11
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表为止,rely,顺序查找,线性表,0,6
子节点是树结构中直接连接在父节点之下的节点，具有与父节点通过特定关系相连且在树的层级结构中有其特定位置和作用等特点,belg,子节点,父节点,0,13
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理位置上也相邻的数据结构,belg,线性表,数据元素,20,25
递归基础是递归算法中满足特定条件的初始情况其特点在于该初始情况能够直接给出问题的解而无需再次调用递归函数,belg,递归基础,递归,0,5
数组是由相同类型的数据元素组成的有序集合，具有存储相同类型数据、元素有序排列且有固定存储位置和大小等核心性质,belg,数组,数据元素,0,9
归并排序是将序列分治后合并有序子序列的排序算法,b-belg,归并排序,排序,0,19
指针是一种变量，其值为内存中另一个变量或对象的地址，通过指针可以间接访问和操作其所指向的内存位置的数据,none,指针,指针,0,28
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
有向图是一种由顶点集合及顶点间的有向边构成的图，其中每条有向边都有明确的方向，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即每一个节点要么有两个子,b-belg,满二叉树,二叉树,0,22
满二叉树是一种二叉树，其每一层的节点数都达到了最大值，即除叶子节点外每个节点都有两个子节点，叶子节点都在同一层，并且,b-belg,满二叉树,二叉树,0,7
二叉树遍历按特定顺序访问节点以完整呈现树结构,rely,二叉树,遍历,0,3
线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表,rely,查找,线性表,2,6
将未排序数据插入已排序序列的合适位置完成排序,rely,排序,插入,2,6
递归基础是递归算法中存在的一种终止条件，当满足该条件时递归不再继续进行，直接返回一个确定的简单结果,rely,递归基础,递归,0,5
单链表通过节点指针依次相连存储数据,rely,单链表,指针,0,7
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
顺序表是一种线性表，其核心性质为逻辑上相邻的元素在物理存储位置上也相邻，并且可以通过数组下标直接访问元素,none,线性表,数组,6,42
将未排序数据插入已排序序列的合适位置完成排序,rely,排序,插入,2,6
有向图是一种图结构，其边具有方向性，即从一个顶点指向另一个顶点，这是有向图区别于无向图的核心特征，通过有向边,b-belg,有向图,图,0,6
完全二叉树的特点的核心性质是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到,belg,完全二叉树,二叉树,0,16
回溯法是通过尝试多种路径并回退来求解问题的方法,rely,回溯法,路径,0,10
交换排序是通过元素交换位置来实现排序的方法,rely,交换排序,排序,0,16
二叉树是一种每个节点最多有两个子树的树形结构包括一个根节点以及左子树和右子树并且左子树和右子树也都是二叉树,belg,二叉树,子树,0,15
顺序查找是从数据序列开头依次查找目标元素的方法,belg,顺序查找,查找,0,14
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,b-belg,平衡二叉树,排序,0,10
回溯法基础的特点是在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根节点出发搜索解空间树，当探索到某一节点,rely,回溯法,深度优先搜索,0,27
回路是在图中从一个顶点出发，沿着边经过若干个顶点后又回到该起始顶点的路径且路径中顶点不重复（除起始顶点）,belg,回路,路径,0,34
双向链表的核心特征是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而可以双向遍历链表,belg,双向链表,指针,0,25
顺序表是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的数据元素在物理存储位置上也相邻的数据结构,belg,线性表,数据元素,20,25
树的深度是从根节点开始自顶向下到最远叶子节点所经过的最长路径上的节点数，反映了树在垂直方向上的层次数量，体现了树结构,rely,树的深度,根节点,0,6
队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作，遵循先进先出的原则,b-belg,队列,线性表,0,8
线性表是具有相同数据类型的n个数据元素的有限序列,b-belg,线性表,数据类型,0,8
