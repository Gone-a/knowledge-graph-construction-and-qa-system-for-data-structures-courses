sentence,relation,head,tail,head_offset,tail_offset
单链表由节点组成每个节点含数据及指向下一节点指针,belg,单链表,指针,0,22
链表是通过指针连接节点来存储数据的线性结构,rely,链表,指针,0,5
存储结构的核心特征是数据元素及其关系在计算机存储器中的表示方式以及如何通过这种表示来实现对数据的高效存储、访问和管理,belg,存储结构,数据元素,0,10
有向图是一种图结构，其中边具有方向，即从一个顶点指向另一个顶点，这是有向图区别于无向图的核心特征，在有向图,b-belg,有向图,图,0,6
根节点是树结构起始点无父节点有子节点等,relative,根节点,父节点,0,11
数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可通过下标来唯一标识和访问每个元素,attr,数组,数据类型,0,12
二叉树是一种每个节点最多有两个子树的树形结构,belg,二叉树,子树,0,15
回溯法基础特点是按条件深度优先搜索解空间找可行解,rely,回溯法,深度优先搜索,0,11
比较排序是基于元素间比较进行顺序排列的排序方式,b-belg,比较排序,排序,0,19
将未排序数据插入已排序序列的合适位置进行排序,rely,排序,插入,2,6
线性表是零个或多个数据元素的有限序列,belg,线性表,数据元素,0,9
堆排序利用堆结构特性高效地对数据进行排序,rely,堆排序,堆,0,5
双向链表是节点含前驱和后继指针的链表结构,belg,双向链表,指针,0,13
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
邻接表以链表形式存储图中顶点及相关边信息,rely,邻接表,链表,0,4
平衡二叉树的核心性质是树上任一结点的左子树和右子树的高度之差不超过1并且左右两个子树都是一棵平衡二叉树,belg,平衡二叉树,左子树,0,18
数组是相同类型数据元素的有序集合,belg,数组,数据元素,0,7
根节点是树结构中的起始节点，它没有父节点且是树中其他节点的祖先节点，树中所有节点都直接或间接与根节点相连,relative,根节点,父节点,0,17
数组的核心特征是具有相同数据类型的一组数据元素，这些元素在内存中按顺序存储，可以通过下标来唯一地访问每个元素,attr,数组,数据类型,0,12
二叉树遍历是按照某种特定顺序访问二叉树中每个节点一次且仅一次的操作方式，分为前序遍历（根左右）、中序遍历（左根右）、,rely,二叉树,遍历,0,3
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
栈是一种只能在一端进行插入和删除操作的特殊线性表，其插入操作称为进栈，删除操作称为出栈，遵循后进先出的原则,relative,插入,删除,11,14
队列特点是先进先出，元素按顺序入队出队,rely,队列,入队,0,15
双向链表是一种链表结构，其每个节点除了包含数据域外，还包含两个指针分别指向前一个节点和后一个节点，从而支持双向遍历,b-belg,双向链表,链表,0,7
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
平衡二叉树或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树,b-belg,平衡二叉树,二叉树,0,23
指针是存储变量内存地址的变量具有间接访问特性,none,指针,访问,0,18
回溯法按选优条件深度优先搜索并适时回溯找解,rely,回溯法,深度优先搜索,0,8
回路是从一点出发经一系列节点后又回到该点的路径,b-belg,回路,路径,0,21
顺序查找的核心特征是从数据序列的第一个元素开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列,rely,顺序查找,遍历,0,42
循环链表是一种链表结构，其尾节点的指针域指向头节点，从而形成一个环，使得从链表中的任意节点出发都能遍历整个链表,b-belg,循环链表,链表,0,7
数据逻辑结构定义的核心概念是数据元素间逻辑关系,rely,逻辑结构,数据元素,2,14
线性表是数据元素按顺序排列的有限序列,belg,线性表,数据元素,0,4
图的边是连接图中两个顶点的线，它表示顶点之间的某种关系，且边具有方向或无方向之分，在有向图中边有明确的起始顶点,b-belg,图的边,有向图,0,42
数组是具有相同数据类型元素的有序集合,attr,数组,数据类型,0,7
数组是存储相同类型数据的有序集合且内存连续,b-belg,数组,集合,0,14
双向链表是节点含前驱和后继指针的链表结构,belg,双向链表,指针,0,13
根节点是树结构中处于顶层无父节点的起始节点,relative,根节点,父节点,0,13
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表,b-belg,链表,存储结构,0,20
循环链表是一种尾节点指向头节点形成循环的链表结构,belg,循环链表,尾节点,0,7
回溯法是按选优条件深度优先搜索解空间树找解的方法,rely,回溯法,深度优先搜索,0,9
在图论中，回路是指一条起始顶点与终止顶点相同的路径，且路径中除起始顶点与终止顶点可相同外，其余顶点均不重复,b-belg,回路,路径,5,23
双向链表的核心特征是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针，从而可以双向遍历链表,attr,双向链表,指针,0,25
深度优先搜索按深度推进，优先探索一条路径到底,rely,深度优先搜索,路径,0,18
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
平衡二叉树每个节点左右子树高度差绝对值不超1,belg,平衡二叉树,子树,0,11
选择基准分区递归排序以达快速有序效果,rely,递归,排序,6,8
循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任何一个节点出发都可以遍历整个链表,b-belg,循环链表,链表,0,7
快速排序是通过一趟排序将数组分成两部分并递归排序,b-belg,快速排序,排序,0,9
满二叉树是除叶子外每个节点都有两个子节点的二叉树,belg,满二叉树,子节点,0,17
顺序查找是从数据序列开头依次查找目标元素的方法,b-belg,顺序查找,查找,0,14
广度优先搜索的核心性质是按照层次依次访问节点，先访问距离起始节点较近的节点，直到遍历完所有节点或找到目标节点,attr,广度优先搜索,访问,0,18
树的深度是从根节点到最远叶子节点的最长路径长度,rely,树的深度,根节点,0,6
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点指向另一个顶点的方向,b-belg,有向图,图,0,18
树是一种分层结构有根且子树不相交的非线性结构,b-belg,子树,非线性结构,11,17
二叉树遍历的定义的核心性质包括先序遍历是先访问根节点再递归访问左子树和右子树，中序遍历是先递归访问左子树再访问,rely,二叉树,遍历,0,3
回溯法基础的特点是按深度优先策略，从根节点出发搜索解空间树，在搜索至某一节点时先判断该节点是否包含问题的解，若不包含,rely,回溯法,根节点,0,18
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层上的节点数都达到最大值，即第i层有2^(,b-belg,满二叉树,二叉树,0,24
树的度是指一棵树中，最大的节点度，即节点拥有子树的数目，树中各节点度的最大值就是树的度，这是树的度的核心,attr,树的度,子树,0,22
二叉树是一种每个节点最多有两个子树的树形结构,belg,二叉树,子树,0,15
邻接矩阵用二维数组表示图中顶点间邻接关系,rely,邻接矩阵,数组,0,7
叶子节点是树结构中没有子节点的末端节点,relative,叶子节点,子节点,0,11
链表是通过指针将节点连接起来的数据结构,rely,链表,指针,0,5
顺序查找是从数据结构的一端开始，依次将数据元素与给定值进行比较，直到找到匹配元素或遍历完整个数据结构的查找方法,rely,顺序查找,数据元素,0,19
映射是一种从集合A到集合B的对应关系，对于集合A中的任意一个元素，在集合B中都有唯一的一个元素与之对应,b-belg,映射,集合,0,6
连通图是图中任意两个顶点之间都存在路径的图,attr,连通图,路径,0,17
树是一种非线性的数据结构，有且仅有一个根节点，每个节点有零个或多个子节点，且任意两个节点间有且仅有一条路径相连,relative,根节点,子节点,19,33
稳定性是指在数据结构中，若存在两个相等的元素，在排序前后它们的相对位置保持不变则该数据结构具有稳定性,b-attr,稳定性,排序,0,24
哈希表是通过哈希函数将键映射到存储位置的数据结构,rely,哈希表,哈希函数,0,6
指针是存储变量内存地址的变量具有间接访问特性,none,指针,访问,0,18
二叉搜索树是一棵空树或者满足若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值，若它的右子树不空，则右,belg,二叉搜索树,左子树,0,17
树的查找是在给定的树结构中，根据特定的条件或键值，从根节点开始，按照树的遍历规则逐步寻找满足条件的节点的操作过程,rely,查找,根节点,2,26
简单排序是对数据序列通过比较元素大小并进行交换等操作，将其按特定顺序（如升序或降序）排列的一种排序方法,b-belg,简单排序,排序,0,47
穷举法是对问题所有可能的情况进行逐一列举和检验，以找出符合条件的解，其核心性质是通过全面遍历所有可能情况来求解问题,attr,穷举法,遍历,0,44
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
图的顶点是图结构中用于表示数据元素的节点,attr,图的顶点,数据元素,0,13
树的查找的核心特征是从树的根节点开始，按照特定规则沿着树的分支路径逐步比较节点的值，以确定目标元素是否存在于树中,rely,查找,根节点,2,13
非线性结构中至少存在一个数据元素有两个或两个以上的直接前驱或直接后继，其数据元素之间的关系不再是一对一的线性关系,belg,非线性结构,数据元素,0,12
连通图中任意两个顶点之间都存在路径相连,belg,连通图,路径,0,15
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，描述了数据元素之间的关联方式以及数据的组织形式,belg,逻辑结构,数据元素,3,9
将未排序数据插入已排序序列的合适位置进行排序,rely,排序,插入,2,6
树是一种分层数据结构包含根节点及子节点,none,根节点,子节点,12,16
邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中存储与该顶点相邻接的其他顶点信息,rely,邻接表,链表,0,32
数据逻辑结构特点指数据元素间抽象关系不依赖存储,belg,逻辑结构,数据元素,2,9
子节点是树结构中直接连接在父节点之下的节点,relative,子节点,父节点,0,13
循环链表是链表尾节点指向头节点形成循环的链表结构,b-belg,循环链表,链表,0,5
递归基础是递归函数中无需递归调用可直接求解的情况,rely,递归基础,递归,0,12
指针是存储变量内存地址并通过该地址访问变量的变量,none,指针,访问,0,17
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
数组是一种由相同类型的数据元素组成的线性数据结构，这些元素在内存中按顺序存储且通过下标来唯一标识和访问,belg,数组,数据元素,0,11
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系,b-belg,有向图,图,0,18
堆排序是利用堆这种数据结构所具有的父节点大于或等于子节点（大顶堆）或父节点小于或等于子节点（小顶堆）的性质，将,rely,堆排序,堆,0,6
在树结构中通过特定路径查找特定节点元素,rely,路径,查找,9,11
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
线性结构中数据元素存在一对一的线性关系,belg,线性结构,数据元素,0,5
数组是存储相同类型数据的有序集合且内存连续,b-belg,数组,集合,0,14
二叉树是一种每个节点最多有两个子树的树形结构,belg,二叉树,子树,0,15
链表由节点组成，节点通过指针相连，数据存储灵活,rely,链表,指针,0,12
存储结构定义的核心性质包括数据元素在计算机内存中的存储方式以及它们之间的逻辑关系如何通过存储方式得以体现等方面,belg,存储结构,数据元素,0,13
堆排序是一种基于堆这种数据结构，通过构建初始堆、交换堆顶元素与末尾元素并调整堆来逐步将无序数组排序的排序算法,rely,堆排序,堆,0,8
加权图是一种图结构，其中每条边都被赋予一个权重值，该权重值表示边的某种属性或代价，用于在图的各种算法和应用中衡量边的,b-belg,加权图,图,0,6
归并排序是将数组分治后合并有序子数组的排序算法,rely,归并排序,数组,0,6
完全二叉树是深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的,b-belg,完全二叉树,二叉树,0,18
堆排序是利用堆结构特性进行排序的算法,rely,堆排序,堆,0,6
图的顶点是图结构中用于表示数据元素的节点,attr,图的顶点,数据元素,0,13
二叉树遍历的核心性质包括先序遍历是根节点、左子树、右子树的顺序，中序遍历是左子树、根节点、右子树的顺序,rely,二叉树,遍历,0,3
线性查找是按顺序依次对数据集合中的每个元素进行比较判断，直至找到目标元素或遍历完整个集合的查找方法,rely,查找,集合,2,13
顺序查找是按顺序逐个检查数据元素以确定目标元素,rely,顺序查找,数据元素,0,12
归并排序是将一个无序数组分成两个子数组分别递归排序后再将排序好的子数组合并成一个有序数组的排序算法,rely,归并排序,数组,0,10
连通图是任意两点间都存在路径可相互到达的图,rely,连通图,路径,0,12
二叉树遍历分为前序遍历中序遍历和后序遍历，前序遍历是根左右，中序遍历是左根右，后序遍历是左右根，每种遍历都,rely,二叉树,遍历,0,3
映射是一种元素对应关系一个集合到另一个集合的对应,rely,映射,集合,0,13
数据逻辑结构是数据元素间逻辑关系的整体,belg,逻辑结构,数据元素,2,7
广度优先搜索是一种图搜索算法，其核心性质是按照层次依次访问节点，先访问距离起始节点较近的节点，直到遍历完所有可达节点,rely,广度优先搜索,图,0,9
平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树,none,平衡二叉树,排序,0,10
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表,b-belg,链表,存储结构,0,20
满二叉树是一棵深度为k且有2^k-1个节点的二叉树，其每一层上的节点数都达到最大值，即每一个节点要么有两个子,b-belg,满二叉树,二叉树,0,22
根节点是树结构中处于顶层没有父节点的唯一节点，它是树的起始点，从它开始向下延伸出树的各个分支和子节点,none,根节点,父节点,0,14
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值,b-belg,满二叉树,二叉树,0,24
堆排序是一种基于堆这种数据结构进行排序的算法，它将待排序数据构建成一个堆，通过不断取出堆顶元素并调整堆结构来实现排序,rely,堆排序,堆,0,8
满二叉树的核心性质是除最后一层无任何子节点外，每一层上的所有结点都有两个子结点，并且最后一层的叶子节点是从左到右依次,belg,满二叉树,子节点,0,18
循环链表是一种链表，其尾节点的指针指向头节点，从而形成一个环形结构，使得从链表中的任何一个节点出发都可以遍历整个链表,b-belg,循环链表,链表,0,7
递归基础是递归算法中最简单的情况，通常是问题的最小规模或最基本形式，直接给出答案而无需进一步递归调用,rely,递归基础,递归,0,5
堆是一种特殊的数据结构，它是一个完全二叉树，并且满足父节点的值大于或等于（大顶堆）或小于或等于（小顶堆）其子节点的值,belg,完全二叉树,父节点,16,26
二叉树遍历分为前序遍历（根左右）、中序遍历（左根右）、后序遍历（左右根），每种遍历按照特定顺序访问二叉树节点，前,rely,二叉树,遍历,0,3
交换排序是一种排序算法，其核心性质是通过比较元素并交换不满足顺序要求的元素位置，逐步将无序序列转换为有序序列,b-belg,交换排序,排序,0,7
连通图中任意两个顶点之间都存在路径相连,belg,连通图,路径,0,15
二叉树是一种每个节点最多有两个子树的树结构,belg,二叉树,子树,0,15
哈希表是通过哈希函数将键映射到存储位置的数据结构,rely,哈希表,哈希函数,0,6
完全二叉树是若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h,b-belg,完全二叉树,二叉树,0,8
交换排序是通过元素交换位置来实现排序的方法,b-belg,交换排序,排序,0,16
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表,b-belg,链表,存储结构,0,20
有向图是一种由顶点集合以及顶点之间的有向边集合组成的图结构，其中每条有向边都具有明确的方向，从一个顶点指向另一个顶点,belg,有向图,集合,0,9
树的深度是从根节点到最远叶子节点的最长路径长度,rely,树的深度,根节点,0,6
归并排序是将数组分成子数组排序后合并成有序数组,rely,归并排序,数组,0,6
选择排序是每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,10
数据逻辑结构是数据元素间逻辑关系的整体,belg,逻辑结构,数据元素,2,7
子节点是树结构中直接连接在父节点之下的节点,relative,子节点,父节点,0,13
回溯法是通过尝试多种路径并回退来求解问题的方法,rely,回溯法,路径,0,10
线性查找是从数据序列的起始位置开始，依次将每个元素与目标值进行比较，直到找到目标值或遍历完整个序列为止的查找方法,rely,查找,遍历,2,42
数组是一种有序数据元素的集合，每个元素具有相同的数据类型，可通过数组名和下标来唯一标识和访问这些元素,belg,数组,数据元素,0,7
叶子节点是指在树结构中没有子节点的节点,relative,叶子节点,子节点,0,13
完全二叉树是深度为k的二叉树，除第k层外，其余各层的节点数都达到最大值，且第k层的节点都集中在该层最左边,b-belg,完全二叉树,二叉树,0,11
线性查找的核心特征是从数据序列的起始位置开始，依次逐个检查元素，直到找到目标元素或遍历完整个序列为止,none,查找,遍历,2,41
选择基准值将数组分两部分，递归排序子数组,none,数组,递归,6,13
路径是图中从一个顶点到另一个顶点的顶点序列（对于有向图，路径是有向顶点序列，序列中相邻顶点之间存在边或弧）,none,路径,有向图,0,24
算法效率是指算法执行所需要的计算机资源量，包括时间资源和空间资源，通常用时间复杂度和空间复杂度来衡量,relative,时间复杂度,空间复杂度,36,42
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
在树形数据结构中，若存在节点A，对于节点B，若有从B到A的有向路径且B直接连接到A，那么A就是B的父节点,none,路径,父节点,31,49
完全二叉树是深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,18
满二叉树是一棵深度为k且有2^k - 1个节点的二叉树，其中每一层的节点数都达到了该层所能容纳的最大值,b-belg,满二叉树,二叉树,0,24
图中任意两点都存在路径相连的图是连通图,rely,路径,连通图,9,16
线性查找是按顺序逐个检查数据元素以确定目标值位置,rely,查找,数据元素,2,12
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
子节点是树结构中直接连接在父节点下方的节点，具有相对于父节点的特定位置关系且可能存在多个子节点共同构成树的分支结构,relative,子节点,父节点,0,13
回溯法按选优条件深度优先搜索并适时回溯求解,rely,回溯法,深度优先搜索,0,8
平衡二叉树是一种二叉排序树，其每个结点的左右子树高度差的绝对值不超过1且左右子树均为一棵平衡二叉树,none,平衡二叉树,排序,0,10
邻接表通过链表存储顶点及相连顶点信息体现图结构,rely,邻接表,链表,0,5
有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系,b-belg,有向图,图,0,18
交换排序通过比较与交换元素位置来实现排序,b-rely,交换排序,排序,0,18
广度优先搜索按层次依次扩展节点以遍历图或树结构,attr,广度优先搜索,遍历,0,16
堆排序是利用堆结构进行排序的一种算法,rely,堆排序,堆,0,6
简单排序是按特定规则依次比较交换元素位置的排序方法,b-belg,简单排序,排序,0,21
简单排序是对数据元素按照特定规则进行比较和交换等操作以实现从小到大或从大到小有序排列的一种排序方式,rely,简单排序,数据元素,0,6
有向图是由顶点集和有向边集组成的一种图结构，其中有向边是顶点的有序对，表示从一个顶点到另一个顶点的单向关系,b-belg,有向图,图,0,18
数组是存储相同数据类型元素的有序集合,attr,数组,数据类型,0,7
线性查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配的元素或遍历完整个线性表,rely,查找,线性表,2,6
冒泡排序是一种比较相邻元素大小，若顺序错误就把它们交换过来，重复此步骤直到整个数组都被排序的排序算法,rely,冒泡排序,数组,0,39
二叉搜索树是一种二叉树，其每个节点的左子树中的所有节点的值均小于该节点的值，且右子树中的所有节点的值均大于该节点的值,b-belg,二叉搜索树,二叉树,0,8
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的线性表,b-belg,链表,存储结构,0,20
比较排序是基于元素间比较来确定其最终排序位置,b-belg,比较排序,排序,0,18
加权图的核心性质是图中每条边都被赋予一个权重值，该权重值用于表示边的某种属性或代价等，不同边的权重值可不同，基于这些,attr,加权图,边的权重,0,45
递归基础是递归定义中满足特定条件的初始情况其核心性质是具有明确的、无需进一步递归即可确定的定义值或状态,rely,递归基础,递归,0,5
图中任意两点都存在路径可相互连通的图是连通图,rely,路径,连通图,9,19
数据逻辑结构核心概念是数据元素间逻辑关系,rely,逻辑结构,数据元素,2,11
在图论中，回路是指从图中某一顶点出发，沿着边连续移动，经过若干个顶点后又回到该起始顶点且路径中各边互不相同的路径,b-belg,回路,路径,5,44
完全二叉树是深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤,b-belg,完全二叉树,二叉树,0,17
循环链表是一种首尾相连的链表结构,b-belg,循环链表,链表,0,12
根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点，树中的其他节点都直接或间接与根节点相连,relative,根节点,父节点,0,19
邻接表是一种用于表示图的数据结构，它通过为图中的每个顶点建立一个链表，链表中的节点表示与该顶点相邻接的其他顶点,rely,邻接表,链表,0,32
数组是一种有序的数据集合，其中的元素具有相同的数据类型，通过下标来访问和修改元素，并且数组的大小在创建后通常是固定的,b-belg,数组,集合,0,10
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
非线性结构中数据元素之间的关系不呈线性关系,belg,非线性结构,数据元素,0,6
堆是一种特殊数据结构满足父节点键值大于或小于子节点,relative,父节点,子节点,12,22
栈是一种只能在一端进行插入和删除操作的特殊线性表,relative,插入,删除,11,14
完全二叉树是一种特殊的二叉树，其特点是除了最后一层外，每一层上的节点数都是满的，并且最后一层上的节点都集中在该层,b-belg,完全二叉树,二叉树,0,11
完全二叉树是深度为k的有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点,b-belg,完全二叉树,二叉树,0,17
插入排序是将未排序数据插入已排序序列的合适位置,b-belg,插入排序,排序,0,7
单链表是一种每个节点只含一个指针域的链式存储结构,attr,单链表,指针,0,14
堆排序是利用堆结构特性进行排序的算法,rely,堆排序,堆,0,6
树中没有子节点的节点即叶子节点,none,子节点,叶子节点,4,11
数组是一种有序数据集合，其中所有元素具有相同的数据类型，并且可以通过一个统一的数组名和下标来唯一标识和访问每个元素,b-belg,数组,集合,0,9
选择排序每一趟从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完,b-belg,选择排序,排序,0,9
树的节点具有一个父节点（根节点无父节点），可以有零个或多个子节点，每个节点通过边与父节点和子节点相连，且节点之间具有,belg,树的节点,父节点,0,8
父节点是树结构中一个节点，有一个或多个子节点，且在从根节点到该节点的路径上，它是子节点的直接前驱节点,relative,父节点,子节点,0,19
有向图是由顶点集和有向边集组成的一种图结构其中有向边是顶点的有序对表示从一个顶点到另一个顶点的单向连接,b-belg,有向图,图,0,18
数据的逻辑结构的特点的核心性质包括数据元素之间存在特定的逻辑关系且这些关系决定了数据的组织形式和操作方式,belg,逻辑结构,数据元素,3,17
邻接矩阵是用一个二维数组来表示图中顶点之间邻接关系的矩阵，其中矩阵元素的值表示对应顶点之间是否有边相连及边的相关信息,rely,邻接矩阵,数组,0,10
哈希表是通过哈希函数将键映射到存储位置的数据结构,rely,哈希表,哈希函数,0,6
图的边是连接图中两个顶点的元素，它具有明确的两个端点即顶点，且在有向图中边有方向而无向图中边无方向,none,图的边,有向图,0,32
在有序数组中通过不断二分比较查找目标值的方法,rely,数组,查找,3,14
双向链表的核心性质是每个节点除了有指向下一个节点的指针外还有指向前一个节点的指针从而可以双向遍历链表,attr,双向链表,指针,0,25
树是一种分层结构，有根节点且子节点关系明确,relative,根节点,子节点,10,14
数组是由相同类型的数据元素组成的有限序列，具有顺序存储、元素类型一致、有固定长度以及通过下标唯一标识元素等核心性质,belg,数组,数据元素,0,9
根节点是树结构中的一个特殊节点，它没有父节点，是树的起始点且处于树的顶层位置并在整个树结构中具有关键地位,relative,根节点,父节点,0,19
线性结构数据元素之间存在一对一的线性关系,belg,线性结构,数据元素,0,4
二叉树遍历是按特定顺序访问二叉树中所有节点的操作,rely,二叉树,遍历,0,3
链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的,b-belg,链表,存储结构,0,20
线性结构中数据元素存在一对一的线性关系,belg,线性结构,数据元素,0,5
回溯法是按选优条件深度优先搜索解空间树找可行解,rely,回溯法,深度优先搜索,0,9
二叉树是每个节点最多有两个子树的树结构,belg,二叉树,子树,0,13
双向链表每个节点包含数据、指向前驱节点的指针和指向后继节点的指针，通过前驱指针和后继指针可双向遍历链表,belg,双向链表,前驱节点,0,15
递归基础的核心性质是存在某些特定的简单情况或初始条件，在这些情况下递归函数可以直接给出结果而无需进一步递归调用,rely,递归基础,递归,0,51
叶子节点是树结构中没有子节点的节点,none,叶子节点,子节点,0,11
邻接矩阵是用来表示图的一种矩阵，其中行和列对应图的顶点，矩阵元素的值表示对应顶点之间是否有边相连，若有边相连则值为1,rely,邻接矩阵,图的顶点,0,23
顺序查找是从线性表的一端开始，依次将关键字与表中元素进行比较，直到找到与关键字相等的元素或遍历完整个表的查找方法,rely,顺序查找,线性表,0,6
顺序查找是从线性表的一端开始，依次将每个元素与要查找的关键字进行比较，直到找到匹配元素或遍历完整个线性表的查找方法,rely,顺序查找,线性表,0,6
数组是相同类型数据元素的有序集合,belg,数组,数据元素,0,7
加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可以表示诸如距离、成本、时间等某种度量,b-belg,加权图,图,0,6
线性表是由零个或多个数据元素组成的有限序列,belg,线性表,数据元素,0,10
加权图是一种图结构，其中图的每条边都被赋予一个数值作为权值，这些权值可以表示诸如距离、成本、容量等某种度量,b-belg,加权图,图,0,6
指针是存储变量内存地址的变量用于间接访问数据,rely,指针,访问,0,18
图的边是连接图中两个顶点的线其具有方向性或无方向性且在有向图中边有明确的起始顶点和终止顶点在无向图中边所连接,none,图的边,有向图,0,27
队列是一种先进先出、按顺序存储和操作数据的线性结构,b-belg,队列,线性结构,0,21
数据的逻辑结构是指数据元素之间的逻辑关系，它独立于数据的存储结构，并且与数据的运算无关，只关注数据元素之间的关联方式,belg,逻辑结构,数据元素,3,9
连通图中任意两点之间都存在路径可相互到达,rely,连通图,路径,0,13
